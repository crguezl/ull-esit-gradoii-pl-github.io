

[
  
  
    
    
      {
        "title": "Lunes 2022/02/14",
        "excerpt": "Introducción a la Asignatura Procesadores de Lenguajes\n",
        "content": "Introducción a la Asignatura Procesadores de Lenguajes\n\n\n  Horarios, Calendario académico y Tutorías\n  Vías de Comunicación\n    \n      Chat vs Hangouts\n    \n  \n  Organización GitHub\n  Rellenar Cuestionario para identificar la Relación entre el usuario GitHub y el usuario ULL\n  Google Plus: Comunidad PL\n  Práctica Opcional: GitHub Campus Expert\n  Práctica: GitHub Project Board\n  Práctica: Visual Studio Code\n  Práctica: IAAS\n  La Bibliografía\n  Evaluación\n    \n      Normativa de Evaluación\n      Requisitos para participar en la Evaluación Continua\n      Pruebas Objetivas\n      Trabajos y proyectos, Informes y Valoración\n        \n          TFA\n        \n      \n      Cálculo de la Calificación\n      Alumnos que no participan en la Evaluación Continua\n    \n  \n  Referencias\n\n",
        "url": "/clases/2022/02/14/leccion.html"
      },
    
      {
        "title": "Introduccion a Procesadores de Lenguajes",
        "excerpt": "Guia Docente e Introducción a los Compiladores\n",
        "content": "\nOrganización de PL y Primeros Pasos\n\n\n  Organización de PL y Primeros Pasos\n\n\nWhat is PL About?\n\n\n  What is PL About?\n\n\n",
        "url": "/temas/introduccion-a-pl"
      },
    
      {
        "title": "GitHub Campus Expert",
        "excerpt": "Aceptación de la Práctica github-campus-expert\n",
        "content": "Aceptación de la Práctica github-campus-expert\n\nEsta práctica tiene por objetivo mejorar las competencias transversales y establecer nuestro workflow habitual.\n\nLa realización de lo que se pide respecto a los cursos es opcional pero la aceptación y el informe son obligatorios.\n\nAl aceptar la asignación, si no se ha creado ya su equipo, se le pedirá que cree uno.\nEs un equipo individual.\n\n\n  Deberá dar como nombre del equipo: nombre-apellido1-apellido2-aluXXXX.\n    \n      Sin acentos ni caracteres especiales. \nSustituya aluXXX por su usuario en la ULL.\n      Use SnakeCase si su nombre es compuesto p.ej. “Ana María González de Pérez” es ana_maria-gonzalez-de_perez-alu010034789.\n      Los equipos son de un sólo miembro.\n    \n  \n\n\nTareas\n\nEstas son las tareas a realizar:\n\n\n  Rellene el cuestionario GitHub-Alu\n  Hágase miembro de la comunidad Currents/G+ de PL (deberá estar autenticado con el gmail de la ULL)\n  Cree un project board kanban automated asociado al repo de la asignación. Rellene la columna TODO con los requisitos de la práctica.\n    \n      Véase tembién GitHub Docs: About project boards\n    \n  \n  Considere la posibilidad de realizar el curso Become a Campus Expert de GitHub. Si está cerrado puede subscríbirse a la lista y seguir el curso cuando se abra.\n  Solicite su Student Developer Pack\n  Considere la posibilidad de solicitar una GitHub Internship. Si está cerrada puede subscríbirse para recibir las actualizaciones\n  En todas las entregas de prácticas en el Campus de la asignatura deberá poner\n    \n      El enlace al repo de entrega en GitHub\n      \n        En todas las prácticas, siempre que ocupe menos de 500K, deberá adjuntar el repo en formato zip. En GH vaya a codey de ahí a:\n\n        \n      \n    \n  \n\n\nReferences\n\n\n  GitHub Docs: About project boards\n  Students leading the way: Campus Experts - Juan Pablo Flores twitch video. De 08:00 a 13:25 se dan consejos sobre como rellenar la solicitud.\n  Teachers guiding teachers: Campus Advisors Arelia Jones\n\n\n",
        "url": "/practicas/github-campus-expert"
      },
    
      {
        "title": "GitHub Project Board",
        "excerpt": "Descripción de la Práctica github-project-board\n",
        "content": "Descripción de la Práctica github-project-board\n\nPara cada práctica/asignación se crea un tablero kanban (GitHub Project Automated Kanban) asociado al repo.\n\nCree además un project board automated kanban de organización para el seguimiento de sus prácticas durante el curso.\n\n\n\nEste project board se crea a nivel de organización y no de repo.\nAñade una columna revisados por el profesor a este board\n\nMetodología de Trabajo con los Tableros\n\nEn el board del estudiante  a nivel de organización sólo creamos una incidencia  por práctica.\n\nDicha incidencia estará asociada al repo de la práctica.\n\nLa incidencia se moverá a la columna done cuando el alumno considere que está terminada. \nEn ese momento creamos una incidencia mencionando al profesor y comunicándole que hemos finalizado la tarea.\n\nAdemás:\n\n\n  Para cada práctica se crea un tablero Kanban automático en el repo de la práctica\n  En este tablero de repo se crean inicialmente en la columna TODO tantas incidencias como requisitos tiene la práctica\n  Cuando en la corrección el profesor comenta que el requisito  esta cumplido lo pasamos a la columna revisados. Si el profesor indica que algo esta mal debe convertirse en una nueva incidencia que deberá ir a TODO.  Cuando crea que la haya arreglado la mueve a done y creará una incidencia mencionando al profesor.\n\n\nReferences\n\n\n  GitHub Docs: About project boards\n\n\n",
        "url": "/practicas/github-project-board"
      },
    
      {
        "title": "GitPod and Visual Studio Code",
        "excerpt": "Descripción de la Práctica vscode\n",
        "content": "Descripción de la Práctica vscode\n\nObjetivos\n\n\n  Estudie y configure GitPod para trabajar con GitHub\n  Instale VSCode en su máquina\n  Siga los tutoriales de VSCode\n  Instale el plugin Remote SSH  y aprenda a usarlo\n  Use Live Share para colaborar con un compañero\n  Elabore un informe con la experiencia adquirida en el repositorio asignado\n\n\nGitPod\n\n\n  Apuntes de GitPod\n\n\nVSCode\n\nEstudie la sección VSCode\n\nCollaboration con Visual Studio Share\n\nInstale Visual Studio Live Share y pruébelo con un compañero\n\nRemote - SSH: Editando con VSCode en una máquina remota via SSH\n\nInstale las extensiones Remote SSH y compruebe que funcionan con su máquina del iaas\n\n\n\n",
        "url": "/practicas/visual-studio-code"
      },
    
      {
        "title": "IAAS",
        "excerpt": "Descripción de la Práctica iaas\n",
        "content": "Descripción de la Práctica iaas\n\n\n  Siguiendo las instrucciones en el  repositorio SYTW/iaas-ull-es despliegue un ejemplo como el que aparece en crguezl/express-start en su máquina virtual del servicio iaas.ull.es.\n  Puede encontrar un vídeo del profesor introduciendo el iaas.ull.es aquí.\n    \n      \n      El vídeo es de 2018 y varias de las apps usadas han cambiado de versión pero la esencia de la metodología es la misma\n    \n  \n  Añada en el README.md un pequeño tutorial de como usar y desplegar una aplicación web en iaas.ull.es.\n    \n      Haga capturas de pantalla que muestren que su máquina esta bien configurada y funcionando\n    \n  \n  La IP dinámica de su máquina virtual no debería cambiar si no la apaga. Publique la URL de despliegue en su máquina\n  Prepare la máquina para poder trabajar:\n    \n      Instale git si es necesario\n      Configura git\n      Procure que la rama actual aparezca en el prompt de la terminal.\n        \n          Ejemplo para una bash. Pon en el fichero ~/.bash_profile o ~/.bashrc estas líneas:\n        \n\n         parse_git_branch() {\n   git branch 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'\n }\n export PS1=\"\\u@\\h \\[\\033[32m\\]\\w\\[\\033[33m\\]\\$(parse_git_branch)\\[\\033[00m\\] $ \"\n        \n\n        \n          También puede usar git prompt\n          Puede añadir algo como esto a su PS1: PS1=\"\\$(git branch 2&gt;/dev/null | sed -n 's/* \\(.*\\)/\\1 /p')$ \"\n          Recuerde que si su prompt es muy largo siempre puede acortarlo con PROMPT_DIRTRIM=1\n        \n      \n      git aliases\n      Instale GitHub CLI y aprenda a usarla\n        \n          manual\n        \n      \n      Opcionalmente puede instalar linuxbrew\n      Instale nvm\n      Instale nodeJS usando nvm\n      jshint y jshint on vim o JSLint o equivalente\n        \n          Instale NERDTree para vim\n        \n      \n      Instale Express.js\n        \n          Express Web Framework (Node.js/JavaScript) (Mozilla)\n        \n      \n    \n  \n\n",
        "url": "/practicas/iaas"
      },
    
  
  
  
  {
    "title": "404 explained: A Brief Intro to the DOM, Promises and Asyn Await",
    "excerpt": "\n",
    "content": "The Code\n\nSee the code at https://github.com/ULL-ESIT-GRADOII-PL/ull-esit-gradoii-pl.github.io/edit/main/pages/404.md\n\nque se verá así \n{{site.baseurl}}/noexiste.\n\nLa página además de mostrar el mensaje de error hace un par de requests:\n\n\n  Un request a The Cat API para mostrar una imagen de gatitos obtenida al azar.\n  Un request a https://api.quotable.io/random para mostrar una cita al azar\n\n\nQue es el DOM\n\nIntenta  entender un poco el código anterior. El ejemplo combina unos cuantos conceptos importantes en \nel manejo de las tecnologías web.\n\nUno de los conceptos es el DOM (Document Object Model). Cuando nuestro browser descarga una página HTML lo primero que hace es un análisis sintáctico de la misma y construye un AST según un formato estándard que es conocido como DOM. \nLos nodos de ese AST disponen de numerosos métodos que permiten\n\n  \n    la búsqueda de nodos\n\n    let divTitle = document.getElementById(\"comment-cat\");\n    \n  \n  el recorrido,\n  la creación  de nodos\n    document.createElement(\"img\")\n    \n  \n  la modificación de nodos\n    img.src = cat[0].url\n    \n  \n  \n    la transformación del AST\n\n    divTitle.append(title);\n    \n  \n\n\nSi estos conceptos son nuevos, estos capítulos pueden ayudarte a conocer el estandard del DOM:\n\n\n  DOM tree\n  DOM navigation\n  DOM modification\n\n\nAsíncronia\n\nEl código anterior hace también mucho uso de fetch para hacer solicitudes (requests ) a un par de servidores. La llamada\n\nfetch(URL, {\n       headers: {\n       'x-api-key': \"blah\"\n       }\n    });\n\n\nretorna un objeto de la clase Promise. \nLos objetos Promise tienen tres estados:\n\n\n  pending: No se ha iniciado el proceso de carga\n  fulfilled: La carga del recurso comienza con éxito y  la promesa se resuelve a un objeto de la clase Response que permite manejar el flujo de datos. La carga realmente no tiene porque haber terminado\n  rejected: The promise rejects if the fetch was unable to make HTTP-request, e.g. network problems, or there’s no such site. Abnormal HTTP-statuses, such as 404 or 500 do not cause an error.\n\n\nLa palabra await después del fetch hace que JS espere al fulfillment de la promesa devuelta por fetch de modo que en response queda el objeto resultado de la promesa.\n\nlet response = await fetch(URL, {\n       headers: { 'x-api-key': \"blah\" }\n    });\n\n\nSi la promesa es rechazada se ejecutará el catch:\n\n(async function() {\n  try {\n    ...\n    let response = await fetch(URL, {\n       headers: { 'x-api-key': \"blah\" }\n    });\n    ...\n  }\n  catch(e) { \n    console.log(e);\n  }\n})();\n\n\nEl objeto response tiene un método json que cuando es llamado response.json() devuelve una promesa. \nEsa promesa se cumple (is fulfilled) cuando finalmente obtenemos\nel cuerpo (body) de la respuesta desde el servidor. El resultado de la promesa es el JSON retornado en el body:\n\nlet cat = await response.json();\n\n\nVéase el capítulo Promises para mas información\n\nAPI keys\n\nSee:\n\n\n  Stackoverflow: Hide api key for a Github page\n\n\nThe question is:\n\nI have a github page for my organization where I would like to call data from a 3rd party api where I need an auth token. Can I publish this github page without having the auth token displayed on the public repo?\n\nAnd here is the most voted answer:\n\n\n  In short, no. If your GitHub repo is public, all its assets are public. You can make the repo private and it will still publish on GitHub Pages if named with the username.github.io convention or if it has a gh-pages branch. While that’s an option, that’s not necessarily the right thing to do.\n\n\n\n  If your key is in your GitHub Pages repo, it sounds like it’s used for client-side API calls in JavaScript. If so, your auth token is publicly visible whether it’s in your public repo or sent in your client-side files to the browser. This is usually fine. The third-party API might have generated the auth token based on your website’s domain, and restrict calls using that token to pages originating on your domain. Otherwise, they might require the auth token only for logging requests and monitoring usage.\n\n\n\n  If the auth token is truly meant to be private, then you may need to write private server-side code to call the third-party API. Your GitHub Pages site could then hit your service for the data it needs. I’ve had to do that before where the web API had security concerns, but I still needed to retrieve non-sensitive data from the client-side.\n\n",
    "url": "/assets/practicas/jekyll-netlify/404-explained.html"
  },
  
  {
    "title": "404 Page Not Found ¡Ay Diós mío!",
    "excerpt": "\n",
    "content": "\n  \n\n{{ page.comment }}\n\n  \n  \n  \n  \n  \n\n\n  \n\n\n\n",
    "url": "/404.html"
  },
  
  {
    "title": "p7-t3-egg-2",
    "excerpt": "\n",
    "content": "Práctica: Extending Egg.  p7-t3-egg-2\n\nMetodologia\n\n{% include metodologia-egg.md %}\n\nÍndices Negativos\n\nAñada índices negativos (a la Ruby) para los arrays\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ cat examples/array-neg.egg\n\ndo{\n  def(x, array[1, array[2,3]]),\n  print(element(x, -1)),        # [ 2, 3 ]\n}\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ bin/egg.js examples/array-neg.egg\n[ 2, 3 ]\n\n\nExtendiendo element: Posibilidad de Indexar con mas de un Índice\n\n\n  Añada la posibilidad de indexar con mas de un índice a element\n\n\n [.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ cat examples/array-index.egg\n\ndo(\n  def(x, array[1, array[2,3]]),\n  print(element(x,0)),          # 1\n  print(element(x,1)),          # [ 2, 3 ]\n  print(element(x,1,1)),        # 3\n  print(element(x,-1,-1)),      # 3\n  print(element(x,-1,0))        # 2\n )\n\n\nEjecución:\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ bin/egg.js examples/array-index.egg\n1\n[ 2, 3 ]\n3\n3\n2\n\n\nSet: Modificar Elementos de un Array\n\nExtienda set para que se puedan modificar elementos de los arrays\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ cat examples/array-set-index.egg\n\ndo(\n  def(x, array[1,2,3, array[9,8,7]]),\n  set(x, 2, 9),\n  print(x),             # [ 1, 2, 9, [ 9, 8, 7 ] ]\n  set(x, 3, 1, 1000),\n  print(x)              # [ 1, 2, 9, [ 9, 1000, 7 ] ]\n)\n\n\nEjecución:\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ bin/egg.js examples/array-set-index.egg\n[ 1, 2, 9, [ 9, 8, 7 ] ]\n[ 1, 2, 9, [ 9, 1000, 7 ] ]\n\n\nNo se debería poder hacer un set con índices de una variable no estructurada\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ cat examples/set-error.egg\n\ndo(\n  def(x,4),\n  set(x, 1, 2),\n  print(x)\n)\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ bin/egg.js examples/set-error.egg\nTypeError: The object '4' is not indexable!  \n\n\nMapas, Hashes o Diccionarios\n\n\n  Añada mapas/hashes al lenguaje Egg\n\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ cat examples/map.egg\n\ndo {\n  def(x, map[\"x\", 4, \"y\", map[\"z\", 3]]),\n\n  print(element(x, \"x\")),                 # 4\n\n  print(element(x, \"y\", \"z\")),            # 3\n\n  set(x, \"y\", \"z\", 50),\n\n  print(element(x, \"y\", \"z\"))             # 50\n}\n\n\nEjecución:\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ bin/egg.js examples/map.egg\n4\n3\n50\n\n\nDos puntos como operador léxico\n\nNos gustaría poder escribir los hashes/mapas usando : para separar el nombre de la clave del valor, como en este ejemplo:\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ cat examples/map-colon.egg\n\ndo {\n  def(x, map[x: 4, y: map[z: 3]]),\n  print(x[\"y\"][\"z\"]),                     # 3\n  print(element(x, \"x\")),                 # 4\n  print(element(x, \"y\", \"z\")),            # 3\n  set(x, \"y\", \"z\", 50),\n  print(element(x, \"y\", \"z\"))             # 50\n}\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ bin/egg.js examples/map-colon.egg\n3\n4\n3\n50\n\n\nUna forma de hacer esto es empezar haciendo que el análisis léxico acepte el carácter : para el token COMMA\n\n  const COMMA = new XRegExp(`\n    (\n      ,|:(?!=) # : is an alias for comma ',' when not followed by '='\n    )\n  `, 'xy');\n\n\ny trucando nuestro analizador léxico para que siempre que una WORD vaya seguida de : se retorne una STRING\n\n  nextToken = function() {\n    if (count &lt; result.length) {\n      lookahead = result[count++];\n      if (lookahead &amp;&amp; (lookahead.type === 'WORD') &amp;&amp; (result[count] &amp;&amp; result[count].value === \":\")) {\n        lookahead.type = \"STRING\";\n      }\n      return lookahead;\n    }\n    else return null;\n  }\n\n\nEl Método sub deberá funcionar con los diccionarios/mapas\n\nHaga que los mapas tengan un método sub  que permita indexar los mapas:\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ cat examples/map-sub.egg\n\ndo(\n  def(x, map{a: 1, b: 4, c: map{d: 5, e: 3}}),\n  print(x[\"sub\"][\"a\"]),      # 1\n  print(x[\"sub\"][\"c\"][\"d\"]), # 5\n  print(x[\"sub\"][\"c\"][\"e\"]), # 3\n  print(x[\"sub\"][\"b\"])       # 4\n)\n\n\nEjecución:\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ bin/egg.js examples/map-sub.egg\n1\n5\n3\n4\n\n\nOOP en Egg\n\nAñada objetos al lenguaje Egg de manera que podamos escribir programas como este:\n\n.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ cat examples/objects.egg\n\ndo (\n  def(x, object (\n    \"c\", 0,\n    \"gc\", -&gt;{element[this, \"c\"]},\n    \"sc\", -&gt;{value, =(this, \"c\", value)},\n    \"inc\", -&gt;{=(this, \"c\", +(element[this, \"c\"],1))}\n  )),\n  print(x(\"gc\")()), # 0\n  x(\"sc\")(4),\n  print(x(\"gc\")()), # 4\n  x(\"inc\")(),   \n  print(x(\"gc\")()),  # 5\n)\n\n\nEjecución:\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ bin/egg.js examples/objects.egg\n0\n4\n5  \n\n\nDOT\n\nSyntactic Sugar: Introduzca el operador punto (dot) para poder acceder a los métodos y atributos de un  objeto.\n\nLa idea es que una expresión como:\n\n  a.b.c(arg1)\n\n\nes equivalente a esta otra expresión:\n\n  a(\"b\")(\"c\")(arg1)\n\n\nEsto es,el dot es como una llamada/apply del objeto en el que el primer argumento es el atributo/método\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ cat examples/dot.egg\n\ndo(\n  def(x, array[1,4,5]),\n  def(s, x.join(\"-\")),                 # The same as x(\"join\")(\"-\")\n  print(s),                            # 1-4-5\n  print(array[1,4,5].join(\"-\").length) # 5\n)\n\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ bin/egg.js examples/dot.egg\n1-4-5\n5\n\n\nOtro ejemplo, esta vez con objetos Egg.\n\n[~/.../crguezl-egg(private2019)]$ cat examples/dot-obj-2.egg\n\n .../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ cat examples/dot-obj-2.egg\n\ndo (\n  def(x, object (\n    c:   3,\n    gc:  -&gt;{this.c},\n    sc:  -&gt;{value, =(this, \"c\", value)},\n    inc: -&gt;{=(this, \"c\", +(this.c, 1))}\n  )),\n\n  print(x[\"c\"]), # 3\n  print(x.c),    # 3\n  print(x.gc()), # 3\n  print(x.sc(5)),# 5\n  print(x.gc())  # 5\n)\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ bin/egg.js examples/dot-obj-2.egg\n3\n3\n3\n5\n5\n\n\nOtro ejemplo con números:\n\n  [.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ cat examples/dot-num.egg\n\ndo{\n  print(4.toFixed(2)),\n  def(x, 4),\n  print(x(\"toFixed\")(2)),\n  def(z, x.toFixed(2)),\n  print(z),\n}\n\n[.../p7-t3-egg-2-04-16-2020-03-13-25/davafons(casiano)]$ bin/egg.js examples/dot-num.egg\n4.00\n4.00\n4.00\n\n\nRequire\n\n\n  Expanda el lenguaje con un require para que permita el uso de librerías\n  Repase el vídeo Como implementar la funcionalidad de “require”.\n  Aquí tiene un enlace al Repo correspondiente al vídeo.\n  Memoize las librerías para que no se carguen dos veces\n  Procure añadir esta funcionalidad sin tocar el código principal usando el strategy pattern + registry pattern\n\n\nCódigo del Módulo: [~/…/crguezl-egg(private2019)]$ cat examples/require/module.egg\n\n  # module. Exports z\n  do {\n    print(\"inside module\"),\n    :=(z, map{inc: -&gt;{x, \n                       +(x,1)\n                     } # end fun\n             } # end map\n    ), # end of :=\n    z  # el último valor será exportado\n  }\n\n\nPrograma Cliente: [~/…/crguezl-egg(private2019)]$ cat examples/require/client.egg\n\n  do {\n    :=(z, require(\"examples/require/module.egg\")),\n    print(z.inc(4)),\n    :=(w, require(\"examples/require/module.egg\")),\n  }\n\n\nEjecución:\n\n  [~/.../crguezl-egg(private2019)]$ bin/egg.js examples/require/client.egg \n  inside module\n  5\n\n\nObserve como inside module aparece una sola vez pese a que el módulo es required dos veces\n\nRegExps\n\n\n  Añada expresiones regulares al lenguaje Egg.\n  Las delimitaremos mediante r/regexpExpression/ comenzando por r/y terminando con una /.\n  Se admiten cualesquiera caracteres entre los delimitadores, incluyendo retornos de carro.\n  Use XRegExp para darle mayor potencia a las expresiones regulares.\n  Recuerde que XRegExp admite 0 o mas repeticiones de estas opciones en las expresiones regulares: [nsxAgimuy]*\n  Las expresiones regulares son un nuevo tipo de token y conllevan una ligera modificación de la sintáxis.\n  Así mismo los AST ahora tendrán un nuevo tipo regex\n\n\n[.../p6-t3-egg-1-04-16-2020-03-13-25/davafons(master)]$ cat examples/regex-simple.egg\n\n  do {\n    :=(r, r/(\\w+)\n           \\s+\n           (\\d+)  # numero \n          /x),\n    :=(s, r.test(\"a 4\")),\n    :=(m, r.exec(\";;; a 42\")),\n    print(s),\n    print(m),\n  }\n\n\n[.../p6-t3-egg-1-04-16-2020-03-13-25/davafons(master)]$ bin/egg.js examples/regex-simple.egg \ntrue\n[ 'a 42', 'a', '42', index: 4, input: ';;; a 42', groups: undefined ]\n\n\nOtro ejemplo:\n\n[.../p6-t3-egg-1-04-16-2020-03-13-25/davafons(master)]$ cat examples/regex-2.egg \n\ndo {\n  :=(d, r/\n         (?&lt;year&gt;  \\d{4} ) -?  # year\n         (?&lt;month&gt; \\d{2} ) -?  # month\n         (?&lt;day&gt;   \\d{2} )     # day\n        /x),\n  print(d(\"test\")(\"1987-07-14\")),  # true\n  :=(m, d(\"exec\")(\"1987-07-14\")),\n  print(m), #  [ '1987-07-14', '1987', '07', '14', index: 0, input: '1987-07-14' ] \n  print(m(\"index\")), # 0\n\n  :=(x, RegExp(\"exec\")(\"2015-02-22\", d)),\n                  /*\n                  [ '2015-02-22',\n                    '2015',\n                    '02',\n                    '22',\n                    index: 0,\n                    input: '2015-02-22',\n                    year: '2015',\n                    month: '02',\n                    day: '22' ]\n                  */\n  print(x), \n  print(x(\"year\")), # 2015\n  print(x(\"month\")) # 02\n}\n\n\n[.../p6-t3-egg-1-04-16-2020-03-13-25/davafons(master)]$ bin/egg.js examples/regex-2.egg \ntrue\n[\n  '1987-07-14',\n  '1987',\n  '07',\n  '14',\n  index: 0,\n  input: '1987-07-14',\n  groups: undefined\n]\n0\n[\n  '2015-02-22',\n  '2015',\n  '02',\n  '22',\n  index: 0,\n  input: '2015-02-22',\n  groups: undefined,\n  year: '2015',\n  month: '02',\n  day: '22'\n]\n2015\n02\n\n\nBucles for\n\nExtienda el lenguaje con uno o varios tipos de  bucle for\n\nBucle for convencional\n\n[.../TFA-04-16-2020-03-22-00/davafons(casiano)]$ cat examples/for.egg\n\ndo(\n  for(define(x, 0), &lt;(x, 5), ++(x),\n    print(x)\n  )\n)\n\n\n[.../TFA-04-16-2020-03-22-00/davafons(casiano)]$ bin/egg.js examples/for.egg\n0\n1\n2\n3\n4\n\n\nBucle foreach\n\n[.../TFA-04-16-2020-03-22-00/davafons(casiano)]$ cat examples/foreach.egg\n\n\ndo {\n  def(x, arr(1, 2, 3)),\n  foreach(x, x, print(x)), # Different x from inner and outer scope\n\n  def(y, map(a: 1, b: 2, c: 3)),\n  foreach(key, y.keys(), print(key.toUpperCase()))\n}\n\n\n[.../TFA-04-16-2020-03-22-00/davafons(casiano)]$ bin/egg.js examples/foreach.egg\n1\n2\n3\nA\nB\nC\n\n\nRecursos\n\n\n  Eloquent JS: Chapter 11. Project: A Programming Language\n  El lenguaje egg: repo en GitHub\n  Repo interpreter-egg\n  NodeJS Readline gist\n  En el repo ULL-ESIT-PL-1617/interpreter-egg se muestra como hacer un bucle REPL\n  XRegExp\n  El módulo @ull-esit-pl/example2test\n\n\n",
    "url": "/tema3-analisis-descendente-predictivo-recursivo/practicas/p7-t3-egg-2/"
  },
  
  {
    "title": "Parsing Expression Grammars (PEGs)",
    "excerpt": "\n",
    "content": "Introducción\n\n\n  Introducción Parsing Expression Grammars (PEGs)\n  PEG.js\n\n\nPEG.js\n\n\n  Documentación oficial del Módulo PEG.js\n  Viejos Apuntes:PEGs (Introducción a los PEGs)\n  Viejos Apuntes del profesor sobre PEG.js (PEGjs)\n  Ejemplos en PEG.js Repositorio en GitHub\n  Una Calculadora en infijo. Left recursion removed. Como Hacer Análisis Léxico en PEGs.\n    \n      simple_reduce.pegjs\n      use_simple.js\n      Compiling simple_reduce.pegjs: pegjs -o simple.js simple_reduce.pegjs\n    \n  \n  PEGjs Pasando Parámetros al Parser\n    \n      Pasando parámetros al parser\n    \n  \n\n\nGramáticas versus PEGs\n\n\n  Grammars vs PEGs examples GitHub repo\n  See paper On the relation between context-free grammars and parsing expression grammars FabioMascarenhas, SérgioMedeiros, Roberto Ierusalimschy. Elsevier\n\n\nHerramientas\n\n\n  @ull-esit-pl/pegjs-strip\n  pegjs-util\n\n\nTraduciendo de Infijo a Egg Virtual Machine\n\n\n  Traduciendo de Infijo a EggVM usando PEG.js\n\n\nPráctica p9-t4-peg-infix2egg\n\n\n  Descripción de la Práctica\n\n\n",
    "url": "/assets/temas/syntax-analysis/parsing-expression-grammars/README.html"
  },
  
  {
    "title": "Análisis LR",
    "excerpt": "\n",
    "content": "Introducción al Análisis LR\n\n\n  Jison Debugger\n  Análisis Sintáctico Ascendente en JavaScript\n  Precedencia y Asociatividad\n    \n      Repo de ejemplo crguezl/jison-prec\n    \n  \n  Construcción de las Tablas para el Análisis SLR\n  Algoritmo de Análisis LR (yacc/bison/jison)\n  Learning to Manage Conflicts\n    \n      Conflicto ds ;ss\n      Parse::Eyapp Debugging Tutorial\n        \n          Repo with examples from Parse::Eyapp Debugging Tutorial\n          Exercise: Precedence.eyp\n          Reduce-Reduce Conflicts\n            \n              Simple Reduce-reduce conflict: minimalrr.eyp and minimalrr2.eyp\n              Typical reduce-reduce conflict and solution\n              Extended Pascal conflict: enumerated versus ranges\n            \n          \n        \n      \n      Lexical Tie ins: a flag which is set by the parser actions, whose purpose is to alter the way tokens are parsed\n        \n          The Parsing of C\n            \n              `ANSI C Grammar in Eyapp\n            \n          \n          Tieins.eyp\n          SemanticInfoInTokens.eyp\n        \n      \n    \n  \n\n\nJison\n\n\n  Jison Documentation\n  Jison Debugger ¡No te lo pierdas!\n  Folder jison/examples from the Jison distribution\n  Repo ULL-ESIT-PL-1718/jison-aSb\n  Repo ULL-ESIT-PL-1718/ull-etsii-grado-pl-jisoncalc\n\n\nPráctica p10-t5-jison-infix2egg\n\n\n  Descripción de la Práctica\n\n\nGLR: Generalized LR\n\n\n  GLR Wikipedia\n  Maitreya\n    \n      fork en PL-1718\n    \n  \n\n\nC-Like languages\n\n\n  ANSI C y C++ Grammars\n    \n      ANSI C grammar in Eyapp\n      ANSI C grammar in yacc 2011\n      Degener ANSI C grammar in yacc\n      Roskind C++ Grammar in yacc\n    \n  \n  Old examples of tiny C languages in Eyapp. PL de la Antigua Ingeniería Informática\n\n\nHistoria\n\n\n  Parsing: a timeline. by Jeffrey Kegler\n  Parse-Eyapp un Parser LR para Perl\n\n\n",
    "url": "/assets/temas/syntax-analysis/analisis-LR/README.html"
  },
  
  {
    "title": "loadScript",
    "excerpt": "\n",
    "content": "Here’s a callback-based function that loads a script from a specified src and adds it \nto the current document:\n\nfunction loadScript(src, callback) {\n  let script = document.createElement('script');\n  script.src = src;\n\n  script.onload = () =&gt; callback(null, script);\n  script.onerror = () =&gt; callback(new Error(`Script load error for ${src}`));\n\n  document.head.append(script);\n}\n\n\nRewrite the loadScript function using promises.\nExample of usage:\n\n let promise = loadScript(\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.js\");\n\npromise.then(\n  script =&gt; alert(`${script.src} is loaded!`),\n  error =&gt; alert(`Error: ${error.message}`)\n);\n\npromise.then(script =&gt; alert('Another handler...'));\n\n\nSolution\n\n\n  Solution\n\n",
    "url": "/assets/temas/introduccion-a-javascript/event-loop/exercises/promises/load-script/README.html"
  },
  
  {
    "title": "Análisis Sintactico Descendente Recursivo Predictivo, Análisis de ámbito e Interpretación de Código",
    "excerpt": "\n",
    "content": "Los Analizadores Descendentes Recursivos Predictivos\n\nIntroducción\n\nIntroducción al Análisis Sintáctico Predictivo Recursivo\n\nUn poco de Teoría\n\nUn poco de teoría sore el análisis LL(1)\n\n\n\n\n\n\n\n\n",
    "url": "/assets/temas/syntax-analysis/analisis-descendente-predictivo-recursivo/README.html"
  },
  
  {
    "title": "Egg. A Programming Language",
    "excerpt": "\n",
    "content": "Introducción\n\nEsta es la primera práctica de una serie de prácticas sobre las fases de análisis sintáctico, el análisis de ámbito y la interpretación del codigo. \nSe presenta un lenguaje llamado Egg (de tipo “Lisp”) y se describe como procesarlo\ne interpretarlo.\nLas siguientes prácticas irán ampliando el lenguaje con nuevas capacidades: expresiones regulares, hashes, arrays multidimensionales, módulos, objetos, clases, … y se construyen sobre esta.\n\nPrimero: Deberá leer el capítulo 12 A Programming Language de EJS:\n\n\n  Eloquent JS. Chapter 12. Project: A Programming Language\n\n\nLea cuidadosamente el capítulo intentando comprender como funcionan las dos fases: la primera con el análisis sintáctico que produce el AST y la segunda \nen la que se ejecuta el AST.\n\nEs fundamental que llegue a dominar las bases que se asientan en esta capítulo. \nSon un montón de conceptos. \nNo desespere si al principio todo es un poco confuso. \nSi tal cosa ocurre puede que le ayude dejar por un momento la lectura y pasar a leer primero las secciones\n\n\n  Escriba la gramática y\n  Introducción al Análisis Sintáctico Predictivo Recursivo\n\n\nDespués de estas dos lecturas vuelva otra vez a la lectura del capítulo Chapter 12. Project: A Programming Language.\nNo haga todavía los ejercicios del libro.\n\nNOTA\n\nEn algunos de los ejemplos, vídeos, etc. que acompañan esta práctica puede notar algunas \ninconsistencias en el lenguaje Egg debidas a que casi en cada curso hemos ido haciendo alias de algunos de los nombres de los constructos. Por ejemplo, a veces  en un vídeo en vez de fun usamos -&gt; y en algún ejemplo en los apuntes en vez de element se usa &lt;-, etc. También en algún ejemplo aparecen llavitas { y } en vez de paréntesis (de nuevo una llave aquí es un alias del correspondiente paréntesis). Son cambios triviales que no deberían afectar a la comprensión del texto.\n\nEscriba la Gramática\n\nHaga este ejercicio para determinar la gramática del lenguaje Egg:\n\n\n  Ejercicio\n\n\nEscriba en su README.md las reglas de producción de la gramática que reconoce el traductor\n\nTiene una posible solución aquí\n\n¿Es correcto este diseño de la gramática?\n\n\n  Gramática modificada\n\n\nAnálisis Sintáctico Predictivo Recursivo\n\nLea esta breve introducción a como se escribe un analizador  Sintáctico Predictivo Recursivo como el que se construye en el capítulo 12 A Programming Language de EJS:\n\nAnálisis Sintáctico Predictivo Recursivo\n\nÁrboles de Análisis Abstracto\n\nÁrboles de Análisis Abstracto\n\nFixing Scope\n\nResuelva ahora los dos ejercicios propuestos en el capítulo:\n\n\n  Comments y\n  Fixing Scope\n\n\nSi no se le ocurre como resolver el segundo apartado, Fixing Scope, no desespere. Es un ejercicio muy difícil. Inténtelo mas de una vez.\n\nPuede encontrar una solución al problema en la rama Inicial de este repo ULL-ESIT-PL-1617/egg/. \nSi no se le ocurre una solución acuda a este enlace. \nY si se le ocurrió  también. Contraste las soluciones y quédese con la que le parezca mejor.\n\nAnalizador Léxico Separado\n\nIntente ahora separar la fase de análisis sintáctico de la fase de análisis léxico\nen una función separada lex que cada vez que es llamada por las funciones  parseExpression y parseApply retorna\nel siguiente token.\n\nEsto es, a diferencia de en los ejemplos vistos en las clases anteriores, el analizador léxico no analiza todos los tokens en una pasada guardándolos en un array, sino que tan pronto como detecta el siguiente token lo devuelve a la rutina de  análisis sintáctico que le ha llamado.\n\nlet lookahead;\nlet lineno = 1; // Save token line numbers\nlet offset = 0; // Save token offset\n...\nfunction lex() {\n  let match;\n  ... // Find the next token and save it in lookahead \n  return lookahead;\n}\n\n\nSe usará una variable compartida que se debe llamar lookahead para guardar el token actual. Esta variable lookahead sirve para la comunicación entre las funciones de análisis sintactico y el analizador léxico. El código de parseExpressiondebería quedar  parecido a esto:\n\nfunction parseExpression() {\n  let expr;\n\n  if (lookahead.type == \"STRING\") {\n    expr = {type: \"value\", value: lookahead.value};\n    lex();\n    return expr;\n  } else if (lookahead.type == \"NUMBER\") {\n    expr = {type: \"value\", value: lookahead.value};\n    lex();\n    return expr;\n  } else if (lookahead.type == \"WORD\") {\n    expr = {type: \"word\", name: lookahead.value};\n    lex();\n    return parseApply(expr);\n  } else {\n    throw new SyntaxError(`Unexpected syntax line ${lineno}: ${program.slice(0,10)}`);\n  }\n}\n\n\nSepare en Módulos el Programa\n\nSepare el código en dos módulos Node.js:\n\nlib\n├── eggvm.js\n└── parse.js\n\n\n\n  \n    parse.js debe contener las funciones del análisis léxico y sintáctico y exportarlas\n\n    [~/.../crguezl-egg(master)]$ tail -n 9 lib/parse.js\n    \n    module.exports = {\n  ...\n  parse,\n  parseApply,\n  parseExpression,\n  parseFromFile,\n};\n    \n  \n  \n    eggvm.jsdebe contener todo el código relativo al entorno de ejecución. Este módulo debería exportar funciones para la ejecución del árbol generado en la primera fase como run, runFromFile, runFromEVM:\n\n    [~/.../crguezl-egg(master)]$ tail -n 1 lib/eggvm.js\n    \n    module.exports = {\n  run, \n  runFromFile, \n  runFromEVM, \n  topEnv, \n  specialForms, \n  parser, \n  evaluate\n};\n    \n  \n\n\nAñada también tres ejecutables que usan los módulos anteriores:\n\n[~/.../crguezl-egg(master)]$ tree bin\nbin\n├── egg.js\n├── eggc.js\n└── evm.js\n\n\negg\n\nEl programa egg  deberá ejecutar el programa .egg que se le pasa por línea de comandos:\n\n$ cat one.egg\ndo(\n  define(x, 4),\n  define(setx, fun(val, \n      set(x, val)\n    )\n  ),\n  setx(50),\n  print(x)\n)\n$ egg one.egg\n50\n\n\neggc\n\nCompiles the input program to produce a JSON containing the tree: eggc examples/two.egg produces the JSON file examples/two.egg.evm\n\nPor ejemplo, si le damos como entrada este programa:\n\n[~/.../crguezl-egg(master)]$ cat examples/two.egg\n\ndo(\n  define(sum,  # function\n    fun(nums, other,\n      do(\n         print(other),\n         define(i, 0),\n         define(sum, 0),\n         while(&lt;(i, length(nums)),\n           do(define(sum, +(sum, element(nums, i))),\n              define(i, +(i, 1))\n           )\n         ),\n         sum\n      )\n   )\n ),\n print(sum(array(1, 2, 3), 4))\n)\n\n\nSi ejecutamos bin/eggc.js  examples/two.egg produce como salida un fichero con el mismo nombre y extensión .evm (por Egg Virtual Machine) que no es otra cosa que el AST generado por el parser guardado como un objeto JSON.\n\n[~/.../crguezl-egg(master)]$ bin/eggc.js examples/two.egg\n[~/.../crguezl-egg(master)]$ ls -ltr examples/two.egg.evm\n-rw-r--r--  1 casiano  staff  7466  2 abr 11:03 examples/two.egg.evm\n\n\nPuede ver los contenidos del JSON generado en la ejecución de ejemplo en este enlace:\n\n\n  examples/two.egg.evm\n\n\nevm\n\nEl intérprete evm ejecuta los ficheros en formato Egg Virtual Machine.\n\n[~/.../crguezl-egg(master)]$ bin/evm.js examples/two.egg.evm\n4\n6\n\n\nExamples folder\n\nAñada una carpeta examples en la que guardará los ejemplos con los que va comprobando la funcionalidad de su compilador:\n\n[~/.../crguezl-egg(master)]$ tree examples/ -I '*evm'\nexamples/\n├── array.egg\n├── greater-x-5.egg\n├── if.egg\n├── ...\n└── two.egg\n\n\nCada vez que introduzca una nueva funcionalidad cree uno o varios ejemplos que sirvan para ilustrarla y comprobar el buen funcionamiento.\n\nPor ejemplo, cuando trabajemos en la tarea  Fixing Scope podemos añadir a nuestro \ndirectorio examples un par de ejemplos que ilustran como debería funcionar.\n\nUno que produzca una excepción:\n\n[~/.../crguezl-egg(private2019)]$ cat examples/scope-err.egg\ndo(\n  set(x,9),\n  print(x) # ReferenceError: Tried setting an undefined variable: x\n)\n\n\ny al menos otro que muestre como unas variables ocultan a otras:\n\n[~/.../crguezl-egg(private2019)]$ cat examples/scope.egg\ndo(\n  def(x,9),\n  /* def crea una nueva variable local */\n  def(f, fun{\n    do{\n      def(x, 4),\n      print(x) # 4\n    }\n  }),\n  /* set no crea una nueva variable local */\n  def(g, fun{set(x, 8)}),\n  f(),\n  print(x), # 9\n  g(),\n  print(x) # 8\n)\n\n\nConforme programamos, vamos ejecutando nuestra solución contra estos programas. \nCuando tengamos la solución correcta la salida debería ser algo así:\n\n[~/.../crguezl-egg(private2019)]$ bin/egg.js examples/scope-err.egg\nReferenceError: Tried setting an undefined variable: x\n\n\n[~/.../crguezl-egg(private2019)]$ bin/egg.js examples/scope.egg\n4\n9\n8\n\n\nUno de nuestros objetivos es reciclar esos ejemplos en las pruebas y en la documentación.\n\nTest Folder\n\nAñadimos una carpeta test y en ella los \nprogramas de prueba test/test.js (Mocha o Jest, use lo que prefiera. Los ejemplos que siguen están en Mocha).\n\nCreamos tabién un subdirectorio test/examples en el que copiamos nuestro ejemplo de prueba:\n\ncp examples/scope.egg test/examples/\n\n\ny junto a el escribimos un fichero con la salida esperada test/examples/scope.egg.expected.\n\nUna estructura como esta:\n\ntest/\n├── examples\n│   ├── scope.egg\n│   └── scope.egg.expected\n└── test.js\n\n\nCada vez que logramos implementar una nueva funcionalidad o un nuevo objetivo añadimos en el directorio examples uno o varios  programas examples/objetivo.egg cuya ejecución muestra el buen funcionamiento de nuestro código. También lo añadimos a test/examples/objetivo.egg así como la salida esperada test/examples/objetivo.egg.expected.\n\nDe esta forma la prueba se reduce a comprobar que la salida de la ejecución del programa test/examples/objetivo.egg es igual a los contenidos de test/examples/objetivo.egg.expected.\n\nPuede usar el módulo @ull-esit-pl/example2test para simplificar esta metodología\n\n[~/.../test(private2019)]$ cat scopes.js\n\nlet fs = require('fs');\nlet should = require(\"should\");\nlet e2t = require('@ull-esit-pl/example2test');\nlet eggvm = require('../lib/eggvm.js');\n\ndescribe(\"Testing scopes\", function() {\n  let runTest = (programName, done) =&gt; {\n    e2t({\n      exampleInput: programName + '.egg',\n      executable: 'node bin/egg.js',\n      assertion: (result, expected) =&gt; result.replace(/\\s+/g,'').should.eql(expected.replace(/\\s+/g,'')),\n      done: done,\n    });\n  };\n\n  it(\"should  not allow the use of non declared variables\", function() {\n    let program = fs.readFileSync('examples/scope-err.egg', 'utf8');\n    (() =&gt; { eggvm.run(program); }).should.throw(/setting.+undefined.+variable/i);\n  });\n\n  it(\"testing scope.egg\", function(done) {\n    runTest('scope', done);\n  });\n});\n\n\nComo se puede apreciar, el objeto eggvm exportado por el módulo lib/eggvm.js\ndispone de un método run que ejecuta la cadena que se le pasa como entrada.\n\nNo olvides ejecutar todas las pruebas npm test cada vez que resuelves un nuevo objetivo\n\n[~/.../crguezl-egg(private2019)]$ npx mocha test/scopes.js\n  Testing scopes\n    ✓ should  not allow the use of non declared variables\n    ✓ testing scope.egg (138ms)\n  2 passing (151ms)\n\n\nContinuous Integration\n\nUse GitHub Actions para añadir CI al proyecto\n\nGitHub Registry\n\nPublique el compilador como módulo en GH Registry en el ámbito @ULL-ESIT-PL-1920.\n\nPuesto que este paquete contiene ejecutables es conveniente que lea la sección\nbin de la documentación de npm.js sobre package.json:\n\n[~/.../crguezl-egg(master)]$ jq .bin package.json\n\n{\n  \"egg\": \"./bin/egg.js\",\n  \"eggc\": \"./bin/eggc.js\",\n  \"evm\": \"./bin/evm.js\"\n}\n\n\nSolución Parcial\n\nSi logra resolver estos objetivos ¡Enhorabuena!.\n\nPuede encontrar una solución a algunos de los problemas planteados en este repo ULL-ESIT-PL-1617/egg.\n\nAsegúrese que entiende como funciona.\n\nTambién puede encontrarlo como módulo en npm @crguezl/eloquentjsegg\n\nMejoras en el Analizador Léxico\n\nA continuación mejore el analizador léxico que encuentra en este repo \ncomo sigue:\n\n\n  Guarde en el objeto token el offset de comienzo, la línea de comienzo, etc\n  Mejore los mensajes de error usando esta información\n  El analizador léxico actual destruye la cadena conteniendo el programa conforme la analiza.  Es posible  escribir una analizador léxico que recorra la cadena conteniendo el programa sin destruirla usando la opción sticky. Estudie esta mejora\n  Mejore las pruebas, especialmente con programas que contienen errores\n\n\nBucle REPLpara egg (Repeat Evaluate Print Loop)\n\nHaga que el ejecutable egg funcione como un bucle REPL cuando no se le proporciona un fichero de entrada.\n\n[~/ull-pl1718-campus-virtual/tema3-analisis-sintactico/src/egg/crguezl-egg(private)]$ bin/egg.js\n&gt; def(x, array(1,2,array(3,4))) # x = [1,2,[3,4]]\n[ 1, 2, [ 3, 4 ] ]\n&gt; &lt;-(x,2) # 3d element\n[ 3, 4 ]\n&gt; &lt;-(x,0) # 1st element\n1\n&gt; # Pulsamos CTRL-D\n&gt; goodbye!\n\n\nEn este Vídeo Programando un bucle REPL para el lenguaje Egg explicamos como hacerlo\n\n\n\nRecursos\n\n\n  Eloquent JS: Chapter 11. Project: A Programming Language\n  El lenguaje egg: repo en GitHub. Contiene una solución a los  problemas de separar el analizador léxico del sintáctico así como al de separar los códigos y los tres ejecutables. También tiene ejemplos de pruebas en Mocha y Chai\n  NodeJS Readline gist: un sencillo gist que te enseña a usar readline para hacer un bucle interactivo. Quizá conviene que lo leas cuando llegues a la sección del problema del REPL\n  En el repo ULL-ESIT-PL-1617/interpreter-egg se muestra como hacer un bucle REPL\n  Vídeo Programando un bucle REPL para el lenguaje Egg\n  XRegExp\n  El módulo @ull-esit-pl/example2test\n  Tests. Mocking and Stubbing\n    \n      Sinon API\n      Side effects of stubbing console in tests\n      Unit Test like a Secret Agent with Sinon.js by Elijah Manor\n    \n  \n\n\n",
    "url": "/assets/temas/syntax-analysis/analisis-descendente-predictivo-recursivo/practicas/p5-t3-egg-0/README.html"
  },
  
  {
    "title": "The Earley Algorithm Explained",
    "excerpt": "\n",
    "content": "Let be a grammar \\(G = (\\Sigma, V, P, Start)\\) and \\(x\\)  an input string \\(x = a_{1}a_{2} \\ldots a_{n}\\).\n\nA state is an element \\((X \\longrightarrow \\alpha \\bullet \\beta, j)\\) where \n\\(X \\longrightarrow \\alpha \\beta \\in P\\) is a  production in the set of  grammar productions  \\(P\\), and \n\\(j \\in \\{0 \\ldots n \\}\\) is a position in the input string \\(x = a_{1}a_{2} \\ldots a_{n}\\).\n\nThe set of active states when the  input prefix \\(a_1 \\ldots a_k\\) is being analyzed is called \\(S_k\\).\n\nMore precisely, \\(S_k\\) is the set of states \\((X \\longrightarrow \\alpha \\bullet \\beta, j)\\)  whose production rule \\(X \\longrightarrow \\alpha \\beta\\) appears in a derivation from the \\(Start\\) symbol\n\n\\[Start \\overset{*}{\\Longrightarrow} a_{1}a_{2} \\ldots a_{j-1}X\\omega \\underset{X \\longrightarrow \\alpha \\beta}{\\Longrightarrow } a_{1}a_{2} \\ldots a_{j-1} \\alpha \\beta \\omega \n\\overset{*}{\\Longrightarrow} a_{1}a_{2} \\ldots a_j \\ldots a_{k} \\beta \\omega\\]\n\nObserve that it holds that \\(\\alpha \\overset{*}{\\Longrightarrow} a_{j} \\ldots a_k\\)\n\nand so the production \\(X \\longrightarrow \\alpha \\beta\\) can  still be used for derivation at position \\(k\\).\n\nThe parser is seeded with \\(S_0\\) consisting of only the top-level rule. The parser then repeatedly executes three operations:\n\n\n  prediction,\n  scanning, and\n  completion.\n\n\nThese three operations are repeated until no new states can be added to the set \\(S_k\\)\n\nPrediction\n\n\n  \\(\\forall s = (X \\longrightarrow \\alpha \\bullet Y \\beta, j)  \\in S_k\\) (where j is the start of the substring), and \\(Y \\in V\\) is in the set of non terminals\n  add states \\((Y \\longrightarrow \\bullet \\gamma, k)\\) to \\(S_k\\) \\(\\forall Y \\longrightarrow \\gamma\\) grammar productions having Y on the left hand side.\n\n\nDuplicate states are not added to the state set, only new ones.\n\nScanning\n\nIf \\(a_{k} \\in \\Sigma\\) is the next terminal in the input stream, then \\(\\forall s \\in S_{k-1}\\) of the form \\(s = (X \\longrightarrow \\alpha \\bullet a_{k} \\beta, j)\\) , add \n\\(s = (X \\longrightarrow \\alpha a_{k} \\bullet \\beta, j)\\) to \\(S_{k}\\).\n\nCompletion\n\n\\(\\forall s \\in S_{k}\\)  of the form \\(s = (Y \\longrightarrow \\gamma \\bullet, j)\\), \nfind all states in \\(S_j\\) of the form \\((X \\longrightarrow \\alpha \\bullet Y \\beta, i)\\) and add \\((X \\longrightarrow \\alpha Y \\bullet \\beta, i)\\) to \\(S_k\\).\n\nAcceptance\n\nThe algorithm accepts if an state with the form \\((Start \\longrightarrow \\gamma \\bullet, 0)\\) ends up in \\(S_n\\), where \\(Start\\) is the start symbol of the grammar \\(G\\) and \\(n\\) is the input length.\n\nIf there are several of these states it means the grammaris ambiguous.\n\nIf there are none, the input is rejected.\n\nPseudocode\n\nWe augment the initial grammar with  the rule γ → •S\n\n\nfunction EarleyParse(words, grammar) {\n\n    function init(words) {\n        let S = [];\n        for(k =0; k &lt;= words.length; k++) {\n          S[k] = new Set();\n        }\n        return S;     \n    }\n\n    let S = init(words);\n\n    function PREDICTOR((A → α•Bβ, j), k, grammar) {\n      grammar.rules(B).forEach((B → γ) =&gt; S[k].add((B → •γ, k)))\n    }\n\n    function SCANNER((A → α•aβ, j), k, words) {\n      if (words[k].match(a.regexp)) S[k+1].add((A → αa•β, j))\n    }\n\n    function COMPLETER((B → γ•, s), k) {\n      S[s].forEach((A → α•Bβ, j) ) =&gt; S[k].add((A → αB•β, j))\n    }\n\n    S[0].add((γ → •S, 0));\n    for(k = 0: k &lt;= words.length; k++) {\n        S[k].forEach(state =&gt; {  // S[k] can expand during this loop\n            if (!state.isFinished()) \n                if (state.NextElement() in grammar.NonTerminal) \n                    PREDICTOR(state, k, grammar)         // non-terminal\n                else\n                    SCANNER(state, k, words)             // terminal\n            else \n                COMPLETER(state, k)\n        })\n    }\n    return S;\n}\n\n\n\nExample\n\n# https://en.wikipedia.org/wiki/Earley_parser#Example\n\nP -&gt; S\n\nS -&gt; S \"+\" M\n   | M\n\nM -&gt; M \"*\" T\n   | T\n\nT -&gt; \"1\"\n   | \"2\"\n   | \"3\"\n   | \"4\"\n\n\n➜  examples git:(main) ✗ nearleyc wikipedia.ne -o wikipedia.js \n➜  examples git:(main) ✗ nearley-test wikipedia.js -i '2+3*4'\nTable length: 6\nNumber of parses: 1\nParse Charts\nChart: 0\n0: {P →  ● S}, from: 0\n1: {S →  ● S \"+\" M}, from: 0\n2: {S →  ● M}, from: 0\n3: {M →  ● M \"*\" T}, from: 0\n4: {M →  ● T}, from: 0\n5: {T →  ● \"1\"}, from: 0\n6: {T →  ● \"2\"}, from: 0\n7: {T →  ● \"3\"}, from: 0\n8: {T →  ● \"4\"}, from: 0\n\nChart: 1\n0: {T → \"2\" ● }, from: 0\n1: {M → T ● }, from: 0\n2: {M → M ● \"*\" T}, from: 0\n3: {S → M ● }, from: 0\n4: {S → S ● \"+\" M}, from: 0\n5: {P → S ● }, from: 0\n\nChart: 2\n0: {S → S \"+\" ● M}, from: 0\n1: {M →  ● M \"*\" T}, from: 2\n2: {M →  ● T}, from: 2\n3: {T →  ● \"1\"}, from: 2\n4: {T →  ● \"2\"}, from: 2\n5: {T →  ● \"3\"}, from: 2\n6: {T →  ● \"4\"}, from: 2\n\nChart: 3\n0: {T → \"3\" ● }, from: 2\n1: {M → T ● }, from: 2\n2: {M → M ● \"*\" T}, from: 2\n3: {S → S \"+\" M ● }, from: 0\n4: {S → S ● \"+\" M}, from: 0\n5: {P → S ● }, from: 0\n\nChart: 4\n0: {M → M \"*\" ● T}, from: 2\n1: {T →  ● \"1\"}, from: 4\n2: {T →  ● \"2\"}, from: 4\n3: {T →  ● \"3\"}, from: 4\n4: {T →  ● \"4\"}, from: 4\n\nChart: 5\n0: {T → \"4\" ● }, from: 4\n1: {M → M \"*\" T ● }, from: 2\n2: {M → M ● \"*\" T}, from: 2\n3: {S → S \"+\" M ● }, from: 0\n4: {S → S ● \"+\" M}, from: 0\n5: {P → S ● }, from: 0\n\n\nParse results: \n[\n  [\n    [ [ [ [ '2' ] ] ], '+', [ [ [ '3' ] ], '*', [ '4' ] ] ]\n  ]\n]\n\n\nEarley Parsing Explained\n\n\n  Earley Parsing Explained by Loup\n\n\nToby Ho on the Earley Parsing Algorithm\n\n{% include video provider=”youtube” id=”WNKw1tiskSM”%}\n\nEarley Parsing by Natalie Parde\n\n{% include video provider=”youtube” id=”1j6hB3O4hAM”%}\n\nWikipedia\n\n\n  Earley parser\n\n\nOptimizing Right Recursion\n\n\n  \n    Optimising Right Recursion by Loup\n  \n  \n    Joop Leo’s optimizations for right-Recursion original paper\n  \n\n",
    "url": "/assets/temas/syntax-analysis/earley/algorithm.html"
  },
  
  {
    "title": "Árboles de Análisis Abstracto",
    "excerpt": "\n",
    "content": "\n\nUn Árbol de Análisis Abstracto (denotado AAA, en inglés AST) porta la misma información que el árbol de análisis sintáctico concreto pero de forma mas condensada, eliminándose\nterminales y producciones que no aportan información.\n\nThe data structure that the parser will use to describe a program consists of node objects, each of which has a type property indicating the kind of expression it is and other properties to describe its content.\n\nEl árbol de análisis sintáctico abstracto es una representación\ncompactada del árbol de análisis sintáctico concreto que contiene la\nmisma información que éste.\n\nPor ejemplo, para una gramática que acepta expresiones como:\n\nx=1\ny=2\n3*(x+y)\n\n\neste es un ejemplo de árbol sintáctico concreto:\n\n\n\ny este un posible árbol sintáctico abstracto con la misma información que el anterior:\n\n\n\nAlfabeto con Aridad o Alfabeto Árbol\n\nNo deja de ser curioso que es posible definir un equivalente del cierre de Kleene \\(\\Sigma^*\\) de un alfabeto \\(\\Sigma\\) para modelizar matemáticamente los árboles.\n\nPara ello se empieza definiendo lo que es un alfabeto con función de aridad:\n\nAlfabeto con Función de Aridad\n\nUn alfabeto con función de aridad es un par \\((\\Sigma, \\rho)\\) donde \\(\\Sigma\\) es un conjunto finito y\n\\(\\rho\\) es una función\n\n\\[\\rho: \\Sigma \\rightarrow ℕ_0 \\cup \\{ * \\}\\]\n\ndenominada función de aridad. Aquí \\(ℕ_0\\) denota al conjunto de los números naturales incluyendo el cero.\n\nDenotamos por \\(\\Sigma_k\\) los elementos del alfabeto con aridad k:\n\n\\[\\Sigma_k = \\{ a \\in \\Sigma :\\ \\rho(a) = k \\}\\]\n\n\\(\\Sigma_0\\) son las hojas, \\(\\Sigma_1\\) son los elementos con un solo hijo,\n\\(\\Sigma_2\\) los nodos binarios, \n\\(\\Sigma_*\\) son los nodos con aridad variable, \netc.\n\nLenguaje de los Arboles o Términos\n\nDefinimos el conjunto de los árboles \\(B(\\Sigma)\\) con alfabeto \\(\\Sigma\\) inductivamente:\n\n\n  El árbol vacío está en \\(B(\\Sigma)\\)\n  Todos los elementos de aridad 0  así como los de aridad variable \\(\\Sigma_*\\) están en \\(B(\\Sigma)\\):\n    \n      \\(a \\in  \\Sigma_0\\) implica \\(a \\in B(\\Sigma)\\)\n      \\(a \\in  \\Sigma_*\\) implica \\(a \\in B(\\Sigma)\\)\n    \n  \n  Si \\(b_1, \\ldots , b_k \\in B(\\Sigma)\\) y \\(f \\in \\Sigma_k\\) es un\nelemento \\(k\\)-ario o bien es de aridad variable, entonces \\(f(b_1 \\ldots  b_k) \\in B(\\Sigma)\\)\n\n\nLos elementos de \\(B(\\Sigma)\\) se llaman árboles o términos.\n\n\\(B(\\Sigma)\\) es el conjunto de todos los árboles posibles.\n\nAl igual que cuando parseamos las cadenas hablamos de tokens para hablar de la \nocurrencia en la cadena de un elemento del alfabeto aquí hablamos de nodos para \nhablar de la ocurrencia de un elemento \\(f \\in \\Sigma_k\\) dentro de un árbol.\n\n\\(B(\\Sigma)\\) es a los nodos (árboles) lo  que \\(\\Sigma*\\) es a las tokens (strings).\n\nAridad  de los Nodos en Egg\n\nLos AST con los que trabajamos en nuestro parser son de tres tipos\n\n\\[\\Sigma = \\{ VALUE, \\, WORD, \\, APPLY, \\, ARRAY \\}\\]\n\ncon aridad:\n\n\n  \\(\\rho(VALUE) = 0\\) los nodos VALUE son hojas\n  \\(\\rho(WORD) = 0\\) los nodos WORD los consideramos hojas\n  \\(\\rho(APPLY) = 2\\) un APPLY tiene dos hijos: el hijo OPERATOR y el hijo ARGS que es un array\n  \\(\\rho(ARRAY) = *\\) los arrays contienen diferentes números de árboles\n\n\nImplementación de los Nodos de los AST de Egg\n\nEn cuanto a la implementación, al igual que con los tokens, los nodos son objetos y tienen propiedades.\nTodos los nodos tiene una propiedad type que determina que tipo de nodo es y por tanto su aridad.\n\n\n  Los nodos del tipo VALUE representan constantes (literals) STRINGS o NUMBERS.\n    \n      Their value property contains the string or number value that they represent.\n    \n  \n  Nodes of type WORD are used for identifiers (names).\n    \n      Such objects have a name property that holds the identifier’s name as a string.\n    \n  \n  APPLY nodes represent applications. They have an\n    \n      operator property that refers to the expression that is being applied, and an\n      args property that is an special node: ARRAY\n    \n  \n  ARRAY is in fact an special node of ASTs that holds the arguments of the application\n\n\nExample: AST &gt;(x, 5)\n\nFor example, The AST resulting from parsing the input\n&gt;(x, 5)\n\nwould be represented like this term:\n\nAPPLY(\n  WORD, \n  ARRAY[\n    WORD, \n    VALUE\n  ]\n)\n\n\nor if we want to explicit the attributes we can extend the notation to look like this:\n\nAPPLY(\n  operator: WORD{name:&gt;}, \n  args:     ARRAY[\n              WORD{name:x} \n              VALUE{value:5}\n            ]\n)\n\n\nMore precisely, describing its actual implementation attributes:\n\n$ cat greater-x-5.egg \n&gt;(x,5)\n$ ./eggc.js greater-x-5.egg \n$ cat greater-x-5.egg.evm\n\n\nHere is the JSON:\n\n{\n  \"type\": \"apply\",\n  \"operator\": {\n    \"type\": \"word\",\n    \"name\": \"&gt;\"\n  },\n  \"args\": [\n    {\n      \"type\": \"word\",\n      \"name\": \"x\"\n    },\n    {\n      \"type\": \"value\",\n      \"value\": 5\n    }\n  ]\n}\n\n\nExample: AST ` +(a,*(4,5))`\n\nOtro ejemplo, el AST para +(a,*(4,5)) sería\n\nAPPLY(\n  WORD,\n  ARRAY[\n    WORD, \n    APPLY(\n      WORD, \n      ARRAY[VALUE, VALUE]\n    )\n   ]\n)\n\n\nQue explicitando los atributos sería:\n\nAPPLY(\n  operator: WORD[{name: +},\n  args: ARRAY[\n    WORD{name: a}, \n    APPLY(\n      name: WORD{name:*}, \n      args: ARRAY[VALUE{value:4}, VALUE{value:5}]\n    )\n   ]\n)\n\n\nGramática Árbol\n\nUna Gramática Árbol en nuestra definición \nes una cuadrupla \\(((\\Sigma, \\rho), N, P, S)\\), donde:\n\n\n  \n    \\((\\Sigma, \\rho)\\) es un alfabeto con aridad\n\\(\\rho: \\Sigma \\rightarrow ℕ_0 \\cup \\{ * \\}\\)\n  \n  \n    \\(N\\) es un conjunto finito de variables sintácticas o no terminales\n  \n  \n    \\(P\\) es un conjunto finito de reglas de producción de la forma\n\\(A \\rightarrow s\\) con \\(A \\in N\\) y \\(s \\in B(\\Sigma \\cup N)\\)\n  \n  \n    \\(S \\in N\\) es la variable o símbolo de arranque\n  \n\n\nNOTA: Regular Tree Grammar en la Wikipedia\n\nGramática Informal de los árboles del Parser de Egg\n\nEn nuestro intérprete de Egg  los árboles usados son los generados por esta gramática:\n\nast: VALUE\n   | WORD \n   | APPLY( WORD ARRAY( ast * ))\n\n\nNotación de Dewey o Coordenadas de un Árbol\n\nLa notación de Dewey (1876)\nes una forma de\nespecificar los subárboles de un árbol \\(t \\in B(\\Sigma)\\). La notación\nsigue el mismo esquema que la numeración de secciones en un texto: es\nuna palabra formada por números separados por puntos. Así t/2.1.3\ndenota al tercer hijo del primer hijo del segundo hijo del árbol \\(t\\).\n\nLa definición formal por inducción sería:\n\n\n  \n    \\(t/\\epsilon = t\\). Esto es, si el sufijo es \\(\\epsilon\\) es el propio árbol\n  \n  \n    Si \\(t = a(t_1, \\ldots t_k)\\) y \\(j \\in \\{ 1 \\ldots k \\}\\) y \\(n\\) es una\ncadena de números y puntos, se define inductivamente el subárbol\n\\(t/j.n\\) como el subárbol \\(n\\)-ésimo del \\(j\\)-ésimo subárbol de \\(t\\).\nEsto es: \\(t/j.n = t_j/n\\)\n  \n\n\nPor ejemplo si:\n\nt =  \nAPPLY(\n  operator: WORD{name:+}, \n  args: [\n      WORD{name:a}, \n      APPLY(\n        operator: WORD{name:*}, \n        args: [VALUE{value:4},VALUE{value:5}]\n      )\n  ]\n)\n\n\nEntonces (indexando en 1), si no me equivoco:\n\n\n  t/1 sería el árbol WORD{name:+}\n  t/2.1 sería el WORD{name:a}\n  t/2.2.2.1 sería *VALUE{value:4}\n\n\nEs una idea muy repetida: Otras notaciones\n\nEn realidad, la notación de Dewey es equivalente al operador “.”\nque usamos en los lenguajes de programación para denotar los atributos de un objeto. \nCon el “.” a partir de t podemos construir expresiones como:\n\nt.operator, t.operator.name, t.args.0.name, t.args.1.args.0.value\n\n\nLa misma idea aparece en el uso del operador “/” para denotar subdirectorios en Unix \n/src/js/tutu.js y sub-recursos en una URL.\n\nTambién en el lenguaje XPath para hablar de elementos de los objetos de un documento XML. \nFor example, the expression “A//B/*[1]” selects the first child (“*[1]”), whatever its name, of every “B” element that itself is a child or other, deeper descendant (“//”) of an “A” element that is a child of the current context node (the expression does not begin with a “/”).\n\nThe language jq to select sub-objects inside a JSON is another example.\n\nCódigos para la Construcción de los ASTs de Egg con un algoritmo PDR\n\nCódigo de parse\n\nfunction parse(p) {\n  setProgram(p);\n  lex();\n  let result = parseExpression();\n   if (lookahead !== null)\n    throw new SyntaxError(`Unexpected input after reached the end of parsing ${lineno}: ${program.slice(0,10)}`);\n\n  return result;\n}\n\n\nCódigo de parseExpression\n\nfunction parseExpression() {\n  let expr;\n\n  if (lookahead.type == \"STRING\") {\n    expr = {type: \"value\", value: lookahead.value};\n    lex();\n    return expr;\n  } else if (lookahead.type == \"NUMBER\") {\n    expr = {type: \"value\", value: lookahead.value};\n    lex();\n    return expr;\n  } else if (lookahead.type == \"WORD\") {\n    expr = {type: \"word\", name: lookahead.value};\n    lex();\n    return parseApply(expr);\n  } else {\n    throw new SyntaxError(`Unexpected syntax line ${lineno}: ${program.slice(0,10)}`);\n  }\n}\n\n\nCódigo de parseApply\n\nfunction parseApply(tree) {\n  if (!lookahead) return tree;   // apply: /* vacio */\n  if (lookahead.type !== \"LP\") return tree; // apply: /* vacio */\n\n  lex();\n\n  tree = {type: 'apply', operator: tree, args: []};\n  while (lookahead &amp;&amp; lookahead.type !== \"RP\") {\n    let arg = parseExpression();\n    tree.args.push(arg);\n\n    if (lookahead &amp;&amp; lookahead.type == \"COMMA\") {\n      lex();\n    } else if (!lookahead || lookahead.type !== \"RP\") {\n      throw new SyntaxError(`Expected ',' or ')'  at line ${lineno}: ... ${program.slice(0,20)}`);\n    }\n  }\n  if (!lookahead)  throw new SyntaxError(`Expected ')'  at line ${lineno}: ... ${program.slice(0,20)}`);\n  lex();\n\n  return parseApply(tree);\n}\n\n\n",
    "url": "/assets/temas/syntax-analysis/analisis-descendente-predictivo-recursivo/ast-description.html"
  },
  
  {
    "title": "The Async Module",
    "excerpt": "\n",
    "content": "Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript. Although originally designed for use with Node.js and installable via\n\nnpm install async\n\n\nit can also be used directly in the browser.\n\nMap\n\nasync.map(['file1','file2','file3'], (file, cb) =&gt; fs.stat(file, cb),  function(err, results)  {\n      // results is now an array of stats for each file\n}); \n\n\n\n  Documentation of Map\n\n\nmap(\n     coll, \n     (item, cb) =&gt; iteratee(item,cb), \n     (err, results) =&gt; maincallback(err, results)\n   )\n\n\n    import map from 'async/map'; \n    // En Node.js\n    const { map } = require('async')\n\n\n\n  Produces a new collection of values by mapping each value in coll through the iteratee function.\n  The iteratee is called with an item from coll and a callback cb for when it has finished processing.\n  Each of these callbacks cb take 2 arguments: an error, and the result of  iteratee(item).\n  If iteratee passes an error to its callback cb, the maincallback (for the map function) is immediately called with the error.\n  Note, that since this function applies the iteratee to each item in parallel, there is no guarantee that the iteratee functions will complete in order. However, the results array will be in the same order as the original coll.\n\n\nEjemplo: Concatenación de ficheros\n\nEl objetivo es escribir un programa que usando fs.readFile lea  un conjunto de ficheros pasados en vía de comandos y produzca como salida la concatenación de los mismos en el orden especificado, sin usar lecturas síncronas. \nLa escritura debe ocurrir después que hayan terminado todas las lecturas.\n\nHe aquí una solución:\n\n[~/.../ssh2-hello(master)]$ cat simp-reto-async-reading-multiple-files.js\n\n\n'use strict';\n\nconst fs = require('fs'),\n    { map } = require('async'),\n    inputs = ['in1', 'in2'],\n    output = 'out';\n\nmap(inputs, fs.readFile,\n   (err, contents) =&gt; {\n      if (err) console.log('Error: ' + error);\n      else {\n        const data = contents.reduce((a, b) =&gt; a + b);\n        fs.writeFile(output, data, () =&gt; console.log(`Output in file '${output}'`)\n        );\n      }\n   }\n);\n\n\nEjecución:\n\n[~/.../ssh2-hello(master)]$ node simp-reto-async-reading-multiple-files.js\nOutput in file 'out'\n[~/.../ssh2-hello(master)]$ cat in1\nin1\nhi!\n[~/.../ssh2-hello(master)]$ cat in2\nin2\n[~/.../ssh2-hello(master)]$ cat out\nin1\nhi!\nin2\n\n\n¿Como lograría resolver este problema si no dispusiera de async.js?\n\nFilter\n\nasync.filter(\n    ['file1','file2','file3'],\n    (filePath, callback) =&gt; {\n      fs.access(filePath,  err =&gt; callback(null,  !err));  // Tests a user's permissions for file\n    },  \n    function(err, results)  {\n      // results now equals an array of the existing files\n   }\n); \n\n\n\n  Documentation of filter\n\n\nimport filter from 'async/filter';\n\nfilter(coll, iteratee, callbackopt)\n\n\n\n  Returns a new array of all the values in coll which pass an async truth test.\n  This operation is performed in parallel, but the results array will be in the same order as the original.\n  iteratee is a truth test to apply to each item in coll.\n    \n      The iteratee is invoked with (item, callback)\n      It is passed a callback(err, truthValue), which must be called with a boolean argument once it has completed\n    \n  \n\n\nParallel\n\nasync.parallel(\n   [\n     (callback) =&gt; {\n        setTimeout(() =&gt; { callback(null, 'one'); }, 200);\n     },\n     (callback) =&gt; {\n        setTimeout(() =&gt; { callback(null, 'two'); }, 100);\n     }\n  ],\n  // optional callback\n  (err, results) =&gt; {\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n\n  Documentation of Parallel\n\n\n    import parallel from 'async/parallel';\n\n    parallel(tasks, callbackopt)\n\n\n\n  Run the tasks collection of functions in parallel, without waiting until the previous function has completed.\n  If any of the functions pass an error to its callback, the main callback is immediately called with the value of the error.\n  Once the tasks have completed, the results are passed to the final callback as an array.\n\n\nHint: Use reflect to continue the execution of other tasks when a task fails.\n\nIt is also possible to use an object instead of an array\n\nEach property will be run as a function and the results will be passed to the final callback as an object instead of an array.\n\nThis can be a more readable way of handling results from async.parallel\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback) {\n        setTimeout(function() {\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback) {\n        setTimeout(function() {\n            callback(null, 2);\n        }, 100);\n    }\n}, function(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n\n\nExample:\n\n[~/.../Asyncjs]$ cat parallelTimers.js\n\n\nconst async = require ('async');\nconst start = new Date;\nasync.parallel([\n  function(callback) { setTimeout(callback, 100); },\n  function(callback) { setTimeout(callback, 300); },\n  function(callback) { setTimeout(callback, 200); }\n], function(err, results) {\n  console.log('Completed in ' + (new Date - start) + 'ms');\n});\n\n\nExecution:\n\n[~/.../async-js-book/Asyncjs]$ node parallelTimers.js\nCompleted in 305ms\n\n\nSeries\n\nasync.series([\n    function(callback) {\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback) {\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results) {\n    // results is now equal to ['one', 'two']\n});\n\n\n\n  Documentation of series\n\n\nseries(tasks, callbackopt)\n\nimport series from 'async/series';\n\n\n\n  Run the functions in the tasks collection in series, each one running once the previous function has completed.\n  If any functions in the series pass an error to its callback, no more functions are run, and callback is immediately called with the value of the error.\n  Otherwise, callback receives an array of results when tasks have completed.\n\n\nIt is also possible to use an object instead of an array\n\nasync.series({\n    one: function(callback) {\n        setTimeout(function() {\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function() {\n            callback(null, 2);\n        }, 100);\n    }\n}, function(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n\n\nEach property will be run as a function, and the results will be passed to the final callback as an object instead of an array.\n\nThis can be a more readable way of handling results from async.series.\n\nNote that while many implementations preserve the order of object properties, the ECMAScript Language Specification explicitly states that\n\n\n  The mechanics and order of enumerating the properties is not specified.\n\n\nSo if you rely on the order in which your series of functions are executed, and want this to work on all platforms, consider using an array.\n\nExample\n\n[~/.../async-js-book/Asyncjs]$ cat seriesTimers.js\n\n\nconst async = require ('async');\n\nconst start = new Date;\n\nasync.series([\n  function(callback) { setTimeout(callback, 100); },\n  function(callback) { setTimeout(callback, 300); },\n  function(callback) { setTimeout(callback, 200); }\n], function(err, results) {\n  // show time elapsed since start\n  console.log('Completed in ' + (new Date - start) + 'ms');\n});\n\n\n[~/.../async-js-book/Asyncjs]$ node seriesTimers.js\nCompleted in 618ms\n\n\nQueue\n\nSee Async.js: queue\n\nCreates a queue object with the specified concurrency. Tasks added to the queue are processed in parallel (up to the concurrency limit). If all worker’s are in progress, the task is queued until one becomes available. Once a worker completes a task, that task’s callback is called.\n\n[~/.../async-js-book/Asyncjs]$ cat queue-example.js\n\n\nconst async = require(\"async\");\nconst ir = (min, max) =&gt;  Math.round((Math.random() * (max - min) + min))\nconst d = new Date();\nconst makeCb = (str) =&gt; (err =&gt; console.log('finished processing '+str+' '+(new Date() - d)));\n\nconst worker = (task, callback) =&gt; {\n    setTimeout(\n      () =&gt; {\n        console.log('hello ' + task.name);\n        callback();\n      },ir(0,1000) // Wait a random time\n    )\n};\n\n// create a queue object with concurrency 2\nconst q = async.queue(worker, 2);\n\n/*\n q.drain: a function that sets a callback that is called when the last item\n          from the queue has returned from the worker.\n  If the callback is omitted, q.drain() returns a promise for the next occurrence.\n*/\nq.drain(function() {\n    console.log('worker finished and queue is empty');\n});\n\n// assign an error callback\nq.error(function(err, task) {\n    console.error('task experienced an error '+err);\n});\n\n\n[~/.../async-js-book/Asyncjs]$ node queue-example.js\nhello ear\nfinished processing ear 709\nhello bar\nfinished processing bar 961\nhello foo\nfinished processing foo 976\nhello baz\nfinished processing item 1186\nhello bay\nfinished processing item 1316\nhello bax\nfinished processing item 1323\nworker finished and queue is empty\n\n",
    "url": "/assets/temas/introduccion-a-javascript/async-js.html"
  },
  
  {
    "title": "The Async Module",
    "excerpt": "\n",
    "content": "Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript. Although originally designed for use with Node.js and installable via\n\nnpm install async\n\n\nit can also be used directly in the browser.\n\nMap\n\nasync.map(['file1','file2','file3'], (file, cb) =&gt; fs.stat(file, cb),  function(err, results)  {\n      // results is now an array of stats for each file\n}); \n\n\n\n  Documentation of Map\n\n\nmap(\n     coll, \n     (item, cb) =&gt; iteratee(item,cb), \n     (err, results) =&gt; maincallback(err, results)\n   )\n\n\n    import map from 'async/map'; \n    // En Node.js\n    const { map } = require('async')\n\n\n\n  Produces a new collection of values by mapping each value in coll through the iteratee function.\n  The iteratee is called with an item from coll and a callback cb for when it has finished processing.\n  Each of these callbacks cb take 2 arguments: an error, and the result of  iteratee(item).\n  If iteratee passes an error to its callback cb, the maincallback (for the map function) is immediately called with the error.\n  Note, that since this function applies the iteratee to each item in parallel, there is no guarantee that the iteratee functions will complete in order. However, the results array will be in the same order as the original coll.\n\n\nEjemplo: Concatenación de ficheros\n\nEl objetivo es escribir un programa que usando fs.readFile lea  un conjunto de ficheros pasados en vía de comandos y produzca como salida la concatenación de los mismos en el orden especificado, sin usar lecturas síncronas. \nLa escritura debe ocurrir después que hayan terminado todas las lecturas.\n\nHe aquí una solución:\n\n[~/.../ssh2-hello(master)]$ cat simp-reto-async-reading-multiple-files.js\n\n\n'use strict';\n\nconst fs = require('fs'),\n    { map } = require('async'),\n    inputs = ['in1', 'in2'],\n    output = 'out';\n\nmap(inputs, fs.readFile,\n   (err, contents) =&gt; {\n      if (err) console.log('Error: ' + error);\n      else {\n        const data = contents.reduce((a, b) =&gt; a + b);\n        fs.writeFile(output, data, () =&gt; console.log(`Output in file '${output}'`)\n        );\n      }\n   }\n);\n\n\nEjecución:\n\n[~/.../ssh2-hello(master)]$ node simp-reto-async-reading-multiple-files.js\nOutput in file 'out'\n[~/.../ssh2-hello(master)]$ cat in1\nin1\nhi!\n[~/.../ssh2-hello(master)]$ cat in2\nin2\n[~/.../ssh2-hello(master)]$ cat out\nin1\nhi!\nin2\n\n\n¿Como lograría resolver este problema si no dispusiera de async.js?\n\nFilter\n\nasync.filter(\n    ['file1','file2','file3'],\n    (filePath, callback) =&gt; {\n      fs.access(filePath,  err =&gt; callback(null,  !err));  // Tests a user's permissions for file\n    },  \n    function(err, results)  {\n      // results now equals an array of the existing files\n   }\n); \n\n\n\n  Documentation of filter\n\n\nimport filter from 'async/filter';\n\nfilter(coll, iteratee, callbackopt)\n\n\n\n  Returns a new array of all the values in coll which pass an async truth test.\n  This operation is performed in parallel, but the results array will be in the same order as the original.\n  iteratee is a truth test to apply to each item in coll.\n    \n      The iteratee is invoked with (item, callback)\n      It is passed a callback(err, truthValue), which must be called with a boolean argument once it has completed\n    \n  \n\n\nParallel\n\nasync.parallel(\n   [\n     (callback) =&gt; {\n        setTimeout(() =&gt; { callback(null, 'one'); }, 200);\n     },\n     (callback) =&gt; {\n        setTimeout(() =&gt; { callback(null, 'two'); }, 100);\n     }\n  ],\n  // optional callback\n  (err, results) =&gt; {\n    // the results array will equal ['one','two'] even though\n    // the second function had a shorter timeout.\n});\n\n\n\n  Documentation of Parallel\n\n\n    import parallel from 'async/parallel';\n\n    parallel(tasks, callbackopt)\n\n\n\n  Run the tasks collection of functions in parallel, without waiting until the previous function has completed.\n  If any of the functions pass an error to its callback, the main callback is immediately called with the value of the error.\n  Once the tasks have completed, the results are passed to the final callback as an array.\n\n\nHint: Use reflect to continue the execution of other tasks when a task fails.\n\nIt is also possible to use an object instead of an array\n\nEach property will be run as a function and the results will be passed to the final callback as an object instead of an array.\n\nThis can be a more readable way of handling results from async.parallel\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback) {\n        setTimeout(function() {\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback) {\n        setTimeout(function() {\n            callback(null, 2);\n        }, 100);\n    }\n}, function(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n\n\nExample:\n\n[~/.../Asyncjs]$ cat parallelTimers.js\n\n\nconst async = require ('async');\nconst start = new Date;\nasync.parallel([\n  function(callback) { setTimeout(callback, 100); },\n  function(callback) { setTimeout(callback, 300); },\n  function(callback) { setTimeout(callback, 200); }\n], function(err, results) {\n  console.log('Completed in ' + (new Date - start) + 'ms');\n});\n\n\nExecution:\n\n[~/.../async-js-book/Asyncjs]$ node parallelTimers.js\nCompleted in 305ms\n\n\nSeries\n\nasync.series([\n    function(callback) {\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback) {\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results) {\n    // results is now equal to ['one', 'two']\n});\n\n\n\n  Documentation of series\n\n\nseries(tasks, callbackopt)\n\nimport series from 'async/series';\n\n\n\n  Run the functions in the tasks collection in series, each one running once the previous function has completed.\n  If any functions in the series pass an error to its callback, no more functions are run, and callback is immediately called with the value of the error.\n  Otherwise, callback receives an array of results when tasks have completed.\n\n\nIt is also possible to use an object instead of an array\n\nasync.series({\n    one: function(callback) {\n        setTimeout(function() {\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function() {\n            callback(null, 2);\n        }, 100);\n    }\n}, function(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n\n\nEach property will be run as a function, and the results will be passed to the final callback as an object instead of an array.\n\nThis can be a more readable way of handling results from async.series.\n\nNote that while many implementations preserve the order of object properties, the ECMAScript Language Specification explicitly states that\n\n\n  The mechanics and order of enumerating the properties is not specified.\n\n\nSo if you rely on the order in which your series of functions are executed, and want this to work on all platforms, consider using an array.\n\nExample\n\n[~/.../async-js-book/Asyncjs]$ cat seriesTimers.js\n\n\nconst async = require ('async');\n\nconst start = new Date;\n\nasync.series([\n  function(callback) { setTimeout(callback, 100); },\n  function(callback) { setTimeout(callback, 300); },\n  function(callback) { setTimeout(callback, 200); }\n], function(err, results) {\n  // show time elapsed since start\n  console.log('Completed in ' + (new Date - start) + 'ms');\n});\n\n\n[~/.../async-js-book/Asyncjs]$ node seriesTimers.js\nCompleted in 618ms\n\n\nqueue\n\nSee Async.js: queue\n\nCreates a queue object with the specified concurrency. Tasks added to the queue are processed in parallel (up to the concurrency limit). If all workers are in progress, the task is queued until one becomes available. Once a worker completes a task, that task’s callback is called.\n\n[~/.../async-js-book/Asyncjs]$ cat queue-example.js\n\n\nconst async = require(\"async\");\nconst ir = (min, max) =&gt;  Math.round((Math.random() * (max - min) + min))\nconst d = new Date();\nconst makeCb = (str) =&gt; (err =&gt; console.log('finished processing '+str+' '+(new Date() - d)));\n\nconst worker = (task, callback) =&gt; {\n    setTimeout(\n      () =&gt; {\n        console.log('hello ' + task.name);\n        callback();\n      },ir(0,1000) // Wait a random time\n    )\n};\n\n// create a queue object with concurrency 2\nconst q = async.queue(worker, 2);\n\n/*\n q.drain: a function that sets a callback that is called when the last item\n          from the queue has returned from the worker.\n  If the callback is omitted, q.drain() returns a promise for the next occurrence.\n*/\nq.drain(function() {\n    console.log('worker finished and queue is empty');\n});\n\n// assign an error callback\nq.error(function(err, task) {\n    console.error('task experienced an error '+err);\n});\n\n\n[~/.../async-js-book/Asyncjs]$ node queue-example.js\nhello ear\nfinished processing ear 709\nhello bar\nfinished processing bar 961\nhello foo\nfinished processing foo 976\nhello baz\nfinished processing item 1186\nhello bay\nfinished processing item 1316\nhello bax\nfinished processing item 1323\nworker finished and queue is empty\n\n",
    "url": "/assets/temas/introduccion-a-javascript/event-loop/async-js.html"
  },
  
  {
    "title": "Authentication",
    "excerpt": "\n",
    "content": "Sessions y Authentication\n\nVéase la sección Cookies y Autenticación\nen los apuntes del profesor\n\nJSON Web Tokens\n\n\n  jwt.io\n  JWT Handbook (pdf) Sebastian E. Peyrrot\n  Implementar JSON Web Tokens con NodeJS Oscar Blancarte Blog\n    \n      Construir un API REST con NodeJS (Tercera parte)\n      Segunda parte\n      Primera Parte\n    \n  \n\n\nOAuth\n\n\n  Introducción a OAuth (Apuntes del profesor)\n  \n    \n      \n        \n          [What is OAuth2? How does OAuth2 work?\n          Tech Primers](https://youtu.be/CPbvxxslDTU) Yotube video\n        \n      \n    \n  \n\n\nPassport\n\nPassport: Introducción\n\n\n  Passport is authentication middleware for Node.js.\n  Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based web application.\n  A comprehensive set of strategies support authentication using\n    \n      a username and password,\n      Facebook,\n      Twitter,\n      Strategy Passport-GitHub2. The author of Passport-Github has not maintained the original …\n        \n          Passport-GitHub2 Example\n        \n      \n      GitHub strategy documentation and repo GitHub,\n      and more.\n    \n  \n\n\nPassport: Tutoriales\n\n\n  Example of how to use Express 4.x and Passport to authenticate users using GitHub\n\n\n[~/.../useoctonode/express-4.x-github-example(master)]$ pwd -P\n/Users/casiano/local/src/javascript/learning/useoctonode/express-4.x-github-example\n\n\n  GitHub repo demonstrating how to use Express 4.x and Passport to authenticate users using Facebook\n  Example of how to use Express 4.x and Passport for authentication with username and password\n  Easy Node Authentication: Setup and Local\n  Authenticating Node.js Applications With Passport\n    \n      Repositorio con el código del tutorial\n    \n  \n  Node.js Login System With Passport YouTube video\n    \n      Part 1\n        \n          What Is Input Validation and Sanitization?\n          Flash Messages: A flash message is used in order to keep a message in session through one or several requests of the same user. By default, it is removed from session after it has been displayed to the user. Flash messages are usually used in combination with HTTP redirections, because in this case there is no view, so messages can only be displayed in the request that follows redirection.\n        \n      \n      Part 2\n      Part 3\n        \n          Passport-local (GitHub module repo)\n          Passport Docs: Username &amp; Password\n          Passport Docs: Flash Messages\n          Bcryptjs at GitHub\n          Passport: sessions (serialize/deserialize)\n        \n      \n      GitHub repo\n      Fork at ULL-ESIT-CA-1718\n    \n  \n\n\nPassport: Notas sobre como Configurar una WebApp en Facebook\n\n\n  Facebook App Development Guide\n    \n      Facebook: Register and Configure an App\n    \n  \n  StackOverflow: How to Test Facebook Connect Locally\n    \n      \n        Facebook → Settings → Basic:\n\n        write “localhost” in the “App Domains” field then click on “+Add Platform” choose “Web Site”.\n\n        After that, in the “Site Url” field write your localhost url \n(e.g.: http://localhost:3000/login/facebook/return).\nThis will allow you to test your facebook plugins locally.\n      \n    \n  \n  StackOverflow: Facebook Site URL?\n\n\n\n",
    "url": "/assets/temas/introduccion-a-javascript/authentication.html"
  },
  
  {
    "title": "Working with different environments: url and baseurl and more",
    "excerpt": "\n",
    "content": "Now you have to test your site locally and to deploy it in production. Sometimes, the baseurl is different and the jekyll build may not work out of the box in one of those environment.\n\nWe need to understand site.url and site.baseurl and page.path and in which situation we need them. Those variables don’t serve the same purpose.\n\n\n\nsite.url\n\nsite.url is typically used in conjunction with site.baseurl when you want a link to something with the full URL to it.\n\nFor example, in the page head for the canonical header and the RSS link. It’s also used in the xml feed to point to site resources as the software that will manage this feed doesn’t know resource’s urls.\n\nsite.baseurl\n\nsite.baseurl indicates the root folder of your Jekyll site. By default it is set to \"\" (empty string). That means that your Jekyll site is at the root of http://example.com.\n\nIf your Jekyll site lives in http://example.com/blog, you have to set site.baseurl to /blog (note the slash!). This will allow assets (css, js) to load correctly.\n\nSee how assets must be loaded in your head section:\n\n{%raw%}&lt;link rel=\"stylesheet\" href=\"{{ site.baseurl }}/css/main.css\"&gt;{%endraw%}\n\n\nor, more verbose:\n\n{%raw%}&lt;link rel=\"stylesheet\" href=\"{{ \"/css/main.css\" | prepend: site.baseurl }}\"&gt;{%endraw%}\n\n\nUse jekyll serve\n\nLet’s imagine that your site lives in a github repository introduction inside an organization ULL-ESIT-PL-1819:\n\n$ git remote -v\norigin\tgit@github.com:ULL-ESIT-PL-1819/introduccion.git\n\n\nand is served at GitHub at the url: https://ull-esit-pl-1819.github.io/introduccion/.\n\nYou can setup the baseurl to /introduccion and test your site locally with jekyll serve, your site will be served at http://127.0.0.1:4000/introduccion/\n\nUse multiple configuration files\n\nIf, for one reason or another, you cannot use jekyll serve, you can set a configuration file for both environment and jekyll build depending on where you are deploying.\n\nLet’s say we have the local site served at http://localhost and the production site served at https://username.github.io/myProject.\n\nWe leave the _config.yml with\n\nurl: https://username.github.io\nbaseurl: /myProject\n\n\nWe create a new _config_dev.yml with only\n\nurl: https://localhost \nbaseurl: \"\"\n\n\nNow to test locally :\n\njekyll build --config _config.yml,_config_dev.yml\n\n\nor\n\njekyll build --config _config.yml,_config_dev.yml --watch\n\n\nWhen pushed on production, the jekyll build command will use the default _config.yml.\n",
    "url": "/assets/temas/introduccion-a-javascript/baseurl.html"
  },
  
  {
    "title": "Clases (Grupos 1 y PA101)",
    "excerpt": "\n",
    "content": "\n  {%- assign previousMonth = \"0\" %}\n  {%- for post in site.categories[\"clases\"]  %}\n      {%- assign currentMonth = post.date | date: \"%B\" %}\n      {%- if currentMonth != previousMonth %}\n\nClasses during the month of {{ currentMonth }}\n\n\n      {%- endif %}\n {{ post.title }}\n  \n    {%- if post.summary %}{{ post.summary | markdownify }}{%- endif -%}\n    {%- if post.video %} \n      {% if post.video.first%}\n        {% for video in post.video %}\n            Vídeo {{ forloop.index }} \n            {% unless forloop.last%},{% endunless %}\n        {% endfor %}\n        \n      {% else %}\n           Vídeo \n      {% endif %}\n    \n    {%- endif %}\n  \n      {%- assign previousMonth = currentMonth %}\n  {%- endfor %}\n\n\n",
    "url": "/clases"
  },
  
  {
    "title": "Cross-Origin Resource Sharing CORS",
    "excerpt": "\n",
    "content": "CORS is a security mechanism that allows a web page from one domain or Origin \nto access a resource with a different domain (a cross-domain request).\n\nCORS is a relaxation of the same-origin policy implemented in modern browsers. Without features like CORS, websites are restricted to accessing resources from the same origin through what is known as same-origin policy.\n\nOrigin\n\nOrigin includes the combination of protocol, domain, and port. This means\n\n\n  https://api.mydomain.com and\n  https://mydomain.com\n\n\nare actually different origins and thus impacted by same-origin policy.\n\nIn a similar way,\n\n  http://localhost:9000 and\n  http://localhost:8080\n\n\nare also different origins. The path or query parameters  are ignored when considering the origin.\n\nThe reason for The Same-Origin Policy\n\nYou, like many websites, may use cookies to keep track of authentication or session info. Those cookies are bounded to a certain domain when they are created. On every HTTP call to that domain, the browser will attach the cookies that were created for that domain. This is on every HTTP call, which could be for static images, HTML pages, or even AJAX calls.\n\nThis means when you log into https://examplebank.com, a cookie is stored for https://examplebank.com. If that bank is a single-page React app, they may have created a REST API at https://examplebank.com/api for the SPA to communicate via AJAX.\n\n\n  Let’s say you browse to a malicious website  https://evilunicorns.com while logged into https://examplebank.com.\n  Without same-origin policy, that hacker website could make authenticated malicious AJAX calls to https://examplebank.com/api to POST /withdraw even though the hacker website doesn’t have direct access to the bank’s cookies.\n\n\nThis is due to the browser behavior of automatically attaching any cookies bounded to https://examplebank.com for any HTTP calls to that domain, including AJAX calls from https://evilunicorns.com to https://examplebank.com.\n\nBy restricting HTTP calls to only ones to the same origin (i.e. the browser tab’s domain), same-origin policy closes some hacker backdoors such as around Cross-Site Request Forgery (CSRF) (Although not all. Mechanisms like CSRF tokens are still necessary).\n\nThe Reasons for Cross-Origin Resource Sharing\n\nThere are legitimate reasons for a website to make cross-origin HTTP requests:\n\n\n  Maybe a single-page app at https://mydomain.com needs to make AJAX calls to https://api.mydomain.com;\n  or maybe https://mydomain.com incorporates some 3rd party fonts or analytics providers like Google Analytics or MixPanel.\n  Cross-Origin Resource Sharing (CORS) enables these cross-domain requests.\n\n\nHow CORS works\n\nThis is how a simple CORS request works:\n\n\n  \n    A browser tab open to https://www.mydomain.com initiates AJAX request GET https://api.mydomain.com/widgets\n  \n  \n    Along with adding headers like Host, the browser automatically adds the Origin Request Header for cross-origin requests:\n  \n\n\n  GET /widgets/ HTTP/1.1\n  Host: api.mydomain.com\n  Origin: https://www.mydomain.com\n  [Rest of request...]\n\n\n\n  The server checks the Origin request header. If the Origin value is allowed, it sets the Access-Control-Allow-Origin to the value in the request header Origin.\n\n\n     HTTP/1.1 200 OK  \n     Access-Control-Allow-Origin: https://www.mydomain.com  \n     Content-Type: application/json\n     [Rest of response...]  \n\n\n  When the browser receives the response, the browser checks the Access-Control-Allow-Origin header to see if it matches the origin of the tab. If not, the response is blocked. The check passes such as in this example if either the Access-Control-Allow-Origin matches the single origin exactly or contains the wildcard * operator.\n    \n      A server that responds Access-Control-Allow-Origin: * allows all origins which can be a large security risk.\n      Only use * if your application absolutely requires it such as creating an open/public API.\n    \n  \n\n\nThe CORS npm module\n\nIf you want to avoid the blocking, the server that hosts the resource needs to have CORS enabled. \nWhat you can do on the client side (and probably what you are thinking of) is set the mode of fetch to CORS\n(although this is the default setting I believe):\n\nfetch(request, {mode: 'cors'});\n\n\nThe mode option specifies the mode you want to use for the request, e.g., cors, no-cors, or same-origin.\n\n  With same-origin you can perform requests only to your origin, otherwise the request will result in an error.\n  With no-cors, you can perform requests to other origins, even if they don’t set the required CORS headers, but you’ll get an opaque response. An opaque response is for a request made for a resource on a different origin that doesn’t return CORS headers. With an opaque response we won’t be able to read the data returned or view the status of the request, meaning we can’t check if the request was successful or not.\n\n\nHowever this still requires the server to enable CORS as well, and allow your domain to request the resource.\n\nIn Express we can use the module cors\n\n$ npm install cors\n\n\nIf inside the app we use this middleware:\n\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.use(cors())\n\napp.get('/products/:id', function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for all origins!'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n\n\nTo enable CORS for a Single Route we do:\n\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\napp.get('/products/:id', cors(), function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for a Single Route'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n\n\nWe can configure CORS:\n\nvar express = require('express')\nvar cors = require('cors')\nvar app = express()\n\nvar corsOptions = {\n  origin: 'http://example.com',\n  optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n}\n\napp.get('/products/:id', cors(corsOptions), function (req, res, next) {\n  res.json({msg: 'This is CORS-enabled for only example.com.'})\n})\n\napp.listen(80, function () {\n  console.log('CORS-enabled web server listening on port 80')\n})\n\n\nThe origin  option used in this example configures the Access-Control-Allow-Origin CORS header. \nPossible values:\n\n\n  Boolean - set origin to true to reflect the request origin, as defined by req.header('Origin'), or set it to false to disable CORS.\n  String - set origin to a specific origin. For example if you set it to \"http://example.com\" only requests from “http://example.com” will be allowed.\n  RegExp - set origin to a regular expression pattern which will be used to test the request origin. If it’s a match, the request origin will be reflected. For example the pattern /example\\.com$/ will reflect any request that is coming from an origin ending with “example.com”.\n  Array - set origin to an array of valid origins. Each origin can be a String or a RegExp. For example [\"http://example1.com\", /\\.example2\\.com$/] will accept any request from “http://example1.com” or from a subdomain of “example2.com”.\n  Function - set origin to a function implementing some custom logic. The function takes the request origin as the first parameter and a callback (which expects the signature err [object], allow [bool]) as the second.\n\n\nEjemplo: server en ULL-MII-SYTWS-1920/food-lookup-demo\n\nPara entender mejor esta sección \nVéase la rama/branch: 10-crguezl-master-cors-01 del repositorio \nULL-MII-SYTWS-1920/food-lookup-demo\n\nSi en Client-js cambiamos el fetch para solicitar al server en 3001 que es donde escucha nuestro servidor:\n\nfunction search(query, cb) {\n  return fetch(`http://localhost:3001/api/food?q=${query}`, {\n    accept: \"application/json\"\n  })\n    .then(checkStatus)\n    .then(parseJSON)\n    .then(cb);\n}\n\n\nObtenemos una respuesta similar a esta:\n\n\n  Access to fetch at http://localhost:3001/api/food?q=r from origin http://localhost:3000 has been blocked by CORS policy:\n\n\n\n  No Access-Control-Allow-Origin header is present on the requested resource.\n\n\n\n  If an opaque response serves your needs, set the request’s mode to no-cors to fetch the resource with CORS disabled.\n\n\n\n  localhost/:1 Uncaught (in promise) TypeError: Failed to fetch\n\n\nUsando el middleware corsarreglamos el problema:\n\nconst express = require(\"express\");\nconst fs = require(\"fs\");\nconst sqlite = require(\"sql.js\");\nconst cors = require(\"cors\");\nconst filebuffer = fs.readFileSync(\"db/usda-nnd.sqlite3\");\n\nconst db = new sqlite.Database(filebuffer);\n\nconst app = express();\n\napp.set(\"port\", process.env.PORT || 3001);\n\n// Express only serves static assets in production\nif (process.env.NODE_ENV === \"production\") {\n  app.use(express.static(\"client/build\"));\n}\n\nconst COLUMNS = [\n  \"carbohydrate_g\",\n  \"protein_g\",\n  \"fa_sat_g\",\n  \"fa_mono_g\",\n  \"fa_poly_g\",\n  \"kcal\",\n  \"description\"\n];\n\nconst corsOptions = {\n  origin: 'http://localhost:3000',\n  optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n}\n\napp.get(\"/api/food\", cors(corsOptions), (req, res) =&gt; {\n  const param = req.query.q;\n\n  if (!param) {\n    res.json({\n      error: \"Missing required parameter `q`\"\n    });\n    return;\n  }\n\n  // WARNING: Not for production use! The following statement\n  // is not protected against SQL injections.\n  const r = db.exec(\n    `\n    select ${COLUMNS.join(\", \")} from entries\n    where description like '%${param}%'\n    limit 100\n  `\n  );\n\n  if (r[0]) {\n    res.json(\n      r[0].values.map(entry =&gt; {\n        const e = {};\n        COLUMNS.forEach((c, idx) =&gt; {\n          // combine fat columns\n          if (c.match(/^fa_/)) {\n            e.fat_g = e.fat_g || 0.0;\n            e.fat_g = (parseFloat(e.fat_g, 10) +\n              parseFloat(entry[idx], 10)).toFixed(2);\n          } else {\n            e[c] = entry[idx];\n          }\n        });\n        return e;\n      })\n    );\n  } else {\n    res.json([]);\n  }\n});\n\napp.listen(app.get(\"port\"), () =&gt; {\n  console.log(`Find the server at: http://localhost:${app.get(\"port\")}/`); // eslint-disable-line no-console\n});\n\n\nCómo hacer un Ataque CSRF\n\n{% include video provider=”youtube” id=”CXSE89JGnek” %}\n\nCORS references\n\n\n  Authoritative guide to CORS (Cross-Origin Resource Sharing) for REST APIs\n  Using CORS in Express by Alexis Hevia\n    \n      Repo with examples of use\n    \n  \n  fetch\n    \n      Referrer Policies\n      W3C\n    \n  \n  cors is a node.js package for providing a Connect/Express middleware that can be used to enable CORS with various options.\n  Multiple Ways of API Integration in your JAMStack\n    \n      Associated GitHub repo https://github.com/cfjedimaster/jamstack_api_approaches\n    \n  \n\n",
    "url": "/assets/temas/introduccion-a-javascript/cors.html"
  },
  
  {
    "title": "Adaptación de Procesadores de Lenguajes a la Docencia y Evaluación No Presencial",
    "excerpt": "\n",
    "content": "Tutorías no presenciales\n\nMedios para realizar las tutorías:\n\n\n  GitHub Issues (Student Project Board)\n  Chat virtual (chat.google.com aula ULL-ESIT-PL)\n  Videoconferencias (Google Meet).\n  Campus Virtual\n\n\nEn el caso de las tutorías, estamos utilizando las herramientas de chat y meet de Google para dudas y preguntas relacionadas con los contenidos teóricos, la asignatura y las prácticas. También utilizamos los issues de GitHub para resolver cuestiones sobre las prácticas. Bajo demanda se realizan tutorías mediante videoconferencia.\n\nMetodología no presencial\n\nVideos\n\nCompartidos via Google Drive y Youtube.\n\nSesiones virtuales/clases\n\nSe respeta el horario de clase y de tutorías anterior a la crisis. Realizamos las clases de teoría mediante videoconferencias (Google Meet). Las de teoría están siendo grabadas y publicadas en el campus virtual.\n\nInclusión de documentación sobre cada tema\n\nTanto en el Campus como en la organización GitHub ULL-ESIT-PL-2021 se puede acceder a la información de la asignatura. Los apuntes se encuentran en https://ull-esit-gradoii-pl.github.io/\n\nRealización de pruebas evaluativas en línea\n\nSemanalmente, se facilita un guión de una práctica semanal, que los alumnos deberán resolver y entregar. Pueden preguntar dudas por todos los canales del Campus, Google o GitHub.\n\nTutorías\n\nPara las dudas, utilizamos las herramientas del Campus, las de Google y las de GitHub y Google Meet para las tutorías en directo.\n\nEvaluación y Calificación\n\nEvaluación Contínua\n\n\n  Entregas de prácticas y retos\n  Tienen siempre mayor valor la realización/defensa de las entregas online que la entrega de los repos\n  La entrega del Trabajo Fin de Asignatura es obligatorio (TFA).\n    \n      Se deberá hacer una presentación del TFA\n    \n  \n\n\nAlumnos que no superan pero se acogen a Evaluación Contínua\n\nLos alumnos que han asistido a clase, tutorías y han participado en un número suficiente de actividades pero no han superado la asignatura podrán entregar las prácticas con la antelación suficiente antes de cada cierre de actas.\n\nDeberán hacer una defensa de las prácticas presentadas en tiempo acordado con el profesor.\nEl profesor les indicará si está aprobado o si debe mejorar  para entregarlas antes de la siguiente convocatoria.\n\nExámenes de Convocatoria\n\nLos alumnos que no puedan (por no haber seguido el curso) o que decidan no acogerse a evaluación contínua deberán presentarse a un examen práctico de evaluación en las \nconvocatorias establecidas por la ULL.\n\nLa práctica de evaluación consistirá en la entrega en GitHub Classroom de un ejercicio intensivo que se deben entregar en un tiempo limitado y su posterior  defensa que permitirá\nevaluar los conocimientos del alumno de las competencias de la asignatura.\n\n\n\nReferencias\n\n\n  RECURSOS DISPONIBLES PARA REALIZAR ACTIVIDAD DOCENTE NO PRESENCIAL (Curso Moodle ULL)\n\n  ULL Corona Virus\n  ELABORACIÓN DE LAS ADENDAS A LAS GUÍAS DOCENTES. PREGUNTAS FRECUENTES \n\n  Videotutorial Evaluación ULL\n&lt;!–\n  Calendario Académico\n  Horarios de Ingeniería Informática para el curso 19/20\n  Horarios de tutorías del Departamento de Ingeniería Informática\n–&gt;\n\n",
    "url": "/assets/temas/introduccion-a-pl/covid19.html"
  },
  
  {
    "title": "Creating and Publishing a Node.js Module in GitHub and NPM Registries",
    "excerpt": "\n",
    "content": "Creating a node module and publishing it to npm is a fairly\nstraightforward process. Haven’t done it yet? Not sure what I’m talking\nabout? Here’s a quick tutorial to speed you along.\n\nWhat is npm?\n\nNPM has three components. These components consist of\n\n\n  the npm website,\n  the Command Line Interface (CLI), and\n  an online database of public and private packages called the npm registry\n\n\nnpm is an online registry for open-source node.js projects, modules,\nresources, etc. You can find it at https://www.npmjs.com/.\n\nnpm is also the official package manager for node.js, and provides a\ncommand line interface (CLI) for interacting with the registry. This\nutility comes bundled with node.js and is installed automatically. For\nAPI documentation, visit https://docs.npmjs.com/ or just type npm in\nyour terminal.\n\nFor you ruby devs, npm is akin to rubygems.\n\nDon’t have node.js installed?\n\nYou’ll of course need to install node.js and npm in order to follow\nalong. Try one of the following install options or just read along.\n\n\n  Homebrew users can simply run brew install node\n  Download a binary from http://nodejs.org/\n  Use Node Version Manager (NVM)\n– recommended\n\n\nConfigure npm\n\nLet’s get started by configuring npm a little bit. Go ahead and enter\nthese commands in a terminal, using your own information. This way, when\nwe run some npm commands later, it will already know who we are and will\nbe able to autocomplete some information for us.\n\nnpm set init.author.name \"Casiano Rodriguez-Leon\"\nnpm set init.author.email \"whatever@gmail.com\"\nnpm set init.author.url \"https://github.com/crguezl\"\n\n\nThis next command will prompt you for an email and password, create or verify a user in the npm registry, and save the credentials to the\n~/.npmrc file.\n\nnpm adduser\n\n\nanother way to register in npm is using the npm web interface\n\nHere is an example of .npmrc file\n\n➜  create-a-npm-module git:(master) ✗ cat .npmrc-example\n\n//registry.npmjs.org/:_authToken=00000000000\ninit.author.name=Casiano Rodriguez-Leon\ninit.author.email=whatever@gmail.com\ninit.author.url=https://github.com/crguezl\naccess=public\n@ull-esit-dsi-1617:registry=https://registry.npmjs.org/\n//10.6.128.127:8081/:_password=\"blahblahencrypted\"\n//10.6.128.127:8081/:username=crguezl\n//10.6.128.127:8081/:email=whatever@gmail.com\n//10.6.128.127:8081/:always-auth=false\n@ULL-ESIT-PL-1920:registry=https://npm.pkg.github.com\n@ull-esit-pl-1920:registry=https://npm.pkg.github.com\n//npm.pkg.github.com/:_authToken=0000000111111etc.\n@PAL-ULL:registry=https://npm.pkg.github.com\n@pal-ull:registry=https://npm.pkg.github.com/\n\n\nWhat are scopes?\n\nScopes are like namespaces for npm packages. Each npm user has their own scope.\n\n@username/project-name\n\n\nThis means that you don’t have to worry about someone else taking your package name. Only you can add packages in your scope.\n\nScoped modules also make it possible to put your private code on npm when you sign up for private modules. \nWith private modules, you have control over who can see and collaborate on any of the modules in your scope (but you have to paid for it. Public scoped packages are free).\n\nTo create a scoped package, all you need to do is add your scope to the front of the name property in package.json\n\n{\n  \"name\": \"@ull-esit-dsi-1617/scapegoat\",\n  \"version\": \"1.3.11\",\n  ...\n}\n\n\nand run npm with the access option:\n\nnpm publish --access=public\n\n\nWhat is Github Registry?\n\nGitHub Package Registry is a software package hosting service, similar to npmjs.org, rubygems.org, or hub.docker.com, that allows you to host your packages and code in one place. You can host software packages privately or publicly and use them as dependencies in your projects.\n\nSetting a Token\n\nYou need an access token to publish, install, and delete packages in GitHub Packages. You can use a personal access token to authenticate with your username directly to GitHub Packages or the GitHub API. You can use a GITHUB_TOKEN to authenticate using a GitHub Actions workflow.\n\nWhen you create a personal access token, you can assign the token different scopes depending on your needs. For more information, see “Creating a personal access token for the command line” and “Available scopes” in the GitHub Developer documentation.\n\nGo to your GitHub user’s settings, from there navigate to Developer Settings,\nthen to Personal access tokens\n\nhttps://github.com/settings/tokens\n\nSelect Generate new token and give the token the appropriate permits:\n\n\n\n\nScope\nDescription\nRepository permissions\n\n\n\n\nread:packages\nDownload and install packages from GitHub Packages\nread\n\n\nwrite:packages\nUpload and publish packages to GitHub Packages\nwrite\n\n\ndelete:packages\nDelete specified versions of private packages from GitHub Packages\nadmin\n\n\nrepo\nInstall, upload, and delete certain packages in private repositories (along with read:packages, write:packages, or delete:packages)\nread, write, or admin\n\n\n\n\nOnce you get the token run npm login against the GitHub Registry:\n\n$ npm login --registry=https://npm.pkg.github.com\n&gt; Username: USERNAME\n&gt; Password: TOKEN\n&gt; Email: PUBLIC-EMAIL-ADDRESS\n\n\nWrite/paste the token in the password field:\n\n$ npm login --registry=https://npm.pkg.github.com\nUsername: crguezl\nPassword:\nEmail: (this IS public) crguezl@ull.edu.es\nLogged in as crguezl on https://npm.pkg.github.com/.\n\n\nThis will append lines like these in your ~/.npmrc configuration file:\n\n@ULL-ESIT-PL-1920:registry=https://npm.pkg.github.com\n//npm.pkg.github.com/:_authToken=&lt;your-token&gt;\n\n\n\n  Veáse la sección GitHub Package Registry de estos apuntes\n\n\nCreate a node module\n\nA Node/npm module is just an ordinary JavaScript file with the addition\nthat it must follow the \nCommonJS module spec.\n\nNode modules run in their own scope\nso that they do not conflict with other modules.\n\nNode relatedly provides\naccess to some globals to help\nfacilitate module interoperability.\n\nThe primary two items that we are\nconcerned with here are require and exports.\n\nYou require other\nmodules that you wish to use in your code and your module exports\nanything that should be exposed publicly.\n\nFor example:\n\n    let other = require('other_module');\n    module.exports = function() {\n        console.log(other.doSomething());\n    }\n\n\nFor our demo, we’ll create an npm module consisting of a couple utility\nmethods for escaping and unescaping HTML entities – commonly needed\nutils to prevent cross site scripting\n(XSS) \nattacks when\nrendering user generated content.\n\nWe’ll call this project, ‘Scapegoat’,\nbecause a quick search of the\nnpm registry reveals that the name has not yet been taken.\n\nNote that if\nyou are coding along with me, and plan to publish your module to npm,\nwithout scope, you’ll need to give your module a unique name.\n\nTo get started, We create a new repository on our Github\naccount (or on a organization) and then cloned it\nlocally.\n\ngit clone git@github.com:brentertz/scapegoat.git\ncd scapegoat\n\n\npackage.json\n\nExecuting the following command will create an unscoped package.json file:\n\nnpm init -f\n\n\nHave a look to see what the file contains; it is pretty human-readable.\nFurther details and explanation of the contents of the package.json file\ncan be found at https://docs.npmjs.com/files/package.json.\n\nOur initial version\nlooks like the following, but we’ll be updating this further as we go\nalong.\n\n    {\n      \"name\": \"scapegoat\",\n      \"version\": \"0.0.0\",\n      \"description\": \"A small library providing utility methods to escape and unescape HTML entities\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \"Error: no test specified\" &amp;&amp; exit 1\"\n      },\n      \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git://github.com/brentertz/scapegoat.git\"\n      },\n      \"keywords\": [\n        \"escape\",\n        \"unescape\",\n        \"html\"\n      ],\n      \"author\": \"Brent Ertz &lt;brent.ertz@gmail.com&gt; (http://brentertz.com/)\",\n      \"license\": \"BSD-2-Clause\",\n      \"bugs\": {\n        \"url\": \"https://github.com/brentertz/scapegoat/issues\"\n      }\n    }\n\n\nFor scoped modules, run npm init --scope=@scope-name. For example npm init --scope=@aluXXX\n\n\n  Read the blog Create a project using the npm init initializer command by Elijah Manor for more information on npm init\n  esm\n\n\nindex.js: Write the code\n\nNow we can actually get on to the business of writing code. Create an\nindex.js file to hold the primary module code. It’ll look something\nlike the following.\n\nNote the use of module.exports, which we\ndiscussed previously, and is needed to make code available for use by\nother modules. Further, as our module is not reliant on any other\nmodules, we did not need to require anything.\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {String} html\n * @return {String}\n */\nmodule.exports = {\n  escape: function(html) {\n    return String(html)\n      .replace(/&amp;/g, '&amp;amp;')\n      .replace(/\"/g, '&amp;quot;')\n      .replace(/'/g, '&amp;#39;')\n      .replace(/&lt;/g, '&amp;lt;')\n      .replace(/&gt;/g, '&amp;gt;');\n  },\n\n  /**\n   * Unescape special characters in the given string of html.\n   *\n   * @param  {String} html\n   * @return {String}\n   */\n  unescape: function(html) {\n    return String(html)\n      .replace(/&amp;amp;/g, '&amp;')\n      .replace(/&amp;quot;/g, '\"')\n      .replace(/&amp;#39;/g, ''')\n      .replace(/&amp;lt;/g, '&lt;')\n      .replace(/&amp;gt;/g, '&gt;');\n  }\n};\n\n\nTesting with Mocha and Chai\n\nNext, we’ll surely want to write some tests. Perhaps it would have been\npreferable to write them first. Here we are going to use the\nMocha and\nChai frameworks. There are others you can use, like Jest.\nMocha and Chai can be installed and persisted to the package.json file\nwith the following commands. Note that they are added to the\n‘devDependencies’ section, as they are only required during development\nand not at runtime.\n\nnpm install mocha --save-dev\n\nnpm install chai --save-dev\n\n\n.gitignore\n\nThe above commands will also create a node_modules folder in your\nproject directory containing those dependencies. Following best\npractices, we’ll want to keep the node_modules folder out of the git\nrepository.\n\nWe can do that by adding a .gitignore file to our project\nroot, with the following contents:\n\nnode_modules\n\n\nTo build a .gitignore see also http://gitignore.io/.\n\nThe npm install command also created package-lock.json containing a detailed description of all the dependences. We add this file to the control version:\n\ngit add package-lock.json\n\n\npackage-lock.json\ndescribes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates.\n\nWriting the tests\n\nContinuing on, let’s create a test directory to hold our tests.\n\nAs our\nprimary module file is called index.js, within the test directory I\nwill create a file by the same name – a simple convention.\n\nMocha will\nby default run all tests in this directory. Our test should look\nsomething like the following.\n\nNote that I am using the should syntax\nprovided by the Chai framework. Also note the use of require to pull\nin our module code into the test.\n\n    var should = require('chai').should(),\n        scapegoat = require('../index'),\n        escape = scapegoat.escape,\n        unescape = scapegoat.unescape;\n\n    describe('#escape', function() {\n      it('converts &amp; into &amp;amp;', function() {\n        escape('&amp;').should.equal('&amp;amp;');\n      });\n\n      it('converts \" into &amp;quot;', function() {\n        escape('\"').should.equal('&amp;quot;');\n      });\n\n      it('converts ' into &amp;#39;', function() {\n        escape(''').should.equal('&amp;#39;');\n      });\n\n      it('converts &lt; into &amp;lt;', function() {\n        escape('&lt;').should.equal('&amp;lt;');\n      });\n\n      it('converts &gt; into &amp;gt;', function() {\n        escape('&gt;').should.equal('&amp;gt;');\n      });\n    });\n\n    describe('#unescape', function() {\n      it('converts &amp;amp; into &amp;', function() {\n        unescape('&amp;amp;').should.equal('&amp;');\n      });\n\n      it('converts &amp;quot; into \"', function() {\n        unescape('&amp;quot;').should.equal('\"');\n      });\n\n      it('converts &amp;#39; into '', function() {\n        unescape('&amp;#39;').should.equal(''');\n      });\n\n      it('converts &amp;lt; into &lt;', function() {\n        unescape('&amp;lt;').should.equal('&lt;');\n      });\n\n      it('converts &amp;gt; into &gt;', function() {\n        unescape('&amp;gt;').should.equal('&gt;');\n      });\n    });\n\n\nRunning the tests\n\nBut how do we actually run the tests?\n\n$ cat package.json \n\n\n{\n  \"name\": \"@ull-esit-dsi-1617/scapegoat\",\n  \"version\": \"1.2.5\",\n  \"description\": \"A small library providing utility methods to escape and unescape HTML entities\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"mocha --reporter spec\",\n    \"doc\": \"documentation build index.js -f html -o docs\",\n    \"serve-doc\": \"http-server docs/ -o\",\n    \"push\": \"npm run doc; git add docs; git ci -am no-message; git push\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ULL-ESIT-DSI-1617/scapegoat.git\"\n  },\n  \"keywords\": [\n    \"escape\",\n    \"unescape\",\n    \"html\"\n  ],\n  \"author\": \"Casiano Rodriguez &lt;casiano.rodriguez.leon@gmail.com&gt;\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"https://github.com/ULL-ESIT-DSI-1617/scapegoat/blob/master/LICENSE-MIT\"\n    }\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/ULL-ESIT-DSI-1617/scapegoat/issues\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"*\",\n    \"chai\": \"*\",\n    \"documentation\": \"*\"\n  },\n  \"dependencies\": {\n  }\n}\n\n\n(NOTE: git ci is an alias I have of git commit)\n\nAfter doing so, we can then execute the tests by entering following\ncommand.\n\n[~/.../create-a-npm-module/scapegoat(master)]$ npm test\n\n&gt; @ull-esit-dsi-1617/scapegoat@1.2.5 test /Users/casiano/local/src/javascript/evalua-module/create-a-npm-module/scapegoat\n&gt; mocha --reporter spec\n\n  #escape\n    ✓ converts &amp; into &amp;amp;\n    ✓ converts \" into &amp;quot;\n    ✓ converts ' into &amp;#39;\n    ✓ converts &lt; into &amp;lt;\n    ✓ converts &gt; into &amp;gt;\n    ✓ returns empty string if called with falsey value\n\n  #unescape\n    ✓ converts &amp;amp; into &amp;\n    ✓ converts &amp;quot; into \"\n    ✓ converts &amp;#39; into '\n    ✓ converts &amp;lt; into &lt;\n    ✓ converts &amp;gt; into &gt;\n    ✓ does not double unescape values\n    ✓ returns empty string if called with falsey value\n\n\n  13 passing (17ms)\n\n\nGitHub Actions: An Introduction\n\n\n  GitHub Actions: An Introduction\n\n\nExample: Setting CI for our npm Module\n\nWe fill the contents of nodejs.yml with the description of our workflow:\n\n$ cat .github/workflows/nodejs.yml\n\n[~/.../create-a-npm-module/scapegoat(master)]$ cat .github/workflows/nodejs.yml\nname: CI for scapegoat module\n\non: # when this action should be triggered?\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs: # jobs are made of steps\n  build:\n    # Define the OS our workflow should run on\n    runs-on: ubuntu-latest\n\n    strategy:\n      # To test across multiple language versions\n      matrix:\n        node-version: [12.x]\n\n    steps: # Clone the repo. See https://github.com/actions/checkout\n    - uses: actions/checkout@v2\n    # Example of using an environment variable\n    - name: Use Node.js ${{ \"{{ matrix.node-version\" }} }} # Will be: \"Use Node.js 12.x\"\n      uses: actions/setup-node@v1 # Install node. See https://github.com/actions/setup-node\n      with:\n        node-version: ${{ \"{{ matrix.node-version\" }} }}\n    # Install a project with a clean slate\n    - run: npm ci\n    - run: npm test\n      # Environment variables\n      env:\n        CI: true\n\n\nLet us continue adding our action to the control version:\n\n$ git add .github/workflows/nodejs.yml\n$ git ci -am .github/workflows/nodejs.yml\n\n\nNow when we do a push:\n\n$ git push\n\n\nThe action is triggered. Let us go and click on the actions tab in our repo:\n\n\n\n\n\n\n\n\n\n\n\nObserve that by clicking on the dots on the right side you can view the raw logs\n\nDocumentation and README.md\n\nOkay great, our tests are passing and we have CI.\n\nLet’s add a few items that will help\nto round out our project.\n\nIt is always a good idea to include some documentation with your\nproject, so we’ll add a README.md, using markdown syntax. Using\nmarkdown is a good idea because it will be nicely displayed on both\nGithub and npm.\n\n  Scapegoat\n  =========\n\n  A small library providing utility methods to `escape` and `unescape` HTML entities\n\n  ## Installation\n\n    npm install scapegoat --save\n\n  ## Usage\n\n    var scapegoat = require('scapegoat')\n        escape = scapegoat.escape,\n        unescape = scapegoat.unescape;\n\n    var html = '&lt;h1&gt;Hello World&lt;/h1&gt;',\n        escaped = escape(html),\n        unescaped = unescape(escaped);\n\n    console.log('html', html, 'escaped', escaped, 'unescaped', unescaped);\n\n  ## Tests\n\n    npm test\n\n  ## Contributing\n\n  In lieu of a formal styleguide, take care to maintain the existing coding style.\n  Add unit tests for any new or changed functionality. Lint and test your code.\n\n  ## Release History\n\n  * 0.1.0 Initial release\n\n\nDocumenting the JavaScript Sources\n\n{%  include documentation-guide.md  %}\n\nReferences\n\n\n  What’s the best way to document JavaScript?\n  JsDoc\n  Documentation npm package: Getting Started\n\n\nSemantic Versioning\n\nAs you may have noticed in the readme above, I referenced the version\n0.1.0 in the release history. We’ll need to update that in our\npackage.json. If you are not familiar with semantic versioning aka\nSemVer, please add it to your reading list.\n\n\"version\": \"0.1.0\",\n\n\nLicense\n\nFurther, it is generally a good idea to specify a license with your\nproject. I’ll choose an MIT license, add a LICENSE-MIT file to the\nproject root, and update the package.json respectively. Note that you\ncan obtain the actual content for your chosen license type at\nhttp://opensource.org/licenses/alphabetical. The updated section of\nthe package.json now looks like the following.\n\n\"licenses\": [\n  {\n    \"type\": \"MIT\",\n    \"url\": \"https://github.com/brentertz/scapegoat/blob/master/LICENSE-MIT\"\n  }\n],\n\n\nPublishing\n\ngit tag\n\nGreat, the module is complete. Prior to publishing to npm, let’s first\nensure that any changes have been committed to git and that everything\nhas been pushed up to Github. It is also a good idea to create a version\ntag as well. Here’s how to do just that.\n\ngit tag 0.1.0\n\n\nDon’t forget to push your tags:\n\ngit push origin master --tags\n\n\n\n\nBetter yet: use npm version. The syntax is:\n\nnpm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease [--preid=&lt;prerelease-id&gt;] | from-git]\n\n\nThe newversion argument should be\n\n  a valid semver string,\n  a valid second argument to semver.inc (one of patch, minor, major, prepatch, preminor, premajor, prerelease), or\n    \n      In  this case,  the existing version will be incremented by 1 in the specified field.\n    \n  \n  from-git.\n    \n      from-git will try to read the latest git tag, and use that as the new npm version.\n    \n  \n\n\nFor example:\n\nnpm version patch -m \"Upgrade to %s for reasons\"\n\n\nIf run in a git repo,\n\n\n  it will  create a version commit and tag\n  If the message config contains %s then that will be replaced with the resulting version number.\n\n\nGitHub can be used to install npm packages\n\nNote that for whatever reason if you decide not to publish your module\non npm, the npm package format provides value in itself in both\nportability and ease of installation.\n\nYou can install packages directly from Github, and even specify\n\n\n  a tag,\n  a sha, or\n  a branch\n\n\nnpm install git://github.com/brentertz/scapegoat.git\nnpm install git://github.com/brentertz/scapegoat.git#0.1.0\n\n\nTest the Installation Process\n\nBefore publishing, be sure to test that your package installs and works\ncorrectly. This does not mean running the tests as we did above, but\nrather attempting an actual install.\n\n\n\nSymlink Your Package with npm link\n\nThis is another way to check your package before publishing it.\n\nObserve that in this sections I am working with a different repo (not the scapegoatexample but a different package @ULL-ESIT-PL-1920/lexer-generator.\nYou can find the example at https://github.com/ULL-ESIT-PL-1920/lexer-generator)\n\nRun npm link in the package directory:\n\n[~/.../github-actions-learning/lexer-generator(master)]$ npm link\naudited 1310372 packages in 8.916s\n\n26 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n\n/Users/casiano/.nvm/versions/node/v12.10.0/lib/node_modules/@ULL-ESIT-PL-1920/lexer-generator -&gt; /Users/casiano/local/src/github-actions-learning/lexer-generator\n\n\nThis will create a symlink in the global node_modules folder that links to the folder where the npm link command was executed:\n\n[~/.../github-actions-learning/lexer-generator(master)]$ npm list -g | head -n 1\n/Users/casiano/.nvm/versions/node/v12.10.0/lib\n[~/.../github-actions-learning/lexer-generator(master)]$ ls -l ~/.nvm/versions/node/v12.10.0/lib/node_modules/\\@ULL-ESIT-PL-1920/lexer-generator\nlrwxr-xr-x  1 casiano  staff  64 22 mar 22:21 /Users/casiano/.nvm/versions/node/v12.10.0/lib/node_modules/@ULL-ESIT-PL-1920/lexer-generator -&gt; /Users/casiano/local/src/github-actions-learning/lexer-generator\n\n\nNext, in the other location where we want to test our package, \nwe run the command\n\n[~/.../test-lexer-generator]$ npm link \\@ULL-ESIT-PL-1920/lexer-generator\n/Users/casiano/local/src/github-actions-learning/test-lexer-generator/node_modules/@ULL-ESIT-PL-1920/lexer-generator -&gt; /Users/casiano/.nvm/versions/node/v12.10.0/lib/node_modules/@ULL-ESIT-PL-1920/lexer-generator -&gt; /Users/casiano/local/src/github-actions-learning/lexer-generator \n[~/.../test-lexer-generator]$ ls -l node_modules/\\@ULL-ESIT-PL-1920/lexer-generator\nlrwxr-xr-x  1 casiano  staff  96 22 mar 22:33 node_modules/@ULL-ESIT-PL-1920/lexer-generator -&gt; ../../../../../../.nvm/versions/node/v12.10.0/lib/node_modules/@ULL-ESIT-PL-1920/lexer-generator\n\n\nand you should be able to import or require the package as if it was an installed dependency.\n\nNote that the name of the package is taken from package.json, not from the directory name.\n\nNow we have created a test-lexer-generator directory to test our test-generatorpackage.\n\n[~/.../test-lexer-generator]$ ls -l\ntotal 16\ndrwxr-xr-x  3 casiano  staff   96 22 mar 22:33 node_modules\n-rw-r--r--  1 casiano  staff  320 22 mar 22:32 package.json\n-rw-r--r--  1 casiano  staff  776 22 mar 22:39 sticky.js\n\n\nIt contains a simple program sticky.js that loads and tests our\npackage. Here are the first 5 lines:\n\n[~/.../test-lexer-generator]$ head -n 5 sticky.js\n// main\n\nconst buildLexer =require('@ULL-ESIT-PL-1920/lexer-generator');\n\nconst SPACE = /(?&lt;SPACE&gt;\\s+)/;\n\n\nObserve that no path is specified in the require. Just like if it were in production mode.\n\nNow we can run the program:\n\n[~/.../test-lexer-generator]$ node sticky.js\nconst varName = \"value\"\n[\n  { type: 'RESERVEDWORD', value: 'const' },\n  { type: 'ID', value: 'varName' },\n  { type: 'OP', value: '=' },\n  { type: 'STRING', value: '\"value\"' }\n]\n...\n\n\nWe can unlink at any time by running the following command in the package directory:\n\n[~/.../github-actions-learning/lexer-generator(master)]$ npm unlink\n\n\nPublish it!\n\nHopefully everything worked as expected and you can now move on to the\npublishing step. All of the meta information is contained in the\npackage.json file. And remember from earlier that we have already\nregistered on npm, with the npm adduser command. With that, the actual\npublishing part is really easy.\n\nnpm publish\n\n\nWhen you publish to npm a public package using a scope, the first time you have to add the option\n--access public:\n\n[/tmp/scapegoat(master)]$ npm publish --access public\n+ @ull-esit-dsi-1617/scapegoat@1.0.2\n\n\nAfterwards, you’ll be able to install your package directly by name\nrather than having to point at the Github url.\n\nnpm install scapegoat\n\n\nScopes and Registries\n\nThe syntax of npm publish is:\n\n npm publish [&lt;tarball&gt;|&lt;folder&gt;] [--tag &lt;tag&gt;] [--access &lt;public|restricted&gt;] [--otp otpcode]\n [--dry-run]\n\n\nPublishes  a  package to the registry so that it can be installed by name.\n\nAll files in the package directory are included if no  local  .gitignore  or  .npmignore  file exists.\n\nIf  both  files  exist  and  a  file  is  ignored  by .gitignore but not by\n.npmignore then it will be included.\n\nBy default npm will publish to the public registry.\n\nThis can be overridden by specifying  a  different  default registry\nor using a npm scope in the name.\n\nYou can associate a scope with a registry at login, e.g.\n\n  npm login --registry=https://npm.pkg.github.com --scope=@myco\n\n\nScopes have a many-to-one relationship with registries:\n\nOne registry can host multiple scopes, but a scope only ever points to one registry.\n\nYou can also associate a scope with a registry using npm config:\n\n  npm config set @ULL-ESIT-PL-1920:registry https://npm.pkg.github.com\n\n\nIn this example we associate the scope @ULL-ESIT-PL-1920 with the GitHub registry\nhttps://npm.pkg.github.com.\n\nOnce a scope is associated with a registry, any npm install \nfor a package with  that\nscope  will request packages from that registry instead.\n\nTherefore any package with name @ULL-ESIT-PL-1920/some-name will be \npublished at https://npm.pkg.github.com.\n\nLet us repeat it: Any npm publish for a package name that contains the scope \nwill be published to that registry instead.\n\nIn the following example, the name of the package is @ULL-ESIT-PL-1920/lexer-generator:\n\n$ cat package.json\n\n{\n  \"name\": \"@ULL-ESIT-PL-1920/lexer-generator\",     👈\n  \"version\": \"1.0.0\",\n  \"description\": \"A lab for PL: Building a lexer generator\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/ULL-ESIT-PL-1920/lexer-generator.git\"\n  },\n  \"keywords\": [\"ULL\", \"compilers\", \"lexical analysis\", \"regexp\"],\n  \"author\": \"Casiano Rodriguez-Leon &lt;crguezl@ull.edu.es&gt; (https://github.com/crguezl)\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ULL-ESIT-PL-1920/lexer-generator/issues\"\n  },\n  \"homepage\": \"https://github.com/ULL-ESIT-PL-1920/lexer-generator#readme\"\n}\n\n\nWhen  we run npm publish inside the package folder we get:\n\n$ npm publish\nnpm notice\nnpm notice 📦  @ULL-ESIT-PL-1920/lexer-generator@1.0.0\nnpm notice === Tarball Contents ===\nnpm notice 1.1kB index.js\nnpm notice 760B  sticky.js\nnpm notice 687B  package.json\nnpm notice === Tarball Details ===\nnpm notice name:          @ULL-ESIT-PL-1920/lexer-generator\nnpm notice version:       1.0.0\nnpm notice package size:  1.3 kB\nnpm notice unpacked size: 2.5 kB\nnpm notice shasum:        bc57a2710303351aba750589af2409e4f46b0148\nnpm notice integrity:     sha512-neejvnZNk7ont[...]NgAI30R9/KmPQ==\nnpm notice total files:   3\nnpm notice\n+ @ULL-ESIT-PL-1920/lexer-generator@1.0.0\n\n\nAnd now, since our repo is private, we have got a private module that we\ncan install and test assuming we have the permits!\n\n[~/.../github-actions-learning/test-lexer-generator]$ npm i \\@ULL-ESIT-PL-1920/lexer-generator   👈 Escape the @ to avoid shell interpretation\nnpm WARN test-lexer-generator@1.0.0 No description\nnpm WARN test-lexer-generator@1.0.0 No repository field.\n\n+ @ULL-ESIT-PL-1920/lexer-generator@1.0.0\nupdated 1 package and audited 1 package in 1.683s\nfound 0 vulnerabilities\n[~/.../github-actions-learning/test-lexer-generator]$ tree\n.\n├── node_modules\n│   └── @ULL-ESIT-PL-1920\n│       └── lexer-generator\n│           ├── index.js\n│           ├── package.json\n│           └── sticky.js\n├── package-lock.json\n└── package.json\n\n\nAnd now we can use the module:\n\n[~/.../github-actions-learning/test-lexer-generator]$ node\nWelcome to Node.js v12.10.0.\nType \".help\" for more information.\n&gt; bL = require('@ULL-ESIT-PL-1920/lexer-generator')\n[Function: buildLexer]\n&gt; const SPACE = /(?&lt;SPACE&gt;\\s+)/;\n&gt; const RESERVEDWORD = /(?&lt;RESERVEDWORD&gt;\\b(const|let)\\b)/;\n&gt; const ID = /(?&lt;ID&gt;\\b([a-z_]\\w*))\\b/;\n&gt; const STRING = /(?&lt;STRING&gt;\"([^\\\\\"]|\\\\.\")*\")/;\n&gt; const OP = /(?&lt;OP&gt;[+*\\/=-])/;\n&gt; const myTokens = [\n...   ['SPACE', SPACE], ['RESERVEDWORD', RESERVEDWORD], ['ID', ID],\n...   ['STRING', STRING], ['OP', OP]\n... ];\n&gt; lexer = bL(myTokens)\n&gt; lexer('let x = a + \\nb')\n[\n  { type: 'RESERVEDWORD', value: 'let' },\n  { type: 'ID', value: 'x' },\n  { type: 'OP', value: '=' },\n  { type: 'ID', value: 'a' },\n  { type: 'OP', value: '+' },\n  { type: 'ID', value: 'b' }\n]\n&gt;\n\n\nOther ways to set the Scope\n\nAlternatively, You can set up the scope\nmapping for your project using\n\n\n  Either a local .npmrc file in the project (See Publishing a package using a local .npmrc file) or\n  Using the publishConfig option in the package.json (See Publishing a package using publishConfig in the package.json file).\n\n\nHere is a fragment of  a package.json using publishConfig:\n\n    \"private\": true,\n    \"publishConfig\": {\n      \"registry\":\"http://my-internal-registry.local\"\n    } \n\n\nFind your Module\n\nAt npm\n\nIf you publish it on the npm website, go find your module on the http://npmjs.org website and share it with your friends.\n\nAt GitHub\n\nIf you use GitHub Registry go to the github repo page:\n\n\n\nand click on the package icon. You’ll get s.t. like this:\n\n\n\nViewing an organization’s packages\n\nYou can see all the packages installed in an organization and search for a specific package installed in an organization’s repositories.\n\n\n  In the top right corner of GitHub, click your profile photo, then click Your profile.\n  On the left side of your profile page, under “Organizations”, click the icon for your organization.\n  \n    Under your organization name, click the Packages icon.\n\n    \n  \n  Click the name of the package that you want to view.\n\n\nViewing your packages\n\nYou can see all the packages you’ve installed and search for a specific package you’ve installed across all organizations and repositories.\n\n\n  In the top right corner of GitHub, click your profile photo, then click Your profile.\n  On the top of the profile page, in the main navigation, click Packages.\n  Click the name of the package that you want to view.\n\n\nPublishing Again!\n\nThe command npm version can be followed by one of the semantic versioning words \nlike npm version minor -m \"Upgrade to %s for reasons\":\n\n[~/.../github-actions-learning/lexer-generator(master)]$ npm version patch\nv1.0.1\n\n\nThis will update the version field in package.json:\n\n[~/.../github-actions-learning/lexer-generator(master)]$ jq .version package.json\n\"1.0.1\"\n\n\n(jq is a DSL to query JSON data. It is like unix sed but for JSON)\n\nThen again, make a tag:\n\n[~/.../github-actions-learning/lexer-generator(master)]$ git tag 1.0.1\n\n\ncommit, push and publish it:\n\n[~/.../github-actions-learning/lexer-generator(master)]$ npm publish\nnpm notice\nnpm notice 📦  @ULL-ESIT-PL-1920/lexer-generator@1.0.1\n...\n+ @ULL-ESIT-PL-1920/lexer-generator@1.0.1\n\n\nTesting in Production\n\nOnce more we have to test the publication, now in Production mode \nTo automate the testing process, we create a separated project \nin a sibling folder of the folder containing the module repo:\n\n$ ls -l\ndrwxr-xr-x  13 casiano  wheel    416 26 sep  2017 scapegoat\n~/.../src/github-actions-learning]$ mkdir prueba-scapegoat\n\n\nand move to it:\n\n$ cd prueba-scapegoat/\n\n\nThe idea is to set things in a way the by simply running s.t. like\nnpm test we can check that our npm module works in production.\n\nFor that we can create a package.json similar to this one:\n\n[~/.../prueba-scapegoat(master)]$ cat package.json\n\n{\n  \"name\": \"prueba-scapegoat\",\n  \"version\": \"1.3.4\",\n  \"description\": \"Testing a published module\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"npm update &amp;&amp; npm run versions &amp;&amp; mocha\",\n    \"module-version\": \"jq .version ../scapegoat/package.json\",\n    \"versions\": \"npm list --depth=0\"\n  },\n  \"keywords\": [ \"ULL\", \"npm\", \"packages\", \"test\", \"git-submodules\" ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat.git\"\n  },\n  \"author\": \"Casiano Rodriguez-Leon &lt;casiano.rodriguez.leon@gmail.com&gt; (https://github.com/crguezl)\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@ull-esit-dsi-1617/scapegoat\": \"*\",\n    \"chai\": \"*\",\n    \"mocha\": \"*\"\n  }\n}\n\n\nInstall the dependencies (that is, our module and the test framework we are using):\n\n[~/.../prueba-scapegoat(master)]$ npm i\n\n\nNow we have to write our tests. We recycle the tests of our module\nby copying them to our project root directory:\n\n$ cp node_modules/\\@ull-esit-dsi-1617/scapegoat/test/index.js test.js\n\n\nOf course, this file test.js loads the module using  a path that is relative:\n\n[~/.../prueba-scapegoat(master)]$ sed -ne '/require.*ind/p' test.js\n    scapegoat = require('../index'), 👈\n\n\nWe edit the file test.js and change  line 7 from the relative \npath to a “production” require:\n\n[~/.../prueba-scapegoat(master)]$ sed -ne '/require/p' test.js\nvar should = require('chai').should(),\n    scapegoat = require(\"@ull-esit-dsi-1617/scapegoat\"),\n\n\nAnd now we run npm test. Let us explain the meaning of the scripts in our  package.json:\n\n\n  \"versions\": \"npm list --depth=0\": shows the versions of the installed dependencies. We want to check we are using the latest version of our just published module\n  \"update\": \"npm i --no-save @ull-esit-dsi-1617/scapegoat@latest\": installs the latest version of our module. The -no-save option prevent savings to depedencies\n  \"clean\": \"rm -fR node_modules package-lock.json\": remove all the remainings of previous installations\n  \"test\": \"npm run clean:update:install &amp;&amp; npm run version &amp;&amp; mocha\": we clean it, update our module, install the remaining dependencies show the versions and run the tests\n\n\nHere is the ouput:\n\n[~/.../prueba-scapegoat(master)]$ npm test\n&gt; prueba-scapegoat@1.3.4 test /Users/casiano/local/src/javascript/evalua-module/create-a-npm-module/prueba-scapegoat\n&gt; npm update &amp;&amp; npm run versions &amp;&amp; mocha\n\n\n&gt; prueba-scapegoat@1.3.4 versions /Users/casiano/local/src/javascript/evalua-module/create-a-npm-module/prueba-scapegoat\n&gt; npm list --depth=0\n\nprueba-scapegoat@1.3.4 /Users/casiano/local/src/javascript/evalua-module/create-a-npm-module/prueba-scapegoat\n├── @ull-esit-dsi-1617/scapegoat@1.3.11\n├── chai@4.2.0\n└── mocha@7.1.1\n\n\n\n  #escape\n    ✓ converts &amp; into &amp;amp;\n    ✓ converts \" into &amp;quot;\n    ✓ converts ' into &amp;#39;\n    ✓ converts &lt; into &amp;lt;\n    ✓ converts &gt; into &amp;gt;\n    ✓ returns empty string if called with falsey value\n\n  #unescape\n    ✓ converts &amp;amp; into &amp;\n    ✓ converts &amp;quot; into \"\n    ✓ converts &amp;#39; into '\n    ✓ converts &amp;lt; into &lt;\n    ✓ converts &amp;gt; into &gt;\n    ✓ does not double unescape values\n    ✓ returns empty string if called with falsey value\n\n  13 passing (11ms)\n\n\nFrom now on, each time we publish a new version of the module\n\n[~/.../scapegoat(master)]$ jq .version package.json\n\"1.3.1\"\n[~/.../scapegoat(master)]$ npm version patch\nv1.3.2\n[~/.../scapegoat(master)]$ git tag 1.3.2\n[~/.../scapegoat(master)]$ npm publish\nnpm notice 📦  @ull-esit-dsi-1617/scapegoat@1.3.2\n...\n+ @ull-esit-dsi-1617/scapegoat@1.3.2\n\n\nwe have to change to the prueba-scapegoat directory and run npm test\n\n[~/.../prueba-scapegoat(master)]$ npm test\n...\n&gt; npm list --depth=0\n\nprueba-scapegoat@1.0.0 /Users/casiano/local/src/javascript/evalua-module/create-a-npm-module/prueba-scapegoat\n├── @ull-esit-dsi-1617/scapegoat@1.3.2\n├── chai@4.2.0\n└── mocha@7.1.1\n...\n\n\nSet production:test Script on the Module Folder\n\nNow that the directory hierarchy has been settled, each time we want to test our module in production we have to cd ../prueba-scapegoat; npm test.\n\nInside the scapegoat directory we add a new task production:test to the  package.json for this:\n\n[~/.../create-a-npm-module/scapegoat(master)]$ jq .scripts package.json\n\n{\n  \"test\": \"mocha --reporter spec\",\n  \"doc\": \"documentation build index.js -f html -o docs\",\n  \"serve:doc\": \"http-server docs/ -o\",\n  \"commit\": \"npm run doc; git add docs; git ci -am `jq .version package.json`\",\n  \"push\": \"npm run commit; git push\",\n  \"production:test\": \"cd ../prueba-scapegoat &amp;&amp; npm test\",\n  \"patch\": \"npm run commit; npm version patch\",\n  \"patch:publish\": \"npm run patch; git push; npm publish\",\n  \"patch:publish:production:test\": \"npm run patch:publish; npm run production:test\"\n}\n\n\nWe also added:\n\n\n  \"patch\": \"npm version patch\": To change the patch number. (If run in a git repo, the npm version patchcommand  will also create a version commit and tag)\n  \"patch:publish\": \"npm run patch; git push; npm publish\" to change the patch number, push the changes to GitHub and publish the repo\n  \"patch:publish:production:test\": \"npm run patch:publish; npm run production:test\" to publish the module and run the tests in production mode\n\n\nCI the Production Testing with GitHub Actions\n\nWe can automate the previous workflow adding a GitHub action inside the prueba-scapegoat folder:\n\n[~/.../prueba-scapegoat(master)]$ tree .github/\n.github/\n└── workflows\n    └── nodejs.yml\n\n1 directory, 1 file\n\n\nThe action simply run the production tests each time a push happens\n\n[~/.../prueba-scapegoat(master)]$ cat .github/workflows/nodejs.yml\n\n\n# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Test scapegoat in production\n\non: # when this action should be triggered?\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs: # jobs are made of steps\n  build:\n    # Define the OS our workflow should run on\n    runs-on: ${{ matrix.os }}\n    strategy:\n      # To test across multiple language versions\n      matrix:\n        os: [macos-latest, ubuntu-latest, windows-latest ]\n        node-version: [12.x, 14.x]\n\n    steps: # See https://github.com/actions/checkout\n    - uses: actions/checkout@v2\n    # Example of using an environment variable\n    - name: Use Node.js ${{ matrix.node-version }} # Will be: \"Use Node.js 12.x\"\n      uses: actions/setup-node@v1 # See https://github.com/actions/setup-node\n      with:\n        node-version: ${{ matrix.node-version }}\n    - run: npm test\n      env:\n        CI: true\n\n\nLet us change the version of the test repo and push it to github:\n\n[~/.../prueba-scapegoat(master)]$ npm version 1.3.3\nv1.3.3\n[~/.../prueba-scapegoat(master)]$ git push origin master\n\n\nNow the action runs:\n\n\n\nRelated References\n\n\n  actions/checkout\n  actions/setup-node\n  Installing private npm packages from GitHub Package Registry\n  Triggering GitHub Actions across different repositories\n  Triggering by other repository\n\n\nMaking a Project with the two repos: git submodule\n\nIn some occasions, like in this one, it is convenient to have different repos together.\n\nGit allows you to include other Git repositories called submodules into a repository. You can commit, pull and push to these repositories independently. Submodules allow you to keep projects in separate repositories but still be able to reference them as folders in the working directory of other repositories.\n\nLet us make the new project:\n\n[~/.../github-actions-learning]$ mkdir project-lexer-generator\n[~/.../github-actions-learning]$ cd project-lexer-generator/\n[~/.../project-lexer-generator]$ git init .\nInicializado repositorio Git vacío en /Users/casiano/local/src/github-actions-learning/project-lexer-generator/.git/\n\n\nTo add the other repos to this one we use\n\ngit sumodule add &lt;repo url&gt;\n\n\nExample:\n\n[~/.../project-lexer-generator]$ git submodule add git@github.com:ULL-ESIT-PL-1920/lexer-generator.git\nClonando en '/Users/casiano/local/src/github-actions-learning/project-lexer-generator/lexer-generator'\n...\n\n[~/.../project-lexer-generator]$ git submodule add git@github.com:ULL-ESIT-PL-1920/test-lexer-generator.git\nClonando en '/Users/casiano/local/src/github-actions-learning/\n...\n\n\nThis clones the repos and creates a file .gitmodules:\n\n[~/.../project-lexer-generator]$ ls -la\ntotal 8\ndrwxr-xr-x   6 casiano  staff  192 27 mar 16:56 .\ndrwxr-xr-x   9 casiano  staff  288 27 mar 16:53 ..\ndrwxr-xr-x  11 casiano  staff  352 27 mar 16:56 .git\n-rw-r--r--   1 casiano  staff  241 27 mar 16:56 .gitmodules\ndrwxr-xr-x  12 casiano  staff  384 27 mar 16:55 lexer-generator\ndrwxr-xr-x   9 casiano  staff  288 27 mar 16:56 test-lexer-generator\n\n\nThe .gitmodules file it is an INI file containing the relation between the local path and the remote url for each sub-repo:\n\n[~/.../project-lexer-generator]$ cat .gitmodules\n[submodule \"lexer-generator\"]\n\tpath = lexer-generator\n\turl = git@github.com:ULL-ESIT-PL-1920/lexer-generator.git\n[submodule \"test-lexer-generator\"]\n\tpath = test-lexer-generator\n\turl = git@github.com:ULL-ESIT-PL-1920/test-lexer-generator.git\n\n\nAfter a commit and a push this is the image of the repo in GitHub:\n\n\n\nClicking in the repo links will take us to the corresponding GitHub repo but be aware that you are in the specific commit specified in the super-repo, not in the master branch\n\nSee the Chacon’s book on Git: Chapter 7.11 Git Tools - Submodules for more information.\n\nNow, when someone clones the super-repo uses the --recurse-submodules option:\n\n$ git clone --recurse-submodules git@github.com:ULL-ESIT-PL-1920/project-lexer-generator.git\n\n\nThe  --recurse-submodules option initializes and clones submodules within based on the provided\npathspec.\n\nThis is equivalent to running\n\ngit submodule update --init --recursive &lt;pathspec&gt; \n\n\nimmediately after the clone is finished.\n\nWe can also make a flat clone:\n\n[/tmp]$ git clone git@github.com:ULL-ESIT-PL-1920/project-lexer-generator.git\nClonando en 'project-lexer-generator'...\n...\n\n\nIn such case, You can see the folders for the subrepos are empty:\n\n[/tmp/project-lexer-generator(master)]$ tree\n.\n├── lexer-generator\n└── test-lexer-generator\n\n2 directories, 0 files\n[/tmp/project-lexer-generator(master)]$\n\n\nNow we issue the git submodule init command:\n\n[/tmp/project-lexer-generator(master)]$ git submodule init\nSubmódulo 'lexer-generator' (git@github.com:ULL-ESIT-PL-1920/lexer-generator.git) registrado para ruta 'lexer-generator'\nSubmódulo 'test-lexer-generator' (git@github.com:ULL-ESIT-PL-1920/test-lexer-generator.git) registrado para ruta 'test-lexer-generator'\n\n\nThe command git submodule init initialize the submodules recorded in the index by setting\nsubmodule.$name.url in .git/config. It uses the same setting from .gitmodules as a template:\n\n[~/.../project-lexer-generator(master)]$ cat .git/config\n[core]\n\trepositoryformatversion = 0\n\tfilemode = true\n\tbare = false\n\tlogallrefupdates = true\n\tignorecase = true\n\tprecomposeunicode = true\n[submodule \"lexer-generator\"]\n\turl = git@github.com:ULL-ESIT-PL-1920/lexer-generator.git\n\tactive = true\n[submodule \"test-lexer-generator\"]\n\turl = git@github.com:ULL-ESIT-PL-1920/test-lexer-generator.git\n\tactive = true\n[remote \"origin\"]\n\turl = git@github.com:ULL-ESIT-PL-1920/project-lexer-generator.git\n\tfetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n\tremote = origin\n\tmerge = refs/heads/master\n\n\nThe command git submodule update\nupdates the registered submodules to match what the superproject expects by\ncloning missing submodules, fetching missing commits in submodules and updating\nthe working tree of the submodules:\n\n[/tmp/project-lexer-generator(master)]$ git submodule update\nClonando en '/private/tmp/project-lexer-generator/lexer-generator'...\nClonando en '/private/tmp/project-lexer-generator/test-lexer-generator'...\nSubmodule path 'lexer-generator': checked out '54594a4b0febd5eb1de0cee8b8f6b45edafaf989'\nSubmodule path 'test-lexer-generator': checked out 'b2f64a6dc2fe4145e268b6b63f8d03753b5eeff8'\n\n\nA cd to the sub-repo folder will leave us in the commit specified in the super-repo, but we can of course checkout the master branch and make a pull if we think an update is needed.\n\n[/tmp/project-lexer-generator(master)]$ cd lexer-generator/\n[.../project-lexer-generator/lexer-generator((HEAD desacoplada en 54594a4))]$ git co master\nCambiado a rama 'master'\nTu rama está actualizada con 'origin/master'.\n[.../project-lexer-generator/lexer-generator(master)]$ git pull origin master\n...\n\n\nHere are the two repos for the scapegoat example:\n\n\n  Example in ULL-ESIT-DSI-1617/create-a-npm-module\n    \n      Submodule ULL-ESIT-DSI-1617/scapegoat\n      Submodule ULL-ESIT-DSI-1617/prueba-scapegoat\n    \n  \n\n\nAnd here is the ULL-ESIT-PL-1920/project-lexer-generator example:\n\n\n  ULL-ESIT-PL-1920/project-lexer-generator\n\n\nGit Submodule Alternatives\n\nAfter a while searching for alternatives to git submodules I found these two tools quite convincing:\n\n\n  loop\n  meta\n\n\nReferences\n\nnpm packages\n\n\n  npm developer guide\n  Working with package.json\n  How to create Node.js Modules\n  How to install an npm package from GitHub directly? in StackOverflow\n  Package.json documentation en npm site\n  A Simple Guide to Publishing an npm Package by Mostafa Fouad\n\n\nGitHub packages\n\n\n  About GitHub Packages\n  Configuring npm for use with GitHub Packages\n  Authenticating with the GITHUB_TOKEN\n  Automatically Publish to npm using GitHub Actions\n\n\nGitHub Actions\n\n\n  Using Node.js with GitHub Actions\n\n\nScoped Packages\n\n\n  Working with scoped packages\n  npm-scope manual: Scoped packages\n  Working with npm private modules. YouTube Video\n\n\nSemantic versioning and npm\n\n\n  Semantic versioning and npm\n  Semantic Versioning: Why You Should Be Using it SitePoint\n  YouTube Video: Semantic versioning and npm\n  El comando npm version\n\n\nText Processing\n\n\n  jq is a DSL to query JSON data\n  Unix sed\n\n\nOriginal Scapegoat\n\n\n  Scapegoat on Github\n  Scapegoat on npm\n\n\n",
    "url": "/assets/temas/introduccion-a-javascript/creating-and-publishing-npm-module.html"
  },
  
  {
    "title": "Hello Actions World!",
    "excerpt": "\n",
    "content": "Introduction\n\nIn this guide, you’ll learn about the basic components needed to create and use a \npackaged JavaScript action.\n\nTo focus this guide on the components needed to package the action,\nthe functionality of the action’s code is minimal.\n\nThe action prints\n\nHello World\n\n\nin the logs or\n\nHello [who-to-greet]\n\n\nif you provide a custom name.\n\nThis guide uses the GitHub Actions Toolkit Node.js module to speed up development.\n\nFor more information, see the actions/toolkit repository.\n\nTo ensure your JavaScript actions are compatible with all GitHub-hosted runners (Ubuntu, Windows, and macOS), the packaged JavaScript code you write should be pure JavaScript and not rely on other binaries.\n\nJavaScript actions run directly on the runner and use binaries that already exist in the virtual environment.\n\nPrerequisites\n\nCreate a new empty repository on GitHub. You can choose any repository name or use hello-world-javascript-action. Then on your terminal:\n\n$ mkdir hello-world-javascript-action\n$ cd hello-world-javascript-action/\n$ echo \"# hello-world-javascript-action\" &gt;&gt; README.md\n$ git init\n$ git add README.md\n$ git commit -m \"first commit\"\n$ git remote add origin git@github.com:ULL-ESIT-PL-1920/hello-world-javascript-action.git\n$ git push -u origin master\n\n\nCreate a package.json\n\n[~/.../hello-world-javascript-action(master)]$ npm init -y\n\n{\n  \"name\": \"hello-world-javascript-action\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/ULL-ESIT-PL-1920/hello-world-javascript-action.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"Casiano Rodriguez-Leon &lt;casiano.rodriguez.leon@gmail.com&gt; (https://github.com/crguezl)\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ULL-ESIT-PL-1920/hello-world-javascript-action/issues\"\n  },\n  \"homepage\": \"https://github.com/ULL-ESIT-PL-1920/hello-world-javascript-action#readme\"\n}\n\n\nCreate an action metadata file\n\nCreate a new file action.yml in the hello-world-javascript-action directory with the following example code:\n\n[~/.../hello-world-javascript-action(master)]$ cat action.yml\n\nname: 'Hello World'\ndescription: 'Greet someone and record the time'\ninputs:\n  who-to-greet:  # id of input\n    description: 'Who to greet'\n    required: true\n    default: 'World'\noutputs:\n  time: # id of output\n    description: 'The time we greeted you'\nruns:\n  using: 'node12'\n  main: 'index.js'\n\n\nThis file defines\n\n\n  the who-to-greet input and\n  time output.\n\n\nIt also tells the action runner how to start: running index.js.\n\nAdd actions toolkit packages\n\nThe actions toolkit is a collection of Node.js packages that allow you to quickly build JavaScript actions with more consistency.\n\nThe toolkit @actions/core package provides an interface to\n\n\n  the workflow commands,\n  input and output variables,\n  exit statuses, and\n  debug messages.\n\n\nThe toolkit also offers a @actions/github package that returns\n\n  an authenticated Octokit REST client and\n  access to GitHub Actions contexts.\n\n\nThe toolkit offers more than the core and github packages.\n\nFor more information, see the actions/toolkit repository.\n\nAt your terminal, install the actions toolkit core and github packages.\n\nnpm install @actions/core\nnpm install @actions/github\n\n\nNow you should see\n\n\n  a node_modules directory with the modules you just installed and\n  a package-lock.json file with the installed module dependencies and the versions of each installed module.\n\n\nWrite the action code\n\nAdd a new file called index.js, with the following code:\n\n[~/.../hello-world-javascript-action(master)]$ cat index.js\n\nconst core = require('@actions/core');\nconst github = require('@actions/github');\n\ntry {\n  // `who-to-greet` input defined in action metadata file\n  const nameToGreet = core.getInput('who-to-greet');\n  console.log(`Hello ${nameToGreet}!`);\n  const time = (new Date()).toTimeString();\n  core.setOutput(\"time\", time);\n  // Get the JSON webhook payload for the event that triggered the workflow\n  const payload = JSON.stringify(github.context.payload, undefined, 2)\n  console.log(`The event payload: ${payload}`);\n} catch (error) {\n  core.setFailed(error.message);\n}\n\n\nThis action uses the toolkit to get the who-to-greet input variable required in the action’s metadata file\n\nconst nameToGreet = core.getInput('who-to-greet');\n\n\nand prints Hello [who-to-greet] in a debug message in the log.\n\nconsole.log(`Hello ${nameToGreet}!`);\n\n\nNext, the script gets the current time and sets it as an output variable that actions running later in a job can use.\n\nconst time = (new Date()).toTimeString();\ncore.setOutput(\"time\", time);\n\n\nGitHub Actions provide context information about the webhook event, Git refs, workflow, action, and the person who triggered the workflow:\n\n GITHUB_CONTEXT: {\n  ...\n  \"event_name\": \"push\",\n  \"event\": {\n       ...\n     \"commits\": [\n       ...\n    ],\n    ...\n    \"organization\": {\n      ...\n    },\n    \"pusher\": {\n      ...\n    },\n  ...\n}\n\n\nTo access the context information, you can use the github package. \nThe action you’ll write will print the webhook event payload the log.\n\nconst payload = JSON.stringify(github.context.payload, undefined, 2)\nconsole.log(`The event payload: ${payload}`);\n\n\nIf an error is thrown in the above index.js example, core.setFailed(error.message); uses the actions toolkit @actions/core package to log a message and set a failing exit code.\n\nconst core = require('@actions/core');\nconst github = require('@actions/github');\n\ntry {\n  ...\n} catch (error) {\n  core.setFailed(error.message);\n}\n\n\nFor more information, see “Setting exit codes for actions.”\n\nCreate a README\n\nTo let people know how to use your action, you can create a README file. A README is most helpful when you plan to share your action publicly, but is also a great way to remind you or your team how to use the action.\n\nIn your hello-world-javascript-action directory, create a README.md file that specifies the following information:\n\n\n  A detailed description of what the action does.\n  Required input and output arguments.\n  Optional input and output arguments.\n  Secrets the action uses.\n  Environment variables the action uses.\n  An example of how to use your action in a workflow.\n\n\n[~/.../hello-world-javascript-action(master)]$ cat README.md\n\n# Hello world javascript action\n\nThis action prints \"Hello World\" or \"Hello\" + the name of a person to greet to the log.\n\n## Inputs\n\n### `who-to-greet`\n\n**Required** The name of the person to greet. Default `\"World\"`.\n\n## Outputs\n\n### `time`\n\nThe time we greeted you.\n\n## Example usage\n\nuses: actions/hello-world-javascript-action@v1\nwith:\n  who-to-greet: 'Mona the Octocat'\n\n\nCommit, tag, and push your action to GitHub\n\nGitHub downloads each action run in a workflow during runtime and executes it as a complete package of code before you can use workflow commands like run to interact with the runner machine.\n\nThis means you must include any package dependencies required to run the JavaScript code. You’ll need to check in the toolkit core and github packages to your action’s repository.\n\nFrom your terminal, commit\n\n\n  your action.yml,\n  index.js,\n  node_modules,\n  package.json,\n  package-lock.json, and\n  README.md files.\n\n\nIf you added a .gitignore file that lists node_modules, you’ll need to remove that line to commit the node_modules directory.\n\ngit add action.yml index.js node_modules/* package.json package-lock.json README.md\ngit commit -m \"My first action is ready\"\n\n\nIt’s best practice to also add a version tag for releases of your action.\n\ngit tag -a -m \"My first action release\" v1\ngit push --follow-tags\n\n\nFor more information on versioning your action, see\n\n\n  About actions.\n  Versioning Actions\n\n\nAs an alternative to checking in your node_modules directory you can use a tool called vercel/ncc to compile your code and modules into one file used for distribution.\n\n\n  Install vercel/ncc by running this command in your terminal: npm i -g @zeit/ncc\n  Compile your index.js file. ncc build index.js\nYou’ll see a new dist/index.js file with your code and the compiled modules.\n  Change the main keyword in your action.yml file to use the new dist/index.js file. main: 'dist/index.js'\n  If you already checked in your node_modules directory, remove it. rm -rf node_modules/*\n  \n    From your terminal, commit the updates to your action.yml, dist/index.js, and node_modules files.\n\n     git add action.yml dist/index.js node_modules/*\n git commit -m \"Use zeit/ncc\"\n git tag -a -m \"My first action release\" v1\n git push --follow-tags\n    \n  \n\n\nTesting out your action in a workflow\n\nNow you’re ready to test your action out in a workflow.\n\nWhen an action is in a private repository, the action can only be used in workflows in the same repository.\n\nPublic actions can be used by workflows in any repository.\n\nChange the visibility of your action repo to public.\n\nLet us create  a new repo in GitHub and also set it in your machine:\n\n$ git remote add origin git@github.com:ULL-ESIT-PL-1920/use-hello-world-javascript-action.git\n\n\nThe following workflow code uses the completed hello world action in the ULL-ESIT-PL-1920/hello-world-javascript-action repository.\n\nCopy the workflow code into a .github/workflows/main.yml file, but replace the ULL-ESIT-PL-1920/hello-world-javascript-action repository with the repository you created. You can also replace the who-to-greet input with your name.\n\n$ cat .github/workflows/main.yml\n\n\nname: Using hello world\non: [push]\n\njobs:\n  hello_world_job:\n    runs-on: ubuntu-latest\n    name: A job to say hello\n    steps:\n      # To use this repository's private action, you must check out the repository\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Hello world action step\n        uses: ULL-ESIT-PL-1920/hello-world-javascript-action@v1\n        id: hello\n        with:\n          who-to-greet: 'Procesadores de Lenguajes at ULL'\n      # Use the output from the `hello` step\n      - name: Get the output time\n        run: echo \"The time was ${{\"{{ steps.hello.outputs.time\"}} }}\"\n\n\nObserve the id attribute in the Hello world action step.\n\nWe use the id hello to refer to this step\nin the next step Get the output time and to refer to its output using \nthe expression steps.hello.outputs.\n\nSince in our action.yml file we set the name\nof the output to time\n\nname: 'Hello World'\ndescription: 'Greet someone and record the time'\ninputs:\n  who-to-greet:  # id of input\n    ...\noutputs:\n  time: # id of output\n    description: 'The time we greeted you'\nruns:\n  ...\n\n\nwe can refer to it with the expression ${{ \"{{ steps.hello.outputs.time\" }} }}\n\nThe setting of the output was achieved inside the index.js file by calling the \nsetOutput method of the core module:\n\n  const time = (new Date()).toTimeString();\n  core.setOutput(\"time\", time);\n\n\nAfter adding and commiting the files, we push the changes to the remote\n\n[~/.../use-hello-world-javascript-action(master)]$ git push -u origin master\n\n\nthe action is triggered.\n\nFrom our repository, We click the Actions tab, and select the latest workflow run. We can see Hello Procesadores de Lenguajes at ULL or the name we use for the who-to-greet input\n\n\n\nand the timestamp printed in the log:\n\n\n\nPublishing your action to GitHub Marketplace\n\nWhen a repository contains an action metadata file (action.yml or action.yaml), you’ll see a banner to publish the action to GitHub Marketplace. Click Draft a release.\n\n\n\nThe whole process requires a few steps, among them you have to tag your Action with a version. People will see the version in the action’s dedicated GitHub Marketplace page.\n\n\n\nSee Publishing actions in GitHub Marketplace for more information\n\nVersioning\n\nGitHub recommends using semantic versioning when creating actions.\n\n\n  Create a GitHub release using semantic versioning (v1.0.9). For more information, see “Creating releases.”\n  Move the major version tag (v1, v2, etc.) to point to the Git ref of the current release. For more information, see “Git basics - tagging.”\n  Introduce a new major version tag (v2) for breaking changes that will break existing workflows. For example, changing an action’s inputs would be a breaking change.\n\n\nInside the action client, We specified the version to use with the line:\n\nuses: ULL-ESIT-PL-1920/hello-world-javascript-action@v1\n\n\nThe workflow references an action using a git ref.\n\nHare are some more examples:\n\nsteps:\n    - uses: actions/javascript-action@v1        # recommended. starter workflows use this\n    - uses: actions/javascript-action@v1.0.0    # if an action offers specific releases \n    - uses: actions/javascript-action@41775a4da8ffae865553a738ab8ac1cd5a3c0044 # sha\n\n\nThe idea is that with releases, binding to a major version is the latest of that major version.\n\nThat is, to say v8 is the same as saying \"8.*\".\n\nTherefore, as an action developer, you can add new capabilities to a release, \nbut you should not break existing input compatibility or break existing workflows.\n\nHere is an example of versioning workflow:\n\n\n\nRunning Manually GitHub Workflows with gh\n\n\n  Running Manually GitHub Workflows with gh\n\n\nNext Steps on Learning GitHub Actions\n\nUse the repo actions/javascript-action\nas a template and follow the instructions.\n\nLearning to use GitHub Actions at GitHub Learning Lab\n\n{% include github-learning-lab.md %}\n\n\n  Search at GitHub Learning Lab for GitHub Action courses\n\n\nReferences\n\n{% include github-js-actions-references.md %}\n",
    "url": "/assets/temas/introduccion-a-javascript/creating-javascript-action.html"
  },
  
  {
    "title": "Logs from the debug-action.yml",
    "excerpt": "\n",
    "content": "PREAMBLE\n\nHare are the logs downloaded from the workflow debug.yml.\n\nSee it life at https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat/actions/workflows/debug.yml\n\n2021-03-08T09:25:31.0537652Z ##[section]Starting: Prepare job one\n2021-03-08T09:25:31.0575838Z Evaluating strategy\n2021-03-08T09:25:31.0576035Z Creating job '__default'\n2021-03-08T09:25:31.0576301Z Evaluating timeout\n2021-03-08T09:25:31.0576376Z Evaluating cancel timeout\n2021-03-08T09:25:31.0576463Z Evaluating continue on error\n2021-03-08T09:25:31.0576556Z Evaluating target\n2021-03-08T09:25:31.0651576Z ##[section]Finishing: Prepare job one\n\n2021-03-08T09:25:31.2598155Z ##[section]Starting: Request a runner to run this job\n2021-03-08T09:25:31.8649659Z Can't find any online and idle self-hosted runner in current repository that matches the required labels: 'ubuntu-16.04'\n2021-03-08T09:25:31.8649754Z Can't find any online and idle self-hosted runner in current repository's account/organization that matches the required labels: 'ubuntu-16.04'\n2021-03-08T09:25:31.8649978Z Found online and idle hosted runner in current repository's account/organization that matches the required labels: 'ubuntu-16.04'\n2021-03-08T09:25:31.9452448Z ##[section]Finishing: Request a runner to run this job\n2021-03-08T09:25:39.7680243Z Current runner version: '2.277.1'\n2021-03-08T09:25:39.7707821Z ##[group]Operating System\n2021-03-08T09:25:39.7709023Z Ubuntu\n2021-03-08T09:25:39.7709462Z 16.04.7\n2021-03-08T09:25:39.7709867Z LTS\n2021-03-08T09:25:39.7710273Z ##[endgroup]\n2021-03-08T09:25:39.7710790Z ##[group]Virtual Environment\n2021-03-08T09:25:39.7711336Z Environment: ubuntu-16.04\n2021-03-08T09:25:39.7711871Z Version: 20210302.0\n2021-03-08T09:25:39.7712744Z Included Software: https://github.com/actions/virtual-environments/blob/ubuntu16/20210302.0/images/linux/Ubuntu1604-README.md\n2021-03-08T09:25:39.7713918Z Image Release: https://github.com/actions/virtual-environments/releases/tag/ubuntu16%2F\n2021-03-08T09:25:39.7714716Z ##[endgroup]\n2021-03-08T09:25:39.7716574Z ##[group]GITHUB_TOKEN Permissions\n2021-03-08T09:25:39.7717793Z Actions: write\n2021-03-08T09:25:39.7718291Z Checks: write\n2021-03-08T09:25:39.7718718Z Contents: write\n2021-03-08T09:25:39.7719174Z Deployments: write\n2021-03-08T09:25:39.7719743Z Issues: write\n2021-03-08T09:25:39.7720480Z Metadata: read\n2021-03-08T09:25:39.7721072Z OrganizationPackages: write\n2021-03-08T09:25:39.7721798Z Packages: write\n2021-03-08T09:25:39.7722335Z PullRequests: write\n2021-03-08T09:25:39.7722906Z RepositoryProjects: write\n2021-03-08T09:25:39.7723661Z SecurityEvents: write\n2021-03-08T09:25:39.7724219Z Statuses: write\n2021-03-08T09:25:39.7724950Z ##[endgroup]\n2021-03-08T09:25:39.7728160Z Prepare workflow directory\n2021-03-08T09:25:39.8445002Z Prepare all required actions\n\n\nGITHUB_CONTEXT\n\n2021-03-08T09:25:39.9471897Z ##[group]Run echo \"$GITHUB_CONTEXT\"\n2021-03-08T09:25:39.9473098Z \u001b[36;1mecho \"$GITHUB_CONTEXT\"\u001b[0m\n2021-03-08T09:25:40.1340060Z shell: /bin/bash -e {0}\n2021-03-08T09:25:40.1340957Z env:\n2021-03-08T09:25:40.1380210Z   GITHUB_CONTEXT: {\n  \"token\": \"***\",\n  \"job\": \"one\",\n  \"ref\": \"refs/heads/master\",\n  \"sha\": \"8644e75a9cb769f219d064695eeb20e64324f263\",\n  \"repository\": \"ULL-ESIT-DSI-1617/prueba-scapegoat\",\n  \"repository_owner\": \"ULL-ESIT-DSI-1617\",\n  \"repositoryUrl\": \"git://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat.git\",\n  \"run_id\": \"631804367\",\n  \"run_number\": \"2\",\n  \"retention_days\": \"90\",\n  \"actor\": \"crguezl\",\n  \"workflow\": \"Debugging contexts\",\n  \"head_ref\": \"\",\n  \"base_ref\": \"\",\n  \"event_name\": \"push\",\n  \"event\": {\n    \"after\": \"8644e75a9cb769f219d064695eeb20e64324f263\",\n    \"base_ref\": null,\n    \"before\": \"e2840e77a0b20158e5e1f1efa4790e47e457cc86\",\n    \"commits\": [\n      {\n        \"author\": {\n          \"email\": \"crguezl@ull.edu.es\",\n          \"name\": \"Casiano Rodriguez-Leon\",\n          \"username\": \"crguezl\"\n        },\n        \"committer\": {\n          \"email\": \"crguezl@ull.edu.es\",\n          \"name\": \"Casiano Rodriguez-Leon\",\n          \"username\": \"crguezl\"\n        },\n        \"distinct\": true,\n        \"id\": \"8644e75a9cb769f219d064695eeb20e64324f263\",\n        \"message\": \"debug-workflow\",\n        \"timestamp\": \"2021-03-08T09:25:23Z\",\n        \"tree_id\": \"18fdc4d87094853a1476f5ce03e09428e65a2d80\",\n        \"url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat/commit/8644e75a9cb769f219d064695eeb20e64324f263\"\n      }\n    ],\n    \"compare\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat/compare/e2840e77a0b2...8644e75a9cb7\",\n    \"created\": false,\n    \"deleted\": false,\n    \"forced\": false,\n    \"head_commit\": {\n      \"author\": {\n        \"email\": \"crguezl@ull.edu.es\",\n        \"name\": \"Casiano Rodriguez-Leon\",\n        \"username\": \"crguezl\"\n      },\n      \"committer\": {\n        \"email\": \"crguezl@ull.edu.es\",\n        \"name\": \"Casiano Rodriguez-Leon\",\n        \"username\": \"crguezl\"\n      },\n      \"distinct\": true,\n      \"id\": \"8644e75a9cb769f219d064695eeb20e64324f263\",\n      \"message\": \"debug-workflow\",\n      \"timestamp\": \"2021-03-08T09:25:23Z\",\n      \"tree_id\": \"18fdc4d87094853a1476f5ce03e09428e65a2d80\",\n      \"url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat/commit/8644e75a9cb769f219d064695eeb20e64324f263\"\n    },\n    \"organization\": {\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/19915179?v=4\",\n      \"description\": \"\",\n      \"events_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/events\",\n      \"hooks_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/hooks\",\n      \"id\": 19915179,\n      \"issues_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/issues\",\n      \"login\": \"ULL-ESIT-DSI-1617\",\n      \"members_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/members{/member}\",\n      \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE5OTE1MTc5\",\n      \"public_members_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/public_members{/member}\",\n      \"repos_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/repos\",\n      \"url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617\"\n    },\n    \"pusher\": {\n      \"email\": \"crguezl@ull.edu.es\",\n      \"name\": \"crguezl\"\n    },\n    \"ref\": \"refs/heads/master\",\n    \"repository\": {\n      \"archive_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/{archive_format}{/ref}\",\n      \"archived\": false,\n      \"assignees_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/assignees{/user}\",\n      \"blobs_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/git/blobs{/sha}\",\n      \"branches_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/branches{/branch}\",\n      \"clone_url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat.git\",\n      \"collaborators_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/collaborators{/collaborator}\",\n      \"comments_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/comments{/number}\",\n      \"commits_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/commits{/sha}\",\n      \"compare_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/compare/{base}...{head}\",\n      \"contents_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/contents/{+path}\",\n      \"contributors_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/contributors\",\n      \"created_at\": 1506425027,\n      \"default_branch\": \"master\",\n      \"deployments_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/deployments\",\n      \"description\": \"Testing the installation and functionality of a npm module \",\n      \"disabled\": false,\n      \"downloads_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/downloads\",\n      \"events_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/events\",\n      \"fork\": false,\n      \"forks\": 1,\n      \"forks_count\": 1,\n      \"forks_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/forks\",\n      \"full_name\": \"ULL-ESIT-DSI-1617/prueba-scapegoat\",\n      \"git_commits_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/git/commits{/sha}\",\n      \"git_refs_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/git/refs{/sha}\",\n      \"git_tags_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/git/tags{/sha}\",\n      \"git_url\": \"git://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat.git\",\n      \"has_downloads\": true,\n      \"has_issues\": true,\n      \"has_pages\": false,\n      \"has_projects\": true,\n      \"has_wiki\": true,\n      \"homepage\": \"https://ull-esit-pl-1819.github.io//introduccion/tema1-introduccion-a-javascript/nodejspackages.html\",\n      \"hooks_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/hooks\",\n      \"html_url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat\",\n      \"id\": 104875770,\n      \"issue_comment_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/issues/comments{/number}\",\n      \"issue_events_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/issues/events{/number}\",\n      \"issues_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/issues{/number}\",\n      \"keys_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/keys{/key_id}\",\n      \"labels_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/labels{/name}\",\n      \"language\": \"JavaScript\",\n      \"languages_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/languages\",\n      \"license\": null,\n      \"master_branch\": \"master\",\n      \"merges_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/merges\",\n      \"milestones_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/milestones{/number}\",\n      \"mirror_url\": null,\n      \"name\": \"prueba-scapegoat\",\n      \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMDQ4NzU3NzA=\",\n      \"notifications_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/notifications{?since,all,participating}\",\n      \"open_issues\": 0,\n      \"open_issues_count\": 0,\n      \"organization\": \"ULL-ESIT-DSI-1617\",\n      \"owner\": {\n        \"avatar_url\": \"https://avatars.githubusercontent.com/u/19915179?v=4\",\n        \"email\": null,\n        \"events_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/events{/privacy}\",\n        \"followers_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/followers\",\n        \"following_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/following{/other_user}\",\n        \"gists_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/gists{/gist_id}\",\n        \"gravatar_id\": \"\",\n        \"html_url\": \"https://github.com/ULL-ESIT-DSI-1617\",\n        \"id\": 19915179,\n        \"login\": \"ULL-ESIT-DSI-1617\",\n        \"name\": \"ULL-ESIT-DSI-1617\",\n        \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE5OTE1MTc5\",\n        \"organizations_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/orgs\",\n        \"received_events_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/received_events\",\n        \"repos_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/repos\",\n        \"site_admin\": false,\n        \"starred_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/starred{/owner}{/repo}\",\n        \"subscriptions_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/subscriptions\",\n        \"type\": \"Organization\",\n        \"url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617\"\n      },\n      \"private\": false,\n      \"pulls_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/pulls{/number}\",\n      \"pushed_at\": 1615195528,\n      \"releases_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/releases{/id}\",\n      \"size\": 25,\n      \"ssh_url\": \"git@github.com:ULL-ESIT-DSI-1617/prueba-scapegoat.git\",\n      \"stargazers\": 0,\n      \"stargazers_count\": 0,\n      \"stargazers_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/stargazers\",\n      \"statuses_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/statuses/{sha}\",\n      \"subscribers_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/subscribers\",\n      \"subscription_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/subscription\",\n      \"svn_url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat\",\n      \"tags_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/tags\",\n      \"teams_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/teams\",\n      \"trees_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/git/trees{/sha}\",\n      \"updated_at\": \"2021-03-08T09:23:53Z\",\n      \"url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat\",\n      \"watchers\": 0,\n      \"watchers_count\": 0\n    },\n    \"sender\": {\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1142554?v=4\",\n      \"events_url\": \"https://api.github.com/users/crguezl/events{/privacy}\",\n      \"followers_url\": \"https://api.github.com/users/crguezl/followers\",\n      \"following_url\": \"https://api.github.com/users/crguezl/following{/other_user}\",\n      \"gists_url\": \"https://api.github.com/users/crguezl/gists{/gist_id}\",\n      \"gravatar_id\": \"\",\n      \"html_url\": \"https://github.com/crguezl\",\n      \"id\": 1142554,\n      \"login\": \"crguezl\",\n      \"node_id\": \"MDQ6VXNlcjExNDI1NTQ=\",\n      \"organizations_url\": \"https://api.github.com/users/crguezl/orgs\",\n      \"received_events_url\": \"https://api.github.com/users/crguezl/received_events\",\n      \"repos_url\": \"https://api.github.com/users/crguezl/repos\",\n      \"site_admin\": false,\n      \"starred_url\": \"https://api.github.com/users/crguezl/starred{/owner}{/repo}\",\n      \"subscriptions_url\": \"https://api.github.com/users/crguezl/subscriptions\",\n      \"type\": \"User\",\n      \"url\": \"https://api.github.com/users/crguezl\"\n    }\n  },\n  \"server_url\": \"https://github.com\",\n  \"api_url\": \"https://api.github.com\",\n  \"graphql_url\": \"https://api.github.com/graphql\",\n  \"workspace\": \"/home/runner/work/prueba-scapegoat/prueba-scapegoat\",\n  \"action\": \"run1\"\n}\n2021-03-08T09:25:40.1422120Z ##[endgroup]\n\n\nGITHUB_CONTEXT more info\n\n2021-03-08T09:25:40.8128538Z {\n2021-03-08T09:25:40.8129545Z   \"token\": \"***\",\n2021-03-08T09:25:40.8130078Z   \"job\": \"one\",\n2021-03-08T09:25:40.8130571Z   \"ref\": \"refs/heads/master\",\n2021-03-08T09:25:40.8131641Z   \"sha\": \"8644e75a9cb769f219d064695eeb20e64324f263\",\n2021-03-08T09:25:40.8133486Z   \"repository\": \"ULL-ESIT-DSI-1617/prueba-scapegoat\",\n2021-03-08T09:25:40.8134656Z   \"repository_owner\": \"ULL-ESIT-DSI-1617\",\n2021-03-08T09:25:40.8135842Z   \"repositoryUrl\": \"git://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat.git\",\n2021-03-08T09:25:40.8137175Z   \"run_id\": \"631804367\",\n2021-03-08T09:25:40.8137827Z   \"run_number\": \"2\",\n2021-03-08T09:25:40.8138591Z   \"retention_days\": \"90\",\n2021-03-08T09:25:40.8139555Z   \"actor\": \"crguezl\",\n2021-03-08T09:25:40.8140175Z   \"workflow\": \"Debugging contexts\",\n2021-03-08T09:25:40.8140861Z   \"head_ref\": \"\",\n2021-03-08T09:25:40.8141517Z   \"base_ref\": \"\",\n2021-03-08T09:25:40.8142462Z   \"event_name\": \"push\",\n2021-03-08T09:25:40.8142935Z   \"event\": {\n2021-03-08T09:25:40.8143864Z     \"after\": \"8644e75a9cb769f219d064695eeb20e64324f263\",\n2021-03-08T09:25:40.8145098Z     \"base_ref\": null,\n2021-03-08T09:25:40.8145862Z     \"before\": \"e2840e77a0b20158e5e1f1efa4790e47e457cc86\",\n2021-03-08T09:25:40.8146673Z     \"commits\": [\n2021-03-08T09:25:40.8147151Z       {\n2021-03-08T09:25:40.8147663Z         \"author\": {\n2021-03-08T09:25:40.8148250Z           \"email\": \"crguezl@ull.edu.es\",\n2021-03-08T09:25:40.8149491Z           \"name\": \"Casiano Rodriguez-Leon\",\n2021-03-08T09:25:40.8150283Z           \"username\": \"crguezl\"\n2021-03-08T09:25:40.8151007Z         },\n2021-03-08T09:25:40.8151985Z         \"committer\": {\n2021-03-08T09:25:40.8152933Z           \"email\": \"crguezl@ull.edu.es\",\n2021-03-08T09:25:40.8154310Z           \"name\": \"Casiano Rodriguez-Leon\",\n2021-03-08T09:25:40.8155145Z           \"username\": \"crguezl\"\n2021-03-08T09:25:40.8155714Z         },\n2021-03-08T09:25:40.8156179Z         \"distinct\": true,\n2021-03-08T09:25:40.8156837Z         \"id\": \"8644e75a9cb769f219d064695eeb20e64324f263\",\n2021-03-08T09:25:40.8157841Z         \"message\": \"debug-workflow\",\n2021-03-08T09:25:40.8158841Z         \"timestamp\": \"2021-03-08T09:25:23Z\",\n2021-03-08T09:25:40.8159638Z         \"tree_id\": \"18fdc4d87094853a1476f5ce03e09428e65a2d80\",\n2021-03-08T09:25:40.8161290Z         \"url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat/commit/8644e75a9cb769f219d064695eeb20e64324f263\"\n2021-03-08T09:25:40.8162283Z       }\n2021-03-08T09:25:40.8162699Z     ],\n2021-03-08T09:25:40.8163909Z     \"compare\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat/compare/e2840e77a0b2...8644e75a9cb7\",\n2021-03-08T09:25:40.8164847Z     \"created\": false,\n2021-03-08T09:25:40.8165355Z     \"deleted\": false,\n2021-03-08T09:25:40.8165950Z     \"forced\": false,\n2021-03-08T09:25:40.8166441Z     \"head_commit\": {\n2021-03-08T09:25:40.8166957Z       \"author\": {\n2021-03-08T09:25:40.8167495Z         \"email\": \"crguezl@ull.edu.es\",\n2021-03-08T09:25:40.8168396Z         \"name\": \"Casiano Rodriguez-Leon\",\n2021-03-08T09:25:40.8169056Z         \"username\": \"crguezl\"\n2021-03-08T09:25:40.8170238Z       },\n2021-03-08T09:25:40.8171224Z       \"committer\": {\n2021-03-08T09:25:40.8171801Z         \"email\": \"crguezl@ull.edu.es\",\n2021-03-08T09:25:40.8172775Z         \"name\": \"Casiano Rodriguez-Leon\",\n2021-03-08T09:25:40.8173443Z         \"username\": \"crguezl\"\n2021-03-08T09:25:40.8173975Z       },\n2021-03-08T09:25:40.8174432Z       \"distinct\": true,\n2021-03-08T09:25:40.8175087Z       \"id\": \"8644e75a9cb769f219d064695eeb20e64324f263\",\n2021-03-08T09:25:40.8176059Z       \"message\": \"debug-workflow\",\n2021-03-08T09:25:40.8177085Z       \"timestamp\": \"2021-03-08T09:25:23Z\",\n2021-03-08T09:25:40.8178414Z       \"tree_id\": \"18fdc4d87094853a1476f5ce03e09428e65a2d80\",\n2021-03-08T09:25:40.8180276Z       \"url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat/commit/8644e75a9cb769f219d064695eeb20e64324f263\"\n2021-03-08T09:25:40.8181267Z     },\n2021-03-08T09:25:40.8181736Z     \"organization\": {\n2021-03-08T09:25:40.8182655Z       \"avatar_url\": \"https://avatars.githubusercontent.com/u/19915179?v=4\",\n2021-03-08T09:25:40.8184144Z       \"description\": \"\",\n2021-03-08T09:25:40.8185759Z       \"events_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/events\",\n2021-03-08T09:25:40.8186997Z       \"hooks_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/hooks\",\n2021-03-08T09:25:40.8187763Z       \"id\": 19915179,\n2021-03-08T09:25:40.8188755Z       \"issues_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/issues\",\n2021-03-08T09:25:40.8189987Z       \"login\": \"ULL-ESIT-DSI-1617\",\n2021-03-08T09:25:40.8191804Z       \"members_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/members{/member}\",\n2021-03-08T09:25:40.8193418Z       \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE5OTE1MTc5\",\n2021-03-08T09:25:40.8194833Z       \"public_members_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/public_members{/member}\",\n2021-03-08T09:25:40.8196422Z       \"repos_url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617/repos\",\n2021-03-08T09:25:40.8198663Z       \"url\": \"https://api.github.com/orgs/ULL-ESIT-DSI-1617\"\n2021-03-08T09:25:40.8200613Z     },\n2021-03-08T09:25:40.8201212Z     \"pusher\": {\n2021-03-08T09:25:40.8201860Z       \"email\": \"crguezl@ull.edu.es\",\n2021-03-08T09:25:40.8202842Z       \"name\": \"crguezl\"\n2021-03-08T09:25:40.8203355Z     },\n2021-03-08T09:25:40.8203891Z     \"ref\": \"refs/heads/master\",\n2021-03-08T09:25:40.8204436Z     \"repository\": {\n2021-03-08T09:25:40.8205999Z       \"archive_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/{archive_format}{/ref}\",\n2021-03-08T09:25:40.8207199Z       \"archived\": false,\n2021-03-08T09:25:40.8208416Z       \"assignees_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/assignees{/user}\",\n2021-03-08T09:25:40.8210008Z       \"blobs_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/git/blobs{/sha}\",\n2021-03-08T09:25:40.8211736Z       \"branches_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/branches{/branch}\",\n2021-03-08T09:25:40.8213692Z       \"clone_url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat.git\",\n2021-03-08T09:25:40.8215336Z       \"collaborators_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/collaborators{/collaborator}\",\n2021-03-08T09:25:40.8217103Z       \"comments_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/comments{/number}\",\n2021-03-08T09:25:40.8218707Z       \"commits_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/commits{/sha}\",\n2021-03-08T09:25:40.8220860Z       \"compare_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/compare/{base}...{head}\",\n2021-03-08T09:25:40.8222471Z       \"contents_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/contents/{+path}\",\n2021-03-08T09:25:40.8224868Z       \"contributors_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/contributors\",\n2021-03-08T09:25:40.8225999Z       \"created_at\": 1506425027,\n2021-03-08T09:25:40.8226593Z       \"default_branch\": \"master\",\n2021-03-08T09:25:40.8227945Z       \"deployments_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/deployments\",\n2021-03-08T09:25:40.8229554Z       \"description\": \"Testing the installation and functionality of a npm module \",\n2021-03-08T09:25:40.8230351Z       \"disabled\": false,\n2021-03-08T09:25:40.8231780Z       \"downloads_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/downloads\",\n2021-03-08T09:25:40.8235047Z       \"events_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/events\",\n2021-03-08T09:25:40.8235985Z       \"fork\": false,\n2021-03-08T09:25:40.8236780Z       \"forks\": 1,\n2021-03-08T09:25:40.8237986Z       \"forks_count\": 1,\n2021-03-08T09:25:40.8239320Z       \"forks_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/forks\",\n2021-03-08T09:25:40.8240632Z       \"full_name\": \"ULL-ESIT-DSI-1617/prueba-scapegoat\",\n2021-03-08T09:25:40.8242060Z       \"git_commits_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/git/commits{/sha}\",\n2021-03-08T09:25:40.8244396Z       \"git_refs_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/git/refs{/sha}\",\n2021-03-08T09:25:40.8246300Z       \"git_tags_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/git/tags{/sha}\",\n2021-03-08T09:25:40.8248480Z       \"git_url\": \"git://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat.git\",\n2021-03-08T09:25:40.8249481Z       \"has_downloads\": true,\n2021-03-08T09:25:40.8250049Z       \"has_issues\": true,\n2021-03-08T09:25:40.8250700Z       \"has_pages\": false,\n2021-03-08T09:25:40.8251433Z       \"has_projects\": true,\n2021-03-08T09:25:40.8252387Z       \"has_wiki\": true,\n2021-03-08T09:25:40.8254362Z       \"homepage\": \"https://ull-esit-pl-1819.github.io//introduccion/tema1-introduccion-a-javascript/nodejspackages.html\",\n2021-03-08T09:25:40.8256431Z       \"hooks_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/hooks\",\n2021-03-08T09:25:40.8258317Z       \"html_url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat\",\n2021-03-08T09:25:40.8259471Z       \"id\": 104875770,\n2021-03-08T09:25:40.8261259Z       \"issue_comment_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/issues/comments{/number}\",\n2021-03-08T09:25:40.8263117Z       \"issue_events_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/issues/events{/number}\",\n2021-03-08T09:25:40.8264770Z       \"issues_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/issues{/number}\",\n2021-03-08T09:25:40.8266277Z       \"keys_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/keys{/key_id}\",\n2021-03-08T09:25:40.8267936Z       \"labels_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/labels{/name}\",\n2021-03-08T09:25:40.8268873Z       \"language\": \"JavaScript\",\n2021-03-08T09:25:40.8270114Z       \"languages_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/languages\",\n2021-03-08T09:25:40.8271076Z       \"license\": null,\n2021-03-08T09:25:40.8271669Z       \"master_branch\": \"master\",\n2021-03-08T09:25:40.8273211Z       \"merges_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/merges\",\n2021-03-08T09:25:40.8275647Z       \"milestones_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/milestones{/number}\",\n2021-03-08T09:25:40.8276653Z       \"mirror_url\": null,\n2021-03-08T09:25:40.8277461Z       \"name\": \"prueba-scapegoat\",\n2021-03-08T09:25:40.8278543Z       \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMDQ4NzU3NzA=\",\n2021-03-08T09:25:40.8281182Z       \"notifications_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/notifications{?since,all,participating}\",\n2021-03-08T09:25:40.8282366Z       \"open_issues\": 0,\n2021-03-08T09:25:40.8282879Z       \"open_issues_count\": 0,\n2021-03-08T09:25:40.8283755Z       \"organization\": \"ULL-ESIT-DSI-1617\",\n2021-03-08T09:25:40.8284351Z       \"owner\": {\n2021-03-08T09:25:40.8285280Z         \"avatar_url\": \"https://avatars.githubusercontent.com/u/19915179?v=4\",\n2021-03-08T09:25:40.8286146Z         \"email\": null,\n2021-03-08T09:25:40.8287207Z         \"events_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/events{/privacy}\",\n2021-03-08T09:25:40.8288612Z         \"followers_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/followers\",\n2021-03-08T09:25:40.8290003Z         \"following_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/following{/other_user}\",\n2021-03-08T09:25:40.8291399Z         \"gists_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/gists{/gist_id}\",\n2021-03-08T09:25:40.8292214Z         \"gravatar_id\": \"\",\n2021-03-08T09:25:40.8293183Z         \"html_url\": \"https://github.com/ULL-ESIT-DSI-1617\",\n2021-03-08T09:25:40.8293987Z         \"id\": 19915179,\n2021-03-08T09:25:40.8295366Z         \"login\": \"ULL-ESIT-DSI-1617\",\n2021-03-08T09:25:40.8296242Z         \"name\": \"ULL-ESIT-DSI-1617\",\n2021-03-08T09:25:40.8297135Z         \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjE5OTE1MTc5\",\n2021-03-08T09:25:40.8298609Z         \"organizations_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/orgs\",\n2021-03-08T09:25:40.8301057Z         \"received_events_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/received_events\",\n2021-03-08T09:25:40.8302644Z         \"repos_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/repos\",\n2021-03-08T09:25:40.8303785Z         \"site_admin\": false,\n2021-03-08T09:25:40.8304931Z         \"starred_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/starred{/owner}{/repo}\",\n2021-03-08T09:25:40.8306412Z         \"subscriptions_url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617/subscriptions\",\n2021-03-08T09:25:40.8307916Z         \"type\": \"Organization\",\n2021-03-08T09:25:40.8309116Z         \"url\": \"https://api.github.com/users/ULL-ESIT-DSI-1617\"\n2021-03-08T09:25:40.8309802Z       },\n2021-03-08T09:25:40.8310531Z       \"private\": false,\n2021-03-08T09:25:40.8311908Z       \"pulls_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/pulls{/number}\",\n2021-03-08T09:25:40.8312935Z       \"pushed_at\": 1615195528,\n2021-03-08T09:25:40.8314249Z       \"releases_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/releases{/id}\",\n2021-03-08T09:25:40.8315249Z       \"size\": 25,\n2021-03-08T09:25:40.8316259Z       \"ssh_url\": \"git@github.com:ULL-ESIT-DSI-1617/prueba-scapegoat.git\",\n2021-03-08T09:25:40.8317123Z       \"stargazers\": 0,\n2021-03-08T09:25:40.8317696Z       \"stargazers_count\": 0,\n2021-03-08T09:25:40.8318921Z       \"stargazers_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/stargazers\",\n2021-03-08T09:25:40.8320589Z       \"statuses_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/statuses/{sha}\",\n2021-03-08T09:25:40.8322228Z       \"subscribers_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/subscribers\",\n2021-03-08T09:25:40.8324269Z       \"subscription_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/subscription\",\n2021-03-08T09:25:40.8325885Z       \"svn_url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat\",\n2021-03-08T09:25:40.8327375Z       \"tags_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/tags\",\n2021-03-08T09:25:40.8329018Z       \"teams_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/teams\",\n2021-03-08T09:25:40.8330754Z       \"trees_url\": \"https://api.github.com/repos/ULL-ESIT-DSI-1617/prueba-scapegoat/git/trees{/sha}\",\n2021-03-08T09:25:40.8331871Z       \"updated_at\": \"2021-03-08T09:23:53Z\",\n2021-03-08T09:25:40.8332935Z       \"url\": \"https://github.com/ULL-ESIT-DSI-1617/prueba-scapegoat\",\n2021-03-08T09:25:40.8333721Z       \"watchers\": 0,\n2021-03-08T09:25:40.8334272Z       \"watchers_count\": 0\n2021-03-08T09:25:40.8334753Z     },\n2021-03-08T09:25:40.8335419Z     \"sender\": {\n2021-03-08T09:25:40.8336496Z       \"avatar_url\": \"https://avatars.githubusercontent.com/u/1142554?v=4\",\n2021-03-08T09:25:40.8337646Z       \"events_url\": \"https://api.github.com/users/crguezl/events{/privacy}\",\n2021-03-08T09:25:40.8338690Z       \"followers_url\": \"https://api.github.com/users/crguezl/followers\",\n2021-03-08T09:25:40.8339879Z       \"following_url\": \"https://api.github.com/users/crguezl/following{/other_user}\",\n2021-03-08T09:25:40.8340938Z       \"gists_url\": \"https://api.github.com/users/crguezl/gists{/gist_id}\",\n2021-03-08T09:25:40.8341651Z       \"gravatar_id\": \"\",\n2021-03-08T09:25:40.8342365Z       \"html_url\": \"https://github.com/crguezl\",\n2021-03-08T09:25:40.8343119Z       \"id\": 1142554,\n2021-03-08T09:25:40.8343891Z       \"login\": \"crguezl\",\n2021-03-08T09:25:40.8344533Z       \"node_id\": \"MDQ6VXNlcjExNDI1NTQ=\",\n2021-03-08T09:25:40.8345740Z       \"organizations_url\": \"https://api.github.com/users/crguezl/orgs\",\n2021-03-08T09:25:40.8347242Z       \"received_events_url\": \"https://api.github.com/users/crguezl/received_events\",\n2021-03-08T09:25:40.8348784Z       \"repos_url\": \"https://api.github.com/users/crguezl/repos\",\n2021-03-08T09:25:40.8349571Z       \"site_admin\": false,\n2021-03-08T09:25:40.8350485Z       \"starred_url\": \"https://api.github.com/users/crguezl/starred{/owner}{/repo}\",\n2021-03-08T09:25:40.8351790Z       \"subscriptions_url\": \"https://api.github.com/users/crguezl/subscriptions\",\n2021-03-08T09:25:40.8352784Z       \"type\": \"User\",\n2021-03-08T09:25:40.8353423Z       \"url\": \"https://api.github.com/users/crguezl\"\n2021-03-08T09:25:40.8354450Z     }\n2021-03-08T09:25:40.8356248Z   },\n2021-03-08T09:25:40.8356897Z   \"server_url\": \"https://github.com\",\n2021-03-08T09:25:40.8357888Z   \"api_url\": \"https://api.github.com\",\n2021-03-08T09:25:40.8359061Z   \"graphql_url\": \"https://api.github.com/graphql\",\n2021-03-08T09:25:40.8360473Z   \"workspace\": \"/home/runner/work/prueba-scapegoat/prueba-scapegoat\",\n2021-03-08T09:25:40.8361334Z   \"action\": \"run1\"\n2021-03-08T09:25:40.8361783Z }\n\n\nJOB_CONTEXT\n\n2021-03-08T09:25:40.8432072Z ##[group]Run echo \"$JOB_CONTEXT\"\n2021-03-08T09:25:40.8432958Z \u001b[36;1mecho \"$JOB_CONTEXT\"\u001b[0m\n2021-03-08T09:25:40.8479316Z shell: /bin/bash -e {0}\n2021-03-08T09:25:40.8479858Z env:\n2021-03-08T09:25:40.8480380Z   JOB_CONTEXT: {\n  \"status\": \"success\"\n}\n2021-03-08T09:25:40.8480948Z ##[endgroup]\n2021-03-08T09:25:40.8554693Z {\n2021-03-08T09:25:40.8556937Z   \"status\": \"success\"\n2021-03-08T09:25:40.8559309Z }\n\n\nSTEPS_CONTEXT\n\n2021-03-08T09:25:40.8592514Z ##[group]Run echo \"$STEPS_CONTEXT\"\n2021-03-08T09:25:40.8593239Z \u001b[36;1mecho \"$STEPS_CONTEXT\"\u001b[0m\n2021-03-08T09:25:40.8637337Z shell: /bin/bash -e {0}\n2021-03-08T09:25:40.8638076Z env:\n2021-03-08T09:25:40.8638596Z   STEPS_CONTEXT: {}\n2021-03-08T09:25:40.8639285Z ##[endgroup]\n2021-03-08T09:25:40.8770017Z {}\n\n\nRUNNER_CONTEXT\n\n2021-03-08T09:25:40.8813050Z ##[group]Run echo \"$RUNNER_CONTEXT\"\n2021-03-08T09:25:40.8815153Z \u001b[36;1mecho \"$RUNNER_CONTEXT\"\u001b[0m\n2021-03-08T09:25:40.9096040Z shell: /bin/bash -e {0}\n2021-03-08T09:25:40.9096514Z env:\n2021-03-08T09:25:40.9097644Z   RUNNER_CONTEXT: {\n  \"os\": \"Linux\",\n  \"tool_cache\": \"/opt/hostedtoolcache\",\n  \"temp\": \"/home/runner/work/_temp\",\n  \"workspace\": \"/home/runner/work/prueba-scapegoat\"\n}\n2021-03-08T09:25:40.9098613Z ##[endgroup]\n2021-03-08T09:25:40.9175581Z {\n2021-03-08T09:25:40.9176270Z   \"os\": \"Linux\",\n2021-03-08T09:25:40.9177347Z   \"tool_cache\": \"/opt/hostedtoolcache\",\n2021-03-08T09:25:40.9179327Z   \"temp\": \"/home/runner/work/_temp\",\n2021-03-08T09:25:40.9181556Z   \"workspace\": \"/home/runner/work/prueba-scapegoat\"\n2021-03-08T09:25:40.9182379Z }\n\n\nSTRATEGY_CONTEXT\n\n2021-03-08T09:25:40.9215918Z ##[group]Run echo \"$STRATEGY_CONTEXT\"\n2021-03-08T09:25:40.9216786Z \u001b[36;1mecho \"$STRATEGY_CONTEXT\"\u001b[0m\n2021-03-08T09:25:40.9262542Z shell: /bin/bash -e {0}\n2021-03-08T09:25:40.9263028Z env:\n2021-03-08T09:25:40.9263761Z   STRATEGY_CONTEXT: {\n  \"fail-fast\": true,\n  \"job-index\": 0,\n  \"job-total\": 1,\n  \"max-parallel\": 1\n}\n2021-03-08T09:25:40.9264908Z ##[endgroup]\n2021-03-08T09:25:41.7851009Z {\n2021-03-08T09:25:41.7852026Z   \"fail-fast\": true,\n2021-03-08T09:25:41.7852610Z   \"job-index\": 0,\n2021-03-08T09:25:41.7853630Z   \"job-total\": 1,\n2021-03-08T09:25:41.7854202Z   \"max-parallel\": 1\n2021-03-08T09:25:41.7854582Z }\n\n\nMATRIX_CONTEXT\n\n2021-03-08T09:25:41.7886176Z ##[group]Run echo \"$MATRIX_CONTEXT\"\n2021-03-08T09:25:41.7888342Z \u001b[36;1mecho \"$MATRIX_CONTEXT\"\u001b[0m\n2021-03-08T09:25:41.7931615Z shell: /bin/bash -e {0}\n2021-03-08T09:25:41.7931997Z env:\n2021-03-08T09:25:41.7932444Z   MATRIX_CONTEXT: null\n2021-03-08T09:25:41.7932835Z ##[endgroup]\n2021-03-08T09:25:41.7996260Z null\n2021-03-08T09:25:41.8010618Z Cleaning up orphan processes\n\n",
    "url": "/assets/temas/introduccion-a-javascript/action-files/debug-action-log.html"
  },
  
  {
    "title": "The Open Closed Principle and the Strategy Pattern",
    "excerpt": "\n",
    "content": "Code Smells\n\nDefinición de Code Smell de la Wikipedia:\n\nAccording to Martin Fowler, “a code smell is a surface indication that usually corresponds to a deeper problem in the system”.\n\nSmells are certain structures in the code that indicate violation of fundamental design principles and negatively impact design quality.\n\nCode smells are usually not bugs. They are not technically incorrect and do not currently prevent the program from functioning. Instead, they indicate weaknesses in design that may be slowing down development or increasing the risk of bugs or failures in the future.\n\nApplication-level smells:\n\n  Duplicated code: identical or very similar code exists in more than one location.\n  Contrived complexity: forced usage of overcomplicated design patterns where simpler design would suffice.\n\n\nClass-level smells:\n\n  Large class: a class that has grown too large. See God object.\n  Feature envy: a class that uses methods of another class excessively.\n  Inappropriate intimacy: a class that has dependencies on implementation details of another class.\n  Refused bequest: a class that overrides a method of a base class in such a way that the contract of the base class is not honored by the derived class. See Liskov substitution principle.\n  Lazy class / Freeloader: a class that does too little.\n  Excessive use of literals: these should be coded as named constants, to improve readability and to avoid programming errors. Additionally, literals can and should be externalized into resource files/scripts where possible, to facilitate localization of software if it is intended to be deployed in different regions.\n  Cyclomatic complexity: too many branches or loops; this may indicate a function needs to be broken up into smaller functions, or that it has potential for simplification.\n  Downcasting: a type cast which breaks the abstraction model; the abstraction may have to be refactored or eliminated.\n  Orphan Variable or Constant class: a class that typically has a collection of constants which belong elsewhere (typically a problem when using a Constants class ) where those constants should be owned by one of the other member classes.\n\n\nMethod-level smells:\n\n\n  Too many parameters: a long list of parameters is hard to read, and makes calling and testing the function complicated. It may indicate that the purpose of the function is ill-conceived and that the code should be refactored so responsibility is assigned in a more clean-cut way.\n  Long method: a method, function, or procedure that has grown too large.\n  Excessively long identifiers: in particular, the use of naming conventions to provide disambiguation that should be implicit in the software architecture.\n  Excessively short identifiers: the name of a variable should reflect its function unless the function is obvious.\n  Excessive return of data: a function or method that returns more than what each of its callers needs.\n\n\nSwitch Smell\n\n\n  El uso de un switch es a veces un punto débil: si introducimos nuevas casos deberemos modificar el código de la clase original en la que está el switch introduciendo un nuevo case.\n\n\nViola el principio Open/Closed.\n\nEl principio Open/Closed\n\n\n  “software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification”;\nthat is, such an entity can allow its behaviour to be extended without modifying its source code.\n\n\nEjemplo de Violación del Principio Open/Closed\n\nEl diseño inicial del lenguaje Egg viola el Principio Open/Close:\n\n[~/.../PLgrado/eloquentjsegg(master)]$ sed -ne '/fun.*evaluate/,/^}/p'  lib/eggvm.js\n\n\nfunction evaluate(expr, env) {\n  switch(expr.type) {\n    case 'value': return expr.value;\n    case 'word':\n      if (expr.name in env) {\n        return env[expr.name];\n      } else {\n        throw new ReferenceError(`Undefined variable: ${expr.name}`);\n      }\n    case 'apply':\n      if (expr.operator.type == 'word' &amp;&amp; expr.operator.name in specialForms) {\n        return specialForms[expr.operator.name](expr.args, env);\n      }\n      let op = evaluate(expr.operator, env);\n      if (typeof op != \"function\") {\n        throw new TypeError('Applying a non-function');\n      }\n      return op(...expr.args.map((arg) =&gt; evaluate(arg, env)));\n  }\n}\n\n\nDesign patterns\n\nA design pattern is a general, reusable solution to a commonly occurring problem.\n\nIt is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations. Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system.\n\nDesign patterns may be viewed as a structured approach to computer programming intermediate between the levels of\n\n  a programming paradigm and\n  a concrete algorithm.\n\n\nStrategy Pattern\n\nLa solución para eliminar el Switch Smell es usar el strategy design pattern.\n\nThe basic idea  of the strategy design pattern is to delegate tasks to encapsulated algorithms which are interchangable at runtime.\n\nIn the Strategy pattern we have an object (the context) that is trying to get something done. But to get that thing done, we need to supply the context with a second object, called the strategy, that helps￼ to get the thing done.\n\n\n  Define a family of objects which all do the same thing\n  Ensure the family of objects share the same interface so that they are interchangable.\n\n\nOtro ejemplo, también de Elijah Manor se encuentra en el artículo Switching to the Strategy Pattern in JavaScript.\n\nEliminate JavaScript Code Smells\n\nVea el Vídeo  de Elijah Manor.\n\nPresta especial atención al code smell Switch Statement Smell desde el minuto 11:37 al 29:15.\n\n{% include video provider=”youtube” id=”JVlfj7mQZPo” %}\n\nPueden encontrar las trasparencias de la presentación en http://elijahmanor.com/talks/js-smells/#/.\n\nExample of the strategy Pattern: HTTP file server fron Eloquent JS\n\n\n  Repo ULL-MII-SYTWS-1920/eloquent-javascript-exercises solution 20_3_public_space/server.js\n\n\n[~/.../chapter20-nodejs/juanIrache-20_3_public_space(master)]$ pwd -P\n/Users/casiano/local/src/javascript/eloquent-javascript-3/juanIrache-solutions/20_3_public_space\n\n\nconst { createServer } = require('http');\n\nconst methods = Object.create(null);\n\ncreateServer((request, response) =&gt; {\n  let handler = methods[request.method] || notAllowed;\n  console.log(`method= ${request.method} url=${request.url}`);\n  handler(request)\n    .catch(error =&gt; {\n      if (error.status != null) return error;\n      return { body: String(error), status: 500 };\n    })\n    .then(({ body, status = 200, type = 'text/plain' }) =&gt; {\n      response.setHeader('Access-Control-Allow-Origin', '*');\n      response.setHeader('Access-Control-Allow-Methods', 'PUT, GET, OPTIONS, DELETE, MKCOL');\n      response.writeHead(status, { 'Content-Type': type });\n      if (body &amp;&amp; body.pipe) body.pipe(response);\n      else response.end(body);\n    });\n}).listen(8000);\n\nasync function notAllowed(request) {\n  return {\n    status: 405,\n    body: `Method ${request.method} not allowed.`\n  };\n}\n\nconst { parse } = require('url');\nconst { resolve, sep } = require('path');\n\nconst baseDirectory = process.cwd();\n\nfunction urlPath(url) {\n  let { pathname } = parse(url);\n  let path = resolve(decodeURIComponent(pathname).slice(1));\n  if (path != baseDirectory &amp;&amp; !path.startsWith(baseDirectory + sep)) {\n    throw { status: 403, body: 'Forbidden' };\n  }\n  return path;\n}\n\nconst { createReadStream } = require('fs');\nconst { stat, readdir, mkdir } = require('fs').promises;\nconst mime = require('mime');\n\nmethods.GET = async function(request) {\n  let path = urlPath(request.url);\n  let stats;\n  try {\n    stats = await stat(path);\n  } catch (error) {\n    if (error.code != 'ENOENT') throw error;\n    else return { status: 404, body: 'File not found' };\n  }\n  if (stats.isDirectory()) {\n    return { body: (await readdir(path)).join('\\n') };\n  } else {\n    return { body: createReadStream(path), type: mime.getType(path) };\n  }\n};\n\nconst { rmdir, unlink } = require('fs').promises;\n\nmethods.DELETE = async function(request) {\n  let path = urlPath(request.url);\n  let stats;\n  try {\n    stats = await stat(path);\n  } catch (error) {\n    if (error.code != 'ENOENT') throw error;\n    else return { status: 204 };\n  }\n  if (stats.isDirectory()) await rmdir(path);\n  else await unlink(path);\n  return { status: 204 };\n};\n\nconst { createWriteStream } = require('fs');\n\nfunction pipeStream(from, to) {\n  return new Promise((resolve, reject) =&gt; {\n    from.on('error', reject);\n    to.on('error', reject);\n    to.on('finish', resolve);\n    from.pipe(to);\n  });\n}\n\nmethods.PUT = async function(request) {\n  let path = urlPath(request.url);\n  await pipeStream(request, createWriteStream(path));\n  return { status: 200, body: path };\n};\n\nmethods.MKCOL = async function(request) {\n  let path = urlPath(request.url);\n  let stats;\n  try {\n    stats = await stat(path);\n  } catch (error) {\n    if (error.code != \"ENOENT\") throw error;\n    await mkdir(path);\n    return {status: 204};\n  }\n  if (stats.isDirectory()) return {status: 204};\n  else return {status: 400, body: \"Not a directory\"};\n};\n\nmethods.OPTIONS = async function(request) {\n  return { status: 204 };\n};\n\n\nEjemplo: OOP Temperature Converter Removing Switch Smell\n\nULL-ESIT-GRADOII-DSI/temperature-oop-noswitch\n\nReferencias\n\n\n  Apuntes del curso 15/16: Code Smells/Código Hediondo\n  Apuntes del curso 16/17: Patrones de Diseño\n  Apuntes del curso 15/16: Eliminando Switch Smell\n  Apuntes del curso 16/17: Strategy Pattern\n  Apuntes del curso 16/17: Práctica: Evaluar Strategy Pattern\n  Apuntes del curso 16/17: Práctica: Creación de Paquetes NPM y Strategy Pattern\n  JSHint\n\n",
    "url": "/assets/temas/introduccion-a-javascript/design.html"
  },
  
  {
    "title": "Docker",
    "excerpt": "\n",
    "content": "Tutorial. Getting Started\n\n{% include video provider=”youtube” id=”iqqDU2crIEQ” %}\n\n\n  \n    video\n  \n  \n    Getting Started with Docker\n  \n\n\nSample Application\n\nFor the rest of this tutorial, we will be working with a simple todo list manager that is running in Node.js. If you’re not familiar with Node.js, don’t worry. No real JavaScript experience is needed.\n\n\n  Docker Docs: Sample application\n  Repo docker/getting-started\n  The folder with this app\n\n\nNode.js Docker Tutorial\n\nThe Node.js getting started guide teaches you how to create a containerized Node.js application using Docker. In this guide, you’ll learn how to:\n\n\n  Create a simple Node.js application\n  Create a new Dockerfile which contains instructions required to build a Node.js image\n  Run the newly built image as a container\n  Set up a local development environment to connect a database to the container\n  Use Docker Compose to run the Node.js application\n  Configure a CI/CD pipeline for your application using GitHub Actions.\n  After completing the Node.js getting started modules, you should be able to containerize your own Node.js application based on the examples and instructions provided in this guide.\n\n\nThe Node.js Docker Tutorial\n\nUsing Jekyll with Docker\n\n{% include jekyll-with-docker.md %}\n\nReferences\n\n  docker/getting-started en GitHub\n  docker/getting-started en Docker\n  Demystifying Containers - Part I: Kernel Space medium blog\n  Containers From Scratch An amzing intro to Containers  by Liz Rice in GOTO 2018\n\n",
    "url": "/assets/temas/introduccion-a-javascript/docker.html"
  },
  
  {
    "title": "Documenting  JavaScript Programs",
    "excerpt": "\n",
    "content": "{%  include documentation-guide.md  %}\n\nReferences\n\nDocumentación.js\n\n\n  Véase documentation.js,\n  documentation.js: User’s Guide\n  documentation.js: Getting Started\n\n\nExample: ULL-ESIT-DSI-1617/scapegoat\n\n\n  https://github.com/ULL-ESIT-DSI-1617/scapegoat\n  https://ull-esit-dsi-1617.github.io/scapegoat/\n\n\nJSDoc\n\n\n  jsdoc npm package,\n  JSDoc format: Wikipedia\n  An introduction to JSDoc\n  Book Speaking JavaScript: An In-Depth Guide for Programmers by Dr. Axel Rauschmayer: Chapter 29. JSDoc: Generating API Documentation\n  Getting Started with JSDoc 3\n\n\nDocco\n\n\n  docco\n\n\nHow to Make Man pages\n\n\n  Creating Man Pages in Markdown with Ronn\n  rtomayko/ronn\n  How to add man pages to your npm package\n\n",
    "url": "/assets/temas/introduccion-a-javascript/documentation.html"
  },
  
  {
    "title": "JavaScript and The Browser",
    "excerpt": "\n",
    "content": "\n  Eloquent JS: JavaScript and the Browser\n\n\nThe DOM\n\njavascript.info: Document\n\n\n  https://javascript.info/document: DOM\n    \n      https://javascript.info/loading: Document and resource loading\n      https://javascript.info/selection-range: Selection and Range\n      https://javascript.info/mutation-observer\n      JavaScript and CSS: Coordinates\n    \n  \n\n\n\n\nEloquent JS: The Document Object Model\n\n\n  Eloquent JS. Chapter13: The Document Object Model\n    \n      Repository ULL-ESIT-MII-CA-1718/ejs-chapter13-DOM-examples with examples for Chapter13: The Document Object Model\n      Repo ULL-ESIT-MII-CA-1718/the-document-object-model-KevMCh)\n    \n  \n\n\nEjercicios del DOM\n\n\n  Ejercicios del DOM\n\n\nCapítulo. Events\n\n\n  https://javascript.info/events: Events\n  Eloquent JS: Handling Events\n\n\nCapítulo. Form and Form Fields\n\n\n  https://javascript.info/forms-controls: Forms, controls\n  Eloquent JS: Forms and Form Fields\n    \n      Eloquent JS:  Forms and Form Fields\n      Repo de Ejemplo del Capítulo\n      Repo ULL-ESIT-MII-CA-1718/forms-and-form-fields-KevMCh\n    \n  \n  Developer Moxilla. Sending forms through JavaScript\n    \n      Using FormData bound to a form element\n    \n  \n\n\n",
    "url": "/assets/temas/introduccion-a-javascript/dom.html"
  },
  
  {
    "title": "Módulos en ECMA6",
    "excerpt": "\n",
    "content": "\n  Eloquent JS: Modules\n  Book: Understanding ECMAScript 6. Chapter 13. Encapsulating Code With Modules\n    \n      What are Modules?\n      Basic Exporting\n      Basic Importing\n      Renaming Exports and Imports\n      Default Values in Modules\n      Re-exporting a Binding\n      Importing Without Bindings\n      Loading Modules\n      Summary\n    \n  \n  ES6 Modules in Depth by Nicolás Bevacqua Sep 25th, 2015\n  Exploring ES6 by Dr. Axel Rauschmayer. Capítulo: 16. Modules\n  Exploring ES6 by Dr. Axel Rauschmayer. Sección 4.18 From CommonJS modules to ES6 modules\n  ECMAScript modules in browsers by Jake Archibald\n  Using ES6 modules natively in Node.js\n  Ejemplos en ULL-ESIT-MII-CA-1718/ecma6-modules-examples\n  Véase un ejemplo en la implementación del proyecto “Electronic Life” en la rama modules del repo ULL-ESIT-MII-CA-1718/electronic-life\n\n",
    "url": "/assets/temas/introduccion-a-javascript/ecma6-modules.html"
  },
  
  {
    "title": "Editors",
    "excerpt": "\n",
    "content": "Visual Studio Code\n\n\n  Aprendiendo a usar VSCode\n\n\nGitPod\n\n\n  Aprendiendo a usar GitPod\n\n\nStackEdit\n\n\n  Aprendiendo a usar StackEdit\n\n\nAtom\n\n\n  Vídeo del profesor explicando como usar git y GitHub con Atom\n\n\nHerramientas Útiles\n\nASCIIFlow\n\n\n  http://asciiflow.com/ Aplicación Web que nos permite dibujar aprovechando los caractéres\n\n\n",
    "url": "/assets/temas/introduccion-a-javascript/editors.html"
  },
  
  {
    "title": "Egg Proposed Syntax",
    "excerpt": "\n",
    "content": "expression: STRING\n          | NUMBER\n          | WORD apply \n\napply: /* vacio */\n     | '(' (expression ',')* expression? ')' apply\n\n\nToken definitions\n\nWHITES = /(\\s|[#;].*|\\/\\*(.|\\n)*?\\*\\/)*/;\nSTRING = /\"((?:[^\"\\\\]|\\\\.)*)\"/;\nNUMBER = /([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)/;\nWORD   = /([^\\s(),\"]+)/;\n\n",
    "url": "/assets/temas/syntax-analysis/analisis-descendente-predictivo-recursivo/egg-grammar.html"
  },
  
  {
    "title": "El Lenguaje Egg",
    "excerpt": "\n",
    "content": "En este capítulo introduciremos el Análisis Sintactico Descendente Recursivo Predictivo\npara ello vamos a seguir el capítulo 12 A Programming Language de EJS:\n\n\n  Eloquent JS. Chapter 12. Project: A Programming Language\n\n\nEn este repo encontrará una versión mejorada del procesador descrito en el capítulo:\n\n\n  Repo ULL-ESIT-PL-1617/egg\n  ULL-ESIT-PL-1617/egg as an npm module\n    \n      Gist to check the npm module\n    \n  \n\n\nVamos a realizar múltiples prácticas sobre el lenguaje descrito en Eloquent JS. Chapter 12. Project: A Programming Language.\n\nEsta es la primera práctica\n\n\n  \n    Descripción de la Práctica egg-0\n  \n  \n    Vídeo del profesor: Programando un bucle REPL para el lenguaje Egg\n  \n\n\nEsta referencia puede ayudar sobre este tema:\n\n\n  \n    Build a JavaScript Command Line Interface (CLI) with Node.js Tutorial at SitePoint\n  \n  \n    Vim Syntax Higlighting for Egg by David Afonso (dibad)\n  \n\n\nInheritance and Scopes in Egg\n\n\n  inheritance-and-scopes-in-egg\n\n\nMetodología  de Trabajo\n\n{% include temas/syntax-analysis/metodologia-para-las-practicas-egg.md %}\n\nRecursos para el Profesor\n\n\n  Directorios y Ramas\n\n",
    "url": "/assets/temas/syntax-analysis/analisis-descendente-predictivo-recursivo/egg.html"
  },
  
  {
    "title": "Ejercicio: Gramática de la versión Inicial de Egg",
    "excerpt": "\n",
    "content": "En este ejercicio te propongo un proceso inverso.\nPartiendo del código\nque está en la rama inicial de este repo,\nsabiendo que el algoritmo de análisis es un PDR,\nintenta describir formalmente la gramática\nque acepta.\n\nEste es el código inicial implicado:\n\nfunction parseExpression(program) {\n  program = skipSpace(program);\n  var match, expr;\n\n  if (match = /^\"([^\"]*)\"/.exec(program)) {\n    expr = {type: \"value\", value: match[1]};\n  } else if (match = /^\\d+\\b/.exec(program)) {\n    expr = {type: \"value\", value: Number(match[0])};\n  } else if (match = /^[^\\s(),\"]+/.exec(program)) {\n    expr = {type: \"word\", name: match[0]};\n  } else {\n    throw new SyntaxError(`Unexpect syntax: ${program}`);\n  }\n\n  return parseApply(expr, program.slice(match[0].length));\n}\n\nfunction skipSpace(string) {\n  return string.slice(/^(\\s|#.*)*/.exec(string)[0].length);\n}\n\nfunction parseApply(expr, program) {\n  program = skipSpace(program);\n\n  if (program[0] != '(') {\n    return {expr: expr, rest: program};\n  }\n\n  program = skipSpace(program.slice(1));\n  expr = {type: 'apply', operator: expr, args: []};\n\n  while (program[0] != ')') {\n    var arg = parseExpression(program);\n    expr.args.push(arg.expr);\n    program = skipSpace(arg.rest);\n\n    if (program[0] == ',') {\n      program = skipSpace(program.slice(1));\n    } else if (program[0] != ')') {\n      throw new SyntaxError(\"Expected ',' or ')'\");\n    }\n  }\n\n  return parseApply(expr, program.slice(1));\n}\n\n\n¿Que resultados dan estas ejecuciones?\n\nEjecútalo con las entradas que te propongo abajo.\nPara cada una de las ejecuciones ten en cuenta estos puntos:\n\n\n  Antes de hacer la ejecución  decide si la entrada es sintácticamente correcta,\n  Si es semánticamente correcta\n  Cual será la salida\n  Una vez que se ha ejecutado:\n    \n      Si da error mira en que función ocurre. ¿Es un error sintáctico o semántico? ¿Es lo que esperabas?\n      Si no se produce error y crees que debería producirse ¿Que código es el que tienes que modificar?\n    \n  \n\n\nEntradas:\n\n\n  $ node egg.js 'print(+)'\n  $ node egg.js 'print(4,)'\n  $ node egg.js '8()'\n  $ node egg.js '\"hello\"(2,3)'\n  $ node egg.js '+()'\n  $ node egg.js '+(2,)'\n\n\nGramática\n\n\n  Solucion\n\n\nSiguiente: Los Árboles de Análisis Abstracto\n\n\n  Siguiente: Los Árboles de Análisis Abstracto\n\n\n",
    "url": "/assets/temas/syntax-analysis/analisis-descendente-predictivo-recursivo/ejercicio-gramar-egg-inicial.html"
  },
  
  {
    "title": "gh workflows",
    "excerpt": "\n",
    "content": "A partir de la versión 1.9 tenemos el comando gh workflow para poder acceder a nuestros github workflows desde la terminal:\n\n✗ gh --version\ngh version 1.9.1 (2021-04-15)\nhttps://github.com/cli/cli/releases/tag/v1.9.1\n\n\ngh workflow commands\n\n✗ gh help workflow\nList, view, and run workflows in GitHub Actions.\n\nUSAGE\n  gh workflow &lt;command&gt; [flags]\n\nCORE COMMANDS\n  disable:    Disable a workflow\n  enable:     Enable a workflow\n  list:       List workflows\n  run:        Run a workflow by creating a workflow_dispatch event\n  view:       View the summary of a workflow\n\nFLAGS\n  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use 'gh &lt;command&gt; &lt;subcommand&gt; --help' for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\ngh workflow list\n\n➜  please-Daniel-del-Castillo git:(main) ✗ gh workflow list\nTest  active  8116703\n\n\ngh workflow view\n\n➜  please-Daniel-del-Castillo git:(main) ✗ gh workflow view\n? Select a workflow Test (test.yaml)\nTest - test.yaml\nID: 8116703\n\nTotal runs 21\nRecent runs\n✓  1.1.1                                                                Test  v1.1.1  push  755714052\n✓  1.1.1                                                                Test  main    push  755713933\n✓  Merge branch 'main' of github.com:ULL-ESIT-PL-2021/please-Daniel...  Test  main    push  755346331\n✓  Update README.md                                                     Test  main    push  755342257\n✓  Add a REPL                                                           Test  main    push  755328010\n\nTo see more runs for this workflow, try: gh run list --workflow test.yaml\nTo see the YAML for this workflow, try: gh workflow view test.yaml --yaml\n\n\n➜  please-Daniel-del-Castillo git:(main) ✗ gh workflow view --help\nView the summary of a workflow\n\nUSAGE\n  gh workflow view [&lt;workflow-id&gt; | &lt;workflow-name&gt; | &lt;filename&gt;] [flags]\n\nFLAGS\n  -r, --ref string   The branch or tag name which contains the version of the workflow file you'd like to view\n  -w, --web          Open workflow in the browser\n  -y, --yaml         View the workflow yaml file\n\nINHERITED FLAGS\n      --help                     Show help for command\n  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format\n\nEXAMPLES\n  # Interactively select a workflow to view\n  $ gh workflow view\n  \n  # View a specific workflow\n  $ gh workflow view 0451\n\nLEARN MORE\n  Use 'gh &lt;command&gt; &lt;subcommand&gt; --help' for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\ngh workflow run\n\n ✗ gh help workflow run\nCreate a workflow_dispatch event for a given workflow.\n\nThis command will trigger GitHub Actions to run a given workflow file.  \nThe given workflow file must support a workflow_dispatch 'on' \ntrigger in order to be run in this way.\n\nIf the workflow file supports inputs, they can be specified in a few ways:\n\n- Interactively\n- via -f or -F flags\n- As JSON, via STDIN\n \n\nUSAGE\n  gh workflow run [&lt;workflow-id&gt; | &lt;workflow-name&gt;] [flags]\n\nFLAGS\n  -F, --field key=value       Add a string parameter in key=value format, respecting @ syntax\n      --json                  Read workflow inputs as JSON via STDIN\n  -f, --raw-field key=value   Add a string parameter in key=value format\n  -r, --ref string            The branch or tag name which contains the version of the workflow file you'd like to run\n\nINHERITED FLAGS\n      --help                     Show help for command\n  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format\n\nEXAMPLES\n  # Have gh prompt you for what workflow you'd like to run and interactively collect inputs\n  $ gh workflow run\n  \n  # Run the workflow file 'triage.yml' at the remote's default branch\n  $ gh workflow run triage.yml\n  \n  # Run the workflow file 'triage.yml' at a specified ref\n  $ gh workflow run triage.yml --ref my-branch\n  \n  # Run the workflow file 'triage.yml' with command line inputs\n  $ gh workflow run triage.yml -f name=scully -f greeting=hello\n  \n  # Run the workflow file 'triage.yml' with JSON via standard input\n  $ echo '{\"name\":\"scully\", \"greeting\":\"hello\"}' | gh workflow run triage.yml --json\n\nLEARN MORE\n  Use 'gh &lt;command&gt; &lt;subcommand&gt; --help' for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\nRunning Manually a Workflow\n\nSet this workflow file:\n\n➜  use-hello-world-javascript-action git:(master) cat .github/workflows/manual.yml\n\n\nname: Manually triggered workflow\non:\n  workflow_dispatch:\n    inputs:\n      name:\n        description: 'Person to greet'\n        required: true\n        default: 'Mona the Octocat'\n      home:\n        description: 'location'\n        required: false\n        default: 'The Octoverse'\n\njobs:\n  say_hello:\n    runs-on: ubuntu-latest\n    steps:\n    - run: |\n        echo \"Hello ${{ github.event.inputs.name }}!\"\n        echo \"- in ${{ github.event.inputs.home }}!\"\n\n\nThis example defines the name and home inputs and prints them using the github.event.inputs.name and github.event.inputs.home contexts. If a home isn’t provided, the default value 'The Octoverse' is printed.\n\nYou can use the GitHub API to trigger a webhook event called repository_dispatch when you want to trigger a workflow for activity that happens outside of GitHub.\n\nFor more information, see “Create a repository dispatch event.”\n\nTo trigger the custom repository_dispatch webhook event, you must send a POST request to a GitHub API endpoint and provide an event_type name to describe the activity type. To trigger a workflow run, you must also configure your workflow to use the repository_dispatch event.\n\nNow, using gh we can run it manually:\n\n➜  use-hello-world-javascript-action git:(master) gh workflow run manual.yml -f name=\"PL at ULL\" -f home=\"La Laguna\"\n✓ Created workflow_dispatch event for manual.yml at master\n\nTo see runs for this workflow, try: gh run list --workflow=manual.yml\n\n\n➜  use-hello-world-javascript-action git:(master) gh run list --workflow=manual.yml\n✓  .github  Manually triggered workflow  master  workflow_dispatch  758223539\n\nFor details on a run, try: gh run view &lt;run-id&gt;\n\n\n➜  use-hello-world-javascript-action git:(master) gh run view 758223539\nRefreshing run status every 3 seconds. Press Ctrl+C to quit.\n\n✓ master Manually triggered workflow · 758227829\nTriggered via workflow_dispatch less than a minute ago\n\nJOBS\n✓ say_hello in 1s (ID 2368935232)\n  ✓ Set up job\n  ✓ Run echo \"Hello PL at ULL!\"\n  ✓ Complete job\n\n✓ Run Manually triggered workflow (758227829) completed with 'success'\n\n",
    "url": "/assets/temas/introduccion-a-javascript/gh-workflows.html"
  },
  
  {
    "title": "GitHub Command Line Interface",
    "excerpt": "\n",
    "content": "Introduction\n\ngh pretends to facilitate the access to GitHub from the command line. It brings pull requests, issues, and other GitHub concepts to the terminal next to where you are already working with git and your code.\n\n➜ gh help\nWork seamlessly with GitHub from the command line.\n\nUSAGE\n  gh &lt;command&gt; &lt;subcommand&gt; [flags]\n\nCORE COMMANDS\n  gist:       Manage gists\n  issue:      Manage issues\n  pr:         Manage pull requests\n  release:    Manage GitHub releases\n  repo:       Create, clone, fork, and view repositories\n\nACTIONS COMMANDS\n  actions:    Learn about working with GitHub actions\n  run:        View details about workflow runs\n  workflow:   View details about GitHub Actions workflows\n\nADDITIONAL COMMANDS\n  alias:      Create command shortcuts\n  api:        Make an authenticated GitHub API request\n  auth:       Login, logout, and refresh your authentication\n  completion: Generate shell completion scripts\n  config:     Manage configuration for gh\n  help:       Help about any command\n  secret:     Manage GitHub secrets\n  ssh-key:    Manage SSH keys\n\nFLAGS\n  --help      Show help for command\n  --version   Show gh version\n\nEXAMPLES\n  $ gh issue create\n  $ gh repo clone cli/cli\n  $ gh pr checkout 321\n\nENVIRONMENT VARIABLES\n  See 'gh help environment' for the list of supported environment variables.\n\nLEARN MORE\n  Use 'gh &lt;command&gt; &lt;subcommand&gt; --help' for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\nFEEDBACK\n  Open an issue using 'gh issue create -R github.com/cli/cli'\n\n\nTo install it, see  the installation instructions.\n\nCheck the GitHub CLI Manual for more details.\n\nThere are several ways you can extend/customize gh:\n\n\n  Create shorthands using gh alias set\n  Make custom API queries using gh api\n  Use environment variables\n\n\nIntroduction to gh api\n\nAuthentication Token\n\nGo to github.com/settings/tokens\nto generate a new token for gh and set then environment variable \nGITHUB_TOKEN (export GITHUB_TOKEN= ...)\n\nExample\n\nPlaceholder values :owner, :repo, and :branch in the endpoint argument will get replaced with values from the repository of the current directory.\n\n$  gh api repos/:owner/:repo/issues\n[\n  {\n    \"url\": \"https://api.github.com/repos/ULL-MII-SYTWS-1920/ull-mii-sytws-1920.github.io/issues/5\",\n    \"repository_url\": \"https://api.github.com/repos/ULL-MII-SYTWS-1920/ull-mii-sytws-1920.github.io\",\n    \"labels_url\": \"https://api.github.com/repos/ULL-MII-SYTWS-1920/ull-mii-sytws-1920.github.io/issues/5/labels{/name}\",\n    \"comments_url\": \"https://api.github.com/repos/ULL-MII-SYTWS-1920/ull-mii-sytws-1920.github.io/issues/5/comments\",\n    \"events_url\": \"https://api.github.com/repos/ULL-MII-SYTWS-1920/ull-mii-sytws-1920.github.io/issues/5/events\",\n    \"html_url\": \"https://github.com/ULL-MII-SYTWS-1920/ull-mii-sytws-1920.github.io/issues/5\",\n    \"id\": 715027457,\n    \"node_id\": \"MDU6SXNzdWU3MTUwMjc0NTc=\",\n    \"number\": 5,\n    \"title\": \"tema0-presentacion/practicas/pb-gh-campus-expert/\",\n    \"user\": {\n      ...\n    }\n    ...\n  }\n]\n\n\nWe can pipe the output to jq:\n\n$  gh api repos/:owner/:repo/issues | jq '.[0] | .title'\n\"tema0-presentacion/practicas/pb-gh-campus-expert/\"\n\n\nOf course, we can explicit the repo and owner. For example:\n\n➜ gh api repos/ULL-MII-SYTWS-2021/p01-t1-iaas-alu0101040882/issues | jq '.[0] | .user.login, .body'\n\"crguezl\"\n\"Hola @alu0101040882, \\r\\n\\r\\nVeo que alguno ya está trabajando en la práctica de\n\n\nLet us see an example using the POST method. We will start from this curl example \nin the GitHub API getting started guide:\n\n$ curl -i -H \"Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4\" \\\n    -d '{ \\\n        \"name\": \"blog\", \\\n        \"auto_init\": true, \\\n        \"private\": true, \\\n        \"gitignore_template\": \"nanoc\" \\\n      }' \\\n    https://api.github.com/user/repos\n\n\nand let us adapt to gh api. We use -X or --method stringto set the HTTP method for the request (default GET) and -fto set the fields:\n\n➜  /tmp gh api -X POST -f name=repo-prueba-gh-api -f private=true /user/repos\n\n\nThis way we have created a private repo inside the user scope:\n\n\n\nPagination\n\nThe option --paginateallow us to make additional HTTP requests to fetch \nall pages of results. Here is an example.\n\n➜  gh alias set get-repos 'api /orgs/$1/repos'\n- Adding alias for get-repos: api /orgs/$1/repos\n✓ Added alias.\n➜  gh alias list\nco:         pr checkout\nget-repos:  api /orgs/$1/repos\n\n\n➜ gh get-repos ULL-MII-SYTWS-2021\n\n\n\n\nNow  we can pipe the output to jq to get the names of the repos:\n\n➜  gh get-repos ULL-MII-SYTWS-2021 | jq '.[].full_name' -\n\"ULL-MII-SYTWS-2021/sytws-2021-meta\"\n\"ULL-MII-SYTWS-2021/sytws2021-private\"\n\"ULL-MII-SYTWS-2021/books-shared\"\n\"ULL-MII-SYTWS-2021/p01-t1-iaas-fcohdezc\"\n\"ULL-MII-SYTWS-2021/p01-t1-iaas-crguezl\"\n\"ULL-MII-SYTWS-2021/p01-t1-iaas-alu0100886870\"\n...\n\n\nLet ask for the repos in the PL organization for the course 19/20:\n\n➜ gh api /orgs/ULL-ESIT-PL-1920/repos | jq '.[] | .name' | wc\n      30      30    1088\n\nIt gave us 30 repos. There are much more than that in that organization.\n\nIf we use --paginate the request takes a long time and gives us near a thousand repos:\n\n➜ gh api --paginate /orgs/ULL-ESIT-PL-1920/repos | jq '.[] | .name' | wc\n     990     990   32868\n\n\nIntroduction to gh alias\n\n➜ gh alias set &lt;alias&gt; &lt;expansion&gt; [flags]\n\n\nDeclare a word as a command alias that will expand to the specified command(s).\n\nThe expansion may specify additional arguments and flags. If the expansion\nincludes positional placeholders such as $1, $2, etc., any extra arguments\nthat follow the invocation of an alias will be inserted appropriately.\n\nIf --shell is specified, the alias will be run through a shell interpreter (sh). This allows you\nto compose commands with | or redirect with &gt;. Note that extra arguments following the alias\nwill not be automatically passed to the expanded expression. To have a shell alias receive\narguments, you must explicitly accept them using $1, $2, etc., or $@ to accept all of them.\n\nPlatform note: on Windows, shell aliases are executed via sh as installed by Git For Windows. If\nyou have installed git on Windows in some other way, shell aliases may not work for you.\n\nQuotes must always be used when defining a command as in the examples.\n\nSimple Examples\n\n  $ gh alias set pv 'pr view'\n  $ gh pv -w 123\n  #=&gt; gh pr view -w 123\n\n  $ gh alias set bugs 'issue list --label=\"bugs\"'\n\n  $ gh alias set epicsBy 'issue list --author=\"$1\" --label=\"epic\"'\n  $ gh epicsBy vilmibm\n  #=&gt; gh issue list --author=\"vilmibm\" --label=\"epic\"\n\n  $ gh alias set --shell igrep 'gh issue list --label=\"$1\" | grep $2'\n  $ gh igrep epic foo\n  #=&gt; gh issue list --label=\"epic\" | grep \"foo\"\n\n\nExample: Search for repos inside an organization\n\nLet us search for repos inside our organization using GitHub API v3:\n\n➜ gh api '/search/repositories?q=iaas+org:ULL-MII-SYTWS-2021+in:name'\n\n\n\n\nHere is the JSON with the full output.\n\n\n  See the SEARCH\nsection of the REST API GitHub docs to know more about the API.\n  See section Search Repositories for more info on how to search for repos\n\n\nNow we can use gh alias set to make an alias get-lab to get the repos:\n\n➜ gh alias set get-labs 'api /search/repositories?q=$2+org:$1+in:name'\n- Adding alias for get-labs: api /search/repositories?q=$2+org:$1+in:name\n✓ Added alias.\n➜  gh alias list\nco:        pr checkout\nget-labs:  api /search/repositories?q=$2+org:$1+in:name\n\n\nAnd now we can use it:\n\n➜ gh get-labs ULL-MII-SYTWS-2021 iaas\n\n\nNext  we can pipe the output to jq to get the names of the repos and the date of the last push:\n\n➜ gh get-labs ULL-MII-SYTWS-2021 iaas | jq '.items[] | .name, .pushed_at'\n\"p01-t1-iaas-juanchojbarroso\"\n\"2020-10-21T15:58:32Z\"\n\"p01-t1-iaas-alu0101040882\"\n\"2020-10-17T16:53:39Z\"\n\"p01-t1-iaas-fcohdezc\"\n\"2020-10-06T17:51:52Z\"\n\"p01-t1-iaas-crguezl\"\n\"2020-10-19T13:50:13Z\"\n\"p01-t1-iaas-alu0100886870\"\n\"2020-10-21T17:05:08Z\"\n\"p01-t1-iaas-lardabi\"\n\"2020-10-06T18:01:16Z\"\n\nWe can improve it by writing a script:\n\n➜  cat ~/bin/repos\n\n\n#!/bin/bash\n\nORG=ULL-MII-SYTWS-2021\nASSIGNMENT=iaas\nif [[ $# -gt 0 ]] ; then\n  ASSIGNMENT=$1\nfi\nif [[ $# -gt 1 ]] ; then\n    ORG=$2\nfi\n# echo $ASSIGNMENT $ORG\ngh api --paginate /search/repositories?q=$ASSIGNMENT+org:$ORG+in:name |\n                          jq '.items[] | .name, .pushed_at'           |\n                          sed 'N;s/\\n/ =&gt; /'\n\n\nLet us make an alias for gh:\n\n➜ gh alias set --shell get-repos 'repos $1 $2'\n- Adding alias for get-repos: repos $1 $2\n✓ Changed alias get-repos from !repos to !repos $1 $2\n\n\nWatch the use of single quotes.\n\nLet us use our new alias:\n\n➜  apuntes git:(curso2021) gh get-repos TFA ULL-ESIT-PL-1920\n\"tfa-module-miguel-tfa\" =&gt; \"2020-09-04T09:40:57Z\"\n\"tfa-daniel-tfa\" =&gt; \"2020-06-02T14:00:30Z\"\n\"tfa-manuel-jorge-tfa\" =&gt; \"2020-09-13T21:40:24Z\"\n\"tfa-basilio-tfa\" =&gt; \"2020-07-14T06:49:29Z\"\n\"tfa-alien-tfa\" =&gt; \"2020-09-05T07:35:52Z\"\n\"tfa-miguel-angel-tfa\" =&gt; \"2020-09-15T13:19:47Z\"\n\"tfa-esther-sergio-tfa\" =&gt; \"2020-07-10T08:53:04Z\"\n...\n\n\nGraphQL Example\n\nGraphQL is a query language for web services APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more.\n\nFollows an example of query using GraphQL.\n\nWe can set the GraphQL query in a separated file:\n\n➜  bin git:(master) cat gh-api-example.graphql\n\nquery {\n  repository(owner:\"ULL-MII-SYTWS-2021\", name:\"p01-t1-iaas-alu0101040882\") {\n    issues(last:2, states:OPEN) {\n      edges {\n        node {\n          title\n          url\n          labels(first:5) {\n            edges {\n              node {\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\nTo learn more, see the tutorial Forming calls with GraphQL\n.\n\nLooking at the composition line by line:\n\nquery {\n\n\nBecause we want to read data from the server, not modify it, query is the root operation. (If you don’t specify an operation, query is also the default.)\n\nrepository(owner:\"ULL-MII-SYTWS-2021\", name:\"p01-t1-iaas-alu0101040882\") \n\n\nTo begin the query, we want to find a repository object. The schema validation indicates this object requires an owner and a name argument. A schema defines a GraphQL API’s type system. It describes the complete set of possible data (objects, fields, relationships, everything) that a client can access\n\nissues(last:2, states:OPEN) {\n\n\nA field is a unit of data you can retrieve from an object. As the official GraphQL docs say: The GraphQL query language is basically about selecting fields on objects.\n\nTo account for all issues in the repository, we call the issues object.\n\nSome details about the issues object:\n\nThe docs tell us this object has the type IssueConnection.\n\nSchema validation indicates this object requires a last or first number of results as an argument, so we provide 2.\n\nThe docs also tell us this object accepts a states argument, which is an IssueState enum that accepts OPEN or CLOSED values.\n\nTo find only open issues, we give the states key a value of OPEN.\n\nedges {\n\n\nEdges represent connections between nodes. When you query a connection, you traverse its edges to get to its nodes.\n\nWe know issues is a *connection** because the Doc says it has the IssueConnection type.\n\nConnections let us query related objects as part of the same call. With connections, we can use a single GraphQL call where we would have to use multiple calls to a REST API.\n\nTo retrieve data about individual issues, we have to access the node via edges.\n\nnode {\n\n\nHere we retrieve the node at the end of the edge. \nThe IssueConnection docs indicate the node at the end of the IssueConnection type is an Issue object.\n\nNow that we know we’re retrieving an Issue object, we can look at the docs for issue  and specify the fields we want to return:\n\ntitle\nurl\nlabels(first:5) {\n  edges {\n    node {\n      name\n    }\n  }\n}\n\n\nHere we specify the title, url, and labels fields of the Issue object.\n\nThe labels field has the type LabelConnection. As with the issues object, because labels is a connection, we must travel its edges to a connected node: the label object. At the node, we can specify the label object fields we want to return, in this case, name.\n\nIn gh, the --field flag behaves like --raw-field with magic type conversion based on the format of the value:\n\n\n  literal values “true”, “false”, “null”, and integer numbers get converted to appropriate JSON types;\n  placeholder values “:owner”, “:repo”, and “:branch” get populated with values from the repository of the current directory;\n  if the value starts with “@”, the rest of the value is interpreted as a filename to read the value from. Pass “-“ to read from standard input.\n\n\nFor GraphQL requests, all fields other than “query” and “operationName” are interpreted as GraphQL variables.\n\n➜  bin git:(master) gh api graphql --paginate -F query=@gh-api-example.graphql | jq .\n{\n  \"data\": {\n    \"repository\": {\n      \"issues\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"title\": \"Revisión\",\n              \"url\": \"https://github.com/ULL-MII-SYTWS-2021/p01-t1-iaas-alu0101040882/issues/2\",\n              \"labels\": {\n                \"edges\": [\n                  {\n                    \"node\": {\n                      \"name\": \"enhancement\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n\n\n\n\nRunning Manually GitHub Workflows with gh\n\n\n  Running Manually GitHub Workflows with gh\n\n\nReferences\n\n\n  gh manual\n  GitHub REST API\n  Getting started with the REST API\n  Scripting with GitHub CLI by Mislav Marohnić\n  Blog: GitHub CLI is Now Available: Here’s Why You Should Be Excited by \nKasun Rajapakse\n\n",
    "url": "/assets/temas/introduccion-a-javascript/gh.html"
  },
  
  {
    "title": "Some git tips",
    "excerpt": "\n",
    "content": "Removing Submodules\n\ngit submodule deinit\n\ngit submodule deinit [-f|--force] (--all|[--] &lt;path&gt;...)\n\n\nUnregister the given submodules, i.e. remove the whole \nsubmodule.$name \nsection from .git/config together with their work tree.\n\nFurther calls to git submodule update, git submodule foreach and git\nsubmodule sync will skip any unregistered submodules until they are initialized again, so use this command if you don’t want to have a local checkout of the submodule in your working tree anymore.\n\nWhen the command is run without pathspec, it errors out, instead of deinit-ing everything, to prevent\nmistakes.\n\nIf –force is specified, the submodule’s working tree will be removed even if it contains local\nmodifications.\n\nIf you really want to remove a submodule from the repository and commit that use git-rm(1) instead.\n\ngit rm\n\nSUBMODULES\n\nOnly submodules using a gitfile (which means they were cloned with a Git version 1.7.8 or newer) will be\nremoved from the work tree, as their repository lives inside the .git directory of the superproject.\n\nIf a submodule (or one of those nested inside it) still uses a .git directory, \ngit rm will move the submodules\ngit directory into the superprojects git directory to protect the submodule’s history.\n\nIf it exists the\nsubmodule. section in the gitmodules(5) file will also be removed and that file will be staged\n(unless --cached or -n are used).\n\nA submodule is considered up to date when the HEAD is the same as recorded in the index, no tracked files are modified and no untracked files that aren’t ignored are present in the submodules work tree. \nIgnored\nfiles are deemed expendable and won’t stop a submodule’s work tree from being removed.\n\nIf you only want to remove the local checkout of a submodule from your work tree without committing the removal, use git-submodule(1) deinit instead.\n",
    "url": "/assets/temas/introduccion-a-javascript/git.html"
  },
  
  {
    "title": "GitHub Actions: An Introduction",
    "excerpt": "\n",
    "content": "Github Actions enables you to create custom software development lifecycle workflows directly in your Github repository. These workflows are made out of different tasks so-called actions that can be run automatically on certain events.\n\nThis enables you to include Continues Integration (CI) and continuous deployment (CD) capabilities and many other features directly in your repository.\n\nFor instance, at any time during this course each student  has two active automatic kanban project boards:\n\n  one we call global where you insert an issue per lab assignment and\n  another for the current lab with moving issues corresponding to the items in the published requirements/signature.\n  Once the teacher has reviewed your work for the current lab you have to close not only the lab issue but all the issues in the current board.\n\n\nThis is an example of workflow.\n\nWe can conceive a GitHub Action to automate the last part of this workflow such that when you close the issue in your student board all the issues in the repo board are automatically closed.\n\nHere is a brief glossary of terms (for more see Core concepts for GitHub Actions):\n\nWorkflow\n\nA Workflow is an automated process that is made up of one or multiple jobs and can be triggered by an event.\n\nWorkflows are defined using a YAML file in the .github/workflows directory.\nWorkflows can be created inside the .github/workflows directory by adding a .yml workflow file. \nHere in the terminal we do:\n\n$ mkdir -p .github/workflows\n$ touch .github/workflows/nodejs.yml\n\n\nand use our favourite editor.\n\nExample:\n\nname: Node.js Package\non:\n  release:\n    types: [created]\njobs:\n  build:\n    ...\n  publish-npm:\n    ...\n  publish-gpr:\n    needs: build\n    ...\n\n\nEditing Github Actions\n\nTo manage GitHub Actions from Visual Studio we can install the extension GitHub Actions\n\n\n\nTo use it, you have to authorize the VsCode extension to access your GitHub acount\n\n\n\nWe can also use the online GitHub Interface.\n\nThe Github Actions Editor is quite clever:  Auto-complete can be triggered with Ctrl+Space almost anywhere.\n\n\n\nAuto-complete works even inside expressions\n\n\n\nJob\n\nA job is made up of multiple steps and runs in an instance of the virtual environment. Jobs can\n\n\n  run independently of each other or\n  sequential if the current job depends on the previous job to be successful.\n\n\nExample:\n\nname: Node.js Package\n\non:\n  release:\n    types: [created]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12\n      - run: npm ci\n      - run: npm test\n\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      ...\n  publish-gpr:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      ...\n\n\nThe needs attribute inside the publish-npm job tell us that this job \ncan not start until the build step has finished\n\nStep\n\nA step is an individual task that can run commands in a job. A step can be either\n\n  an action or\n  a shell command.\n\n\nEach step in a job executes on the same runner, allowing the actions in that job to share data with each other.\n\nExample:\n\nname: Node.js Package\non:\n  release:\n    types: [created]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2  # An action\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12\n      - run: npm ci      # A command\n      - run: npm test\n\n\nThe run keyword tells the job to execute a command on the runner. In this case, you are using run: npm test to run  the tests in your package\n\nActions\n\nActions are the smallest portable building block of a workflow and can be combined as steps to create a job.\n\nHere is another example:\n\nname: learn-github-actions\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n      - run: npm install -g bats\n      - run: bats -v\n\n\n\n  The uses: actions/checkout@v2  tells the job to retrieve v2 of the community action named actions/checkout@v2.\n    \n      This is an action that checks out your repository and downloads it to the runner, allowing you to run actions against your code (such as testing tools).\n      You must use the checkout action any time your workflow will run against the repository’s code\n    \n  \n  The uses: actions/setup-node@v1  installs the node software package on the runner, giving you access to the npm command.\n  You can create your own Actions\n  or use publicly shared Actions from the Marketplace\n\n\nTypes of Actions\n\nThere are two types of actions:\n\n\n  Docker container and\n  JavaScript actions\n\n\nDocker container actions allow the environment to be packaged with the GitHub Actions code and can only execute in the GitHub-Hosted Linux environment.\n\nJavaScript actions decouple the GitHub Actions code from the environment allowing faster execution but accepting greater dependency management responsibility.\n\nActions require a metadata file to define the\n\n\n  inputs,\n  outputs and\n  main entrypoint\n\n\nfor your action.\n\nThe metadata filename must be either action.yml or action.yaml.\n\n\n\n\nType\nOperating system\n\n\n\n\nDocker container\nLinux\n\n\nJavaScript\nLinux, MacOS, Windows\n\n\n\n\n\n  \n    Here you can find instructions if you want to develop an action for other people to use\n  \n  \n    Here is an example of an action: actions/create-release\n  \n\n\nEvent\n\nEvents are specific activities that trigger a workflow run. For example, a workflow is triggered when somebody pushes to the repository or when a pull request is created. Events can also be configured to listen to external events using Webhooks.\n\nExample of Webhook: When you install Travis in your repo a webhook is installed on push so that Travis will know when you push to your repo.\n\nSee also Git Hooks\n\nThe release event\n\n\n  See GitHub Releases\n\n\nRunner\n\nA runner is a machine with the Github Actions runner application installed.\n\n\n  A runner waits for available jobs it can then execute.\n  After picking up a job they run the job’s actions and report the progress and results back to Github.\n  Runners can be hosted on Github or self-hosted on your own machines/servers.\n\n\nSyntax of the .yml File\n\nGithub Actions files are written using YAML syntax and have either a .yml or .yaml file extension. Here are the most important concepts for the workflow file.\n\nName:\n\nThe name of your workflow that is displayed on the Github actions page. If you omit this field, it is set to the file name.\n\nname: CI for scapegoat module\n\n\nOn:\n\nThe on keyword defines the Github events that trigger the workflow. You can provide a single event, array or events or a configuration map that schedules a workflow.\n\non: push\n\n\nor\n\non: [pull_request, issues]\n\n\nYou can set up the workflow to only run on certain branches, paths, or tags. \nFor syntax examples including or excluding branches, paths, or tags, see Workflow syntax for GitHub Actions\n\nFor instance, the example below runs anytime the push event includes a file in the sub-project directory or its subdirectories, unless the file is in the sub-project/docs directory.\n\non:\n  push:\n    paths:\n    - 'sub-project/**'\n    - '!sub-project/docs/**'\n\n\nFor example, a push that changed sub-project/index.js or sub-project/src/index.js will trigger a workflow run, but a push changing only sub-project/docs/readme.md will not.\n\nJobs:\n\nA workflow run is made up of one or more jobs. Jobs define the functionality that will be run in the workflow and run in parallel by default.\n\n{% raw %}\njobs: \n    ci-scapegoat:\n    # Define the OS our workflow should run on\n    runs-on: ubuntu-latest\n\n    strategy:\n        # To test across multiple language versions\n        matrix:\n        node-version: [12.x]\n\n    steps: # Clone the repo. See https://github.com/actions/checkout\n    - uses: actions/checkout@v2\n    # Example of using an environment variable\n    - name: Use Node.js ${{ matrix.node-version }} # Will be: \"Use Node.js 12.x\"\n        uses: actions/setup-node@v1 # Install node. See https://github.com/actions/setup-node\n        with:\n        node-version: ${{ \"{{ matrix.node-version\" }} }}\n    # Install a project with a clean slate\n    - run: npm ci\n    - run: npm test\n        # Environment variables\n        env:\n          CI: true\n{% endraw %}\n\n\nEnv:\n\nEnv defines a map of environment variables that are available to all jobs and steps in the workflow. You can also set environment variables that are only available to a job or step. Here is a simple example taken from the GitHub docs on Environment Variables\n\njobs:\n  weekday_job:\n    runs-on: ubuntu-latest\n    env:\n      DAY_OF_WEEK: Mon\n    steps:\n      - name: \"Hello world when it's Monday\"\n        if: env.DAY_OF_WEEK == 'Mon'\n        run: echo \"Hello $FIRST_NAME $middle_name $Last_Name, today is Monday!\"\n        env:\n          FIRST_NAME: Mona\n          middle_name: The\n          Last_Name: Octocat\n  CI: true\n\n\nThere are lots of default environment variables set by GitHub\n\nsteps.with\n\nA map of the input parameters defined by the action. \nEach input parameter is a key/value pair.\n\nInput parameters are set as environment variables.\n\nThe variable is prefixed with INPUT_ and converted to upper case.\n\nExample\n\nDefines the three input parameters (first_name, middle_name, and last_name) \ndefined by the hello_world action.\n\nThese input variables will be accessible to the hello-world action as INPUT_FIRST_NAME, INPUT_MIDDLE_NAME, and INPUT_LAST_NAME environment variables.\n\njobs:\n  my_first_job:\n    steps:\n      - name: My first step\n        uses: actions/hello_world@master\n        with:\n          first_name: Mona\n          middle_name: The\n          last_name: Octocat    \n\n\nExpression Syntax\n\nYou can use expressions to programmatically set variables in workflow files and access contexts.\n\n{% raw %}\n${{ \"{{ &lt;expression&gt;\" }} }}\n\n{% endraw%}\n\nYou can combine literals, context references, and functions using operators.\n\nAn expression can be any combination of\n\nliteral values,\n\n{% raw %}\nenv:\n    myNull: ${{ null }}\n    myBoolean: ${{ false }}\n    myIntegerNumber: ${{ 711 }}\n    myFloatNumber: ${{ -9.2 }}\n    myHexNumber: ${{ 0xff }}\n    myExponentialNumber: ${{ -2.99-e2 }}\n    myString: ${{ 'Mona the Octocat' }}\n    myEscapedString: ${{ 'It''s open source!' }}\n\n{% endraw %}\n\nOperators\n\n\n    \n    \n    Operator\n    Description\n    \n    \n    \n    \n    ( )\n    Logical grouping\n    \n    \n    [ ]\n    Index\n    \n    \n    .\n    Property dereference\n    \n    \n    !\n    Not\n    \n    \n    &lt;\n    Less than\n    \n    \n    &lt;=\n    Less than or equal\n    \n    \n    &gt;\n    Greater than\n    \n    \n    &gt;=\n    Greater than or equal\n    \n    \n    ==\n    Equal\n    \n    \n    !=\n    Not equal\n    \n    \n    &amp;&amp;\n    And\n    \n    \n    ||\n    Or\n    \n    \n\n\nfunctions\n\nGitHub offers a set of built-in functions\n\nExample:\n\nformat('Hello {0} {1} {2}', 'Mona', 'the', 'Octocat')\n\n\nReturns 'Hello Mona the Octocat'\n\ncontains('Hello world', 'llo') returns true\n\nThe if Keyword and Functions to Check Job Status\n\nExpressions are commonly used with the conditional if keyword \nin a workflow file to determine whether a step should run.\n\nWhen you use expressions in an if conditional, \nyou do not need to use the expression syntax ({% raw %}${{ }}{% endraw %}) \nbecause GitHub automatically evaluates the if conditional as an expression.\n\nFor more information about if conditionals, see “Workflow syntax for GitHub Actions.”\n\nExample expression in an if conditional\n\nsteps:\n  - name: Git checkout\n    if: github.event.check_suite.app.name == 'Netlify' &amp;&amp; github.event.check_suite.conclusion == 'success'\n    uses: actions/checkout@master\n\n  - name: Install Node\n    if: success()\n    uses: actions/setup-node@v1\n    with:\n      node-version: 10.x\n\n  - name: Install npm dependencies\n    if: success()\n    run: npm install\n\n  - name: Run Audit\n    if: success()\n    uses: ./.github/actions/run-audit\n\n\nsuccess() returns true when none of the previous steps have failed or been canceled.\n\nSee Job status check functions\n\nObject Filters\n\nYou can use the * syntax to apply a filter and select matching items in a collection:\n\n[\n  { \"name\": \"apple\", \"quantity\": 1 },\n  { \"name\": \"orange\", \"quantity\": 2 },\n  { \"name\": \"pear\", \"quantity\": 1 }\n]\n\n\nThe filter fruits.*.name returns the array [ \"apple\", \"orange\", \"pear\" ]\n\nHere is another example:\n\ncontains(github.event.issue.labels.*.name, 'bug')\n\n\nwill be true if the attribute name of one of the labels of the issue that \nhas triggered the event is 'bug'\n\nContexts\n\nContexts are a way to access information about workflow runs, runner environments, jobs, and steps. Contexts use the expression syntax. See Context and expression syntax for GitHub Actions at the GitHub Actions Reference.\n\n{% raw %}\n${{ \"{{ &lt;context&gt;\" }} }}\n\n{% endraw %}\n\nMatrix Context\n\nThe matrix context enables access to the matrix parameters you configured for the current job.\n\nFor example, if you configure a matrix build with the os and node versions, the matrix context object includes the os and node versions of the current job.\n\nGitHub Context\n\nThe github context  contains information about\n\n\n  the workflow run and\n  the event that triggered the run.\n\n\nYou can read most of the github context data in environment variables.\n\nfor example, github.refcontains the branch or tag ref that triggered the workflow run\n\nEnv Context\n\nThe env context contains environment variables that have been set in a workflow, job, or step.\n\nThis context changes for each step in a job. \nYou can access this context from any step in a job.\n\nSteps Context\n\nThe steps context contains information about the steps in the current job that have already run.\n\nHere is a more complex example using step information and functions\n\n{% raw %}\n...\n- name: save vsix\n      uses: actions/upload-artifact@master\n      with:\n        name: ${{ format('vscode-hugo-{0}-{1}.vsix', steps.build_package.outputs.version, github.sha) }}\n        path: ${{ format('vscode-hugo-{0}.vsix', steps.build_package.outputs.version) }}\n\n{% endraw %}\n\nThe Runner Context\n\nThe runner context contains information about the runner that is executing the current job.\n\nExamples are runner.os for the Operating System or runner.temp for the path of the temporary directory for the runner. This directory is guaranteed to be empty at the start of each job, even on self-hosted runners.\n\nSee an example of runner context\n\nThe Strategy Context\n\nThe strategy context enables access to the configured strategy parameters and information about the current job.\n\nHere is a more complex example of strategy:\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        include:\n          os: macos-latest\n            env:\n              - TARGET: x86_64-apple-darwin\n              - COMPILER: clang\n              - LINKER: clang\n\n          os: ubuntu-latest\n            env:\n              - TARGET: armv7-unknown-linux-musleabihf\n              - COMPILER: arm-linux-gnueabihf-gcc-5\n              - LINKER: gcc-5-arm-linux-gnueabihf\n\n          os: ubuntu-latest\n            env:\n              - TARGET: x86_64-unknown-linux-musl\n              - COMPILER: gcc\n              - LINKER: gcc\n\n\nStrategy parameters include fail-fast, job-index, job-total, and max-parallel. Here is the output for the\nDebugging Context to the log example\n\nThe Secrets Context\n\nThe secrets context access to secrets set in a repository. See Creating and storing encrypted secrets.\n\nCreating a Secret\n\nTo create a secret:\n\n\n  \n    On GitHub, navigate to the main page of the repository.\n  \n  \n    Under your repository name, click Settings.\n\n    \n  \n  \n    In the left sidebar, click Secrets.\n  \n  \n    Type a name for your secret in the “Name” input box.\n  \n  \n    Type the value for your secret.\n  \n  \n    Click Add secret.\n  \n\n\nUsing a Secret\n\nTo use a secret:\n\nsteps:\n  - name: Hello world action\n    with: # Set the secret as an input\n      super_secret: {{ \"${{ secrets.SuperSecret\" }} }}\n    env: # Or as an environment variable\n      super_secret: {{ \"${{ secrets.SuperSecret\" }} }}\n\n\nExample: A GitHub Action to Publish a npm Package\n\nFor example, to write a github action to publish a npm package in the npm registry\nI surely need to give GitHub a token so that it can work on my name and publish \nthe package. Thus, the procedure will be:\n\n\n  \n    You create a token for npm with npm token create with read and publish permits:\n\n     [~/.../lexer-generator(master)]$ npm token create\n npm password:\n ┌────────────────┬──────────────────────────────────────┐\n │ token          │ blah-blah-blah-blah-blahblahblah     │\n ├────────────────┼──────────────────────────────────────┤\n │ cidr_whitelist │                                      │\n ├────────────────┼──────────────────────────────────────┤\n │ readonly       │ false                                │\n ├────────────────┼──────────────────────────────────────┤\n │ created        │ 2020-03-30T15:39:01.799Z             │\n │ created        │ 2020-03-30T15:39:01.799Z             │\n └────────────────┴──────────────────────────────────────┘\n    \n  \n  Set the secret token in the secrets section of your repo with name for example NPM_TOKEN\n  Make the secret accesible to the GitHub Action via the secrets context\n\n\nname: Node.js Package\non:\n  release:\n    types: [created]\njobs:\n  build:\n    ...\n  publish-npm:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 12\n          registry-url: https://registry.npmjs.org/\n      - run: npm ci\n      - run: npm publish --access public\n        env:\n          NODE_AUTH_TOKEN: ${{ \"{{secrets.NPM_TOKEN\" }} }}\n\n\nThis example stores the NPM_TOKEN secret in the NODE_AUTH_TOKEN environment variable.\n\nWhen the setup-node action creates an .npmrc file, it references the token from the NODE_AUTH_TOKEN environment variable.  See actions/setup-node/README\n\nIn the example above, \nthe setup-node \naction creates an .npmrc file on the runner with the following contents:\n\n//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}\nregistry=https://registry.npmjs.org/\nalways-auth=true\n\n\nFor more details, see also Publishing packages to the npm registry\n\nExercise\n\nExtend the lab npm-module with an action inside the repo testing-addlogging-aluXXX to publish the npm package in npmjs after the production tests \nrun correctly in several operating systems (for example, windows-latest, mac-os-latest, ubuntu-latest) and different node versions\n\n{% raw %}\njobs: # jobs are made of steps\n  build:\n    # Define the OS our workflow should run on\n    runs-on: ${{ matrix.os }}\n    strategy:\n      # To test across multiple language versions\n      matrix:\n        os: [macos-latest, ubuntu-latest, windows-latest ]\n        node-version: [12.x, 14.x]\n    ...\n  ...\n\n{% endraw %}\n\nHere is another example\n\n{% raw %}\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix: # A job matrix can generate a maximum of 256 jobs per workflow run\n        os:\n          - ubuntu-latest\n          - macos-latest\n          - windows-latest\n        node_version:\n          - 10\n          - 12\n          - 14\n        architecture:\n          - x64\n        # an extra windows-x86 run:\n        include:\n          - os: windows-2016\n            node_version: 12\n            architecture: x86\n    name: Node ${{ matrix.node_version }} - ${{ matrix.architecture }} on ${{ matrix.os }} # The name of the job displayed on GitHub.\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup node\n        uses: actions/setup-node@v2\n        with:\n          node-version: ${{ matrix.node_version }}\n          architecture: ${{ matrix.architecture }}\n      - run: npm install\n      - run: npm test\n  ...\n\n{% endraw %}\n\nSee the docs for jobs.&lt;job_id&gt;.strategy.matrix\n\nDebugging Context to the log file\n\nTo inspect the information that is accessible in each context, you can use this workflow file example.\n\n[~/.../scapegoat(master)]$ cat .github/workflows/debug.yml\n\n{% raw %}\nname: Debugging contexts\non: push\n\njobs:\n  one:\n    runs-on: ubuntu-16.04\n    steps:\n      - name: Dump GitHub context\n        env:\n          GITHUB_CONTEXT: ${{ toJson(github) }}\n        run: echo \"$GITHUB_CONTEXT\"\n      - name: Dump job context\n        env:\n          JOB_CONTEXT: ${{ toJson(job) }}\n        run: echo \"$JOB_CONTEXT\"\n      - name: Dump steps context\n        env:\n          STEPS_CONTEXT: ${{ toJson(steps) }}\n        run: echo \"$STEPS_CONTEXT\"\n      - name: Dump runner context\n        env:\n          RUNNER_CONTEXT: ${{ toJson(runner) }}\n        run: echo \"$RUNNER_CONTEXT\"\n      - name: Dump strategy context\n        env:\n          STRATEGY_CONTEXT: ${{ toJson(strategy) }}\n        run: echo \"$STRATEGY_CONTEXT\"\n      - name: Dump matrix context\n        env:\n          MATRIX_CONTEXT: ${{ toJson(matrix) }}\n        run: echo \"$MATRIX_CONTEXT\"\n\n{% endraw %}\n\nThe  calls toJSON(value) return a pretty-print JSON representation of value. You can use this function to debug the information provided in contexts.\n\nHere is an example of output of the action above.\n\nExercise\n\nInstall and check the former workflow.\nAdd another step to the former workflow to see the SECRETS context. What do you see?\n\nGITHUB_TOKEN\n\nGitHub automatically creates a GITHUB_TOKEN secret to use in your workflow. You can use the GITHUB_TOKEN to authenticate in a workflow run.\n\nWhen you enable GitHub Actions, GitHub installs a GitHub App on your repository.\n\nThe GITHUB_TOKEN secret is a GitHub App installation access token.\n\nYou can use the installation access token to authenticate on behalf of the GitHub App installed on your repository.\n\nThe token’s permissions are limited to the repository that contains your workflow.\n\nBefore each job begins:\n\n\n  GitHub fetches an installation access token for the job.\n  The token expires when the job is finished.\n\n\nFor more see Authenticating with the GITHUB_TOKEN\n\nFor example, when the repo contains and npm module and \nwe want to write a github action to publish the npm package in the GitHub Package Registry\nit is enough to use the GITHUB_TOKEN. There is no need to create a new secret\n\nThus, this is enough to do the job:\n\n{% raw %}\nsteps:\n- uses: actions/checkout@v2\n- uses: actions/setup-node@v2\n  with:\n    node-version: '14.x'\n    registry-url: 'https://registry.npmjs.org'\n- run: npm install\n- run: npm publish\n  env:\n    NODE_AUTH_TOKEN: ${{ secrets.NPN_TOKEN }}\n- uses: actions/setup-node@v2\n  with:\n    registry-url: 'https://npm.pkg.github.com'\n- run: npm publish\n  env:\n    NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n{% endraw %}\n\nThe setup-node action creates an .npmrc file on the runner.\n\nWhen you use the scope input to the setup-node action, the .npmrc file includes the scope prefix.\n\nBy default, the setup-node action sets the scope in the .npmrc file to the account that contains that workflow file.\n\n//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}\n@ULL-ESIT-PL-2021:registry=https://npm.pkg.github.com\nalways-auth=true\n\n\nSee Publishing packages to GitHub Packages\n\nCreating a Packaged JavaScript Action\n\n\n  Writing a “Hello World!” JavaScript Action\n\n\nRunning Manually GitHub Workflows with gh\n\n\n  Running Manually GitHub Workflows with gh\n\n\nReferences\n\n\n  A quick demo showing how to use GitHub Actions to build, package, and publish Node.js modules to the NPM and GitHub package registries\n  An Introduction to Github Actions\n  Using GitHub Actions Youtube video explainig how to test and publish an npm module to both GH Registry and npm Registry\n  About the editor for GitHub Actions\n  Install VSCode extension providing Github Actions YAML support\n  \n    Getting Started with GitHub Actions in Visual Studio\n  \n  Advanced GitHub Actions: workflows for production grade CI/CD - GitHub Universe 2019\n    \n      A short primer on advanced features,\n      How to deploy to GitHub Packages,\n      Auto-merge dependabot pull requests, and\n      Deploy a web service\n    \n  \n\n\nVideos about GitHub Actions\n\n\n  A quick demo showing how to use GitHub Actions to build, package, and publish Node.js modules to the NPM and GitHub package registries by Brian Cross\n  DevOps CI/CD Explained in 100 Seconds Using GitHub Actions for CI. Youtube Video. Fireship\n  BxJS - (Custom) Github Actions for Node.js projects\n  GitHub Actions: Open Source Workflow Automation by Bas Peters YoutTube video\n  Introduction to GitHub Actions : my website build &amp; deployment\n\n\n",
    "url": "/assets/temas/introduccion-a-javascript/github-actions.html"
  },
  
  {
    "title": "GitPod: VS Code in Browsers",
    "excerpt": "\n",
    "content": "GitHub Editor\n\nPeriod in a repo\n\nFrom any GitHub repo or pull request, developers can simply press the period (.) key to bring up the browser-based VS Code environment with the source code file ready for editing.\n\nSubstitute github by github.dev in a GitHub URL\n\nThat dot press to bring up the web-based editor takes you to https://github.dev/, so the same one-press . functionality can be duplicated just by changing a URL from “github.com” to “github.dev”.\n\nDocumentation\n\nEsta documentación es sólo para usuarios GitHub Enterprise\n\n\n  Web-based editor\n\n\nReferencias\n\n\n  One-Click VS Code in Browser from GitHub Repo \n\n\nGitPod\n\nGitpod is an open source platform for automated and ready-to-code development environments that blends into your existing workflow. It enables developers to describe their dev environment as code and start instant and fresh development environments for each new task directly from your browser.\n\nAprendiendo GitPod\n\n\n  Getting Started\n\n\nConfigure Gitpod\n\nBotón GitPod\n\nPara tener el botón GitPod instala la correspondiente extensión en Chrome o Firefox\n\n\n  GitPod Browser Extension\n  Chrome extension in the webstore\n  fireFox addon\n  GitPod Screencasts 7 videos\n\n\nOpen in VSCode\n\nEn el menú de arriba a la izquierda elige la opción “Open in VS Code”:\n\n\n\nTienes que instalar la extensión GitPod the VSCode y darle los permisos.\nA partir de ese momento puedes editar con tu VSCode local en el contenedor de GitPod.\n\nSee it running in my local machine, after the VSCode has been opened:\n\n\n\nObserve the output in the terminal. We are running on the GitPod docker container\n\n¡Ojo! tu VSCode local está compartiendo el GitPod Workspace. Cualquier modificación que hagas en el VSCode local se refleja en el GitPod Workspace en la nube y viceversa.\n\nSnapshots\n\nWhenever you want to share a reproducible example on StackOverflow or an issue report, providing real code that can be quickly tried, executed and explored is the best you can do. Online code playgrounds, such as CodePen or JSFiddle, are an excellent way to do that, as they are very accessible for both the creator and the readers. Unfortunately, they are not available for every programming platform, language and often don’t work for larger projects or examples.\n\nGitpod lets you create reproducible examples for any programming environment and any size of project.\n\nNo matter what state your Gitpod workspace is in, taking a Snapshot captures everything and provides you a link to share anywhere: on issues, forums (StackOverflow), emails and blogs. Anybody who clicks on a snapshot link instantly gets an exact copy of that workspace, including any uncommitted file changes and the UI layout.\n\nSee\n\n\n  Creating reproducibles for any programming language\n\n\n\nSustainable Node.js development with only a browser\n\nSee the article\n\nSustainable Node.js development with only a browser\n\nOferta para Estudiantes\n\n\n  GitHub Student Developer Pack\n\n\nOferta Plan Personal (2021) Profesores\n\nEn esta URL https://gitpod.io/plans\nse puede solicitar un upgrade al plan “personal”  que permite acceder a repositorios privados si eres un miembro de una comunidad educativa. No he tenido que introducir tarjetas.\n\nImportante: Cuando rellenes la solicitud ¡El campo VAT déjalo vacío!\n\nLo que pasa (Abril 2021) es que GitPod está siendo ofertado como parte del GitHub teachers’ toolbox. Por tanto, si  tienes actualizado tu GitHub Toolbox, creo que tanto los profesores como los alumnos tienen acceso a repos privados y a la nube proveída por GitPod.\n\n\n\n\n\nEstá limitada a 100 horas de uso por mes:\n\n\n  100 horas\n  Repositorios privados\n\n\nEn el ejemplo se ve los apuntes de PL (un repo público usando Jekyll) siendo editado con VSCode:\n\n\n\ntodo funciona bien.\n\nCon este plan es posible acceder a repos privados. \nEn el repo en GitHub aparece un nuevo botón verde con etiqueta “GitPod”. Obsérvese que el repo es privado:\n\n\n\nCuando le damos  al botón “GitPod” por primera vez es posible que nos salga un mensaje de error:\n\n\n\nLe damos los permisos adecuados:\n\n\n\n\n\ny ya podemos editar nuestros repos privados.\n\nDrawbacks according to Pattacini\n\n\n  Gitpod is fantastic but comes with some constraints that may affect yours and your students’ work:\n\n\n\n  Obviously, you’d need to learn how to deal with Docker files and do some preliminary tests on your side. Getting accustomed to Docker might take some time :hourglass_flowing_sand:\n\n\n\n  In a Gitpod workspace, the user has no sudo credentials. This is understandable and represents good practice, but sometimes it’d be convenient to install packages straight away from the console without the burden of adjusting the Dockerfile once more.\n\n\nPero en otro post posterior (Feb 25 2021) comenta:\n\n\n  Just wanted to tell you that Gipod has been growing up tremendously as well as awesomely and, among the latest advancements it provides, we have now root access\n\n\n\n  Gitpod is free only for public GitHub repositories. This is ok for public assignments but could be a hitch for private ones. An easy workaround could be to ask students to clone their private repositories only after the workspace is ready.\n\n\nEsto se resuelve como he comentado\n\n\n  There’s the threshold of 100 hours/month per user. Quite reasonable, but much depends on your classroom payload.\nWhen you share a running workspace, you’ll share also your access to GitHub, which might not be desirable! This is a serious inconvenient during remote technical interviews, for example.\n\n\n\n  Finally, don’t expect to have quantum computers available from free Cloud IDE’s services. After all, there’s a trade-off and resources are limited (e.g. no GPU), even though Gitpod seems quite generous in this sense.\n\n\nDocker Images\n\nSi la imagen por defecto no se adapta a lo que quieres\npuedes configurarla\n\nVéase Docker in Gitpod\n\nSelf Hosted\n\nGitpod, just as you know it from gitpod.io, can be deployed and operated on your own infrastructure. \nIt supports different\n\n\n  cloud providers,\n  self-managed Kubernetes clusters,\n  corporate firewalls, and even\n  \n    off-grid / air-gapped networks.\n  \n  Gitpod Self-Hosted\n\n\nYou can find all configuration templates and installation scripts in the Gitpod repository:\n\nhttps://github.com/gitpod-io/gitpod\n\nIf you already have a Kubernetes cluster, or don’t want/cannot use AWS or GCP, please follow the generic guide:\n\n\n  Install Gitpod on Kubernetes\n\n\nReferencias\n\n\n  The benefits of integrating Docker and Cloud IDE’s in the GitHub Classroom workflow by Ugo Pattacini\n  Introduction to Gitpod\n  GitPod For Schools, Universities, and Coding Bootcamps\n  A Beginner’s Guide to Understanding and Building Docker Images\n  Config Docker for GitPod\n  Docker in gitpod\n\n",
    "url": "/assets/temas/introduccion-a-javascript/gitpod.html"
  },
  
  {
    "title": "Metodología de Trabajo",
    "excerpt": "\n",
    "content": "Horarios, Calendario académico y Tutorías\n\n\n  Horarios, Calendario académico y Tutorías\n\n\nVías de Comunicación\n\n\n  Issues en GitHub en el repo de la correspondiente práctica.\n  Asociarlos con el GtHub Project Board del alumno y actualizarlos según su progreso\n\n\n  Comentarios en los apuntes de la asignatura\n\n\nChat vs Hangouts\n\n  Google chat and VideoConferences: Usen Google chat (institucional) y no Google Hangouts para contactar con el profesor\n\n\nOrganización GitHub\n\nEn la metodología que seguiremos este curso trabajará usando esta organización GitHub:\n\n\n  Organización {{site.organization.name}}\n\n\nVamos a trabajar de modo que todos - alumnos y profesores de esta asignatura - usaremos repos en esta organización para las prácticas.\n\nPara la puesta en marcha necesitamos hacer algunas tareas\n\nRellenar Cuestionario para identificar la Relación entre el usuario GitHub y el usuario ULL\n\nRellena el Cuestionario: Relación GitHub-AluXXXX dentro de la tarea cuestionarios iniciales.\n\n\n  Puedes poner un correo distinto del de la ULL si lo prefieres\n  Pon los usuarios GitHub (si tienes mas de uno) con los que vayas a hacer los commits en las prácticas de la asignatura\n\n\nGoogle Plus: Comunidad PL\n\nDate de alta en la comunidad Google + de PL.\n\n\n  Cuando lo hagas asegúrate de estar usando tu cuenta de gmail ull (aluXXX@ull.edu.es)\n\n\nPráctica Opcional: GitHub Campus Expert\n\n\n  Práctica Opcional: GitHub Campus Expert (github-campus-expert)\n\n\nPráctica: GitHub Project Board\n\n\n  GitHub Project Board: github-project-board\n\n\nPráctica: Visual Studio Code\n\n\n  Visual Studio Code\n\n\nPráctica: IAAS\n\n\n  IAAS\n\n\nLa Bibliografía\n\nLa mayor parte de los libros están accesible via el PuntoQ de la BULL.\n\nUsaremos bastante estos libros:\n\n\n  Eloquent JS 3rd Edition\n  The Modern JavaScript Tutorial. https://javascript.info/\n\n\nEn el repo GH:\n\n\n  Recursos de Bibliografía\n\n\nencontrarás recursos adicionales.\n\nEvaluación\n\nNormativa de Evaluación\n\nLa Evaluación de la asignatura se rige por el Reglamento de Evaluación y Calificación de la Universidad de La Laguna (BOC de 19 de enero de 2016), o el que la Universidad tenga vigente, además de por lo establecido en la Memoria de Verificación inicial o posteriores modificaciones.\n\n\n  Resolución de 8 de enero de 2016, por la que se dispone la publicación del\nReglamento de Evaluación y Calificación de la Universidad de La Laguna (BOC de 19\nde enero de 2016)\n  Acuerdo 12/CG 27-06-2017 por el que se aprueba el Reglamento de la\nEvaluación Curricular por Compensación de la Universidad de La Laguna\n\n\nRequisitos para participar en la Evaluación Continua\n\n\n  \n    Para participar en la evaluación continua, es obligatorio hacer uso de los recursos proveídos (apuntes, vídeos, repositorios, foros, wikis, etc.) y realizar los ejercicios y actividades señaladas como obligatorios. Se realizará control de asistencia.\n  \n  \n    El alumno deberá demostrar que ha adquirido las habilidades y competencias de la asignatura en entrevistas con los profesores que se realizan en las horas lectivas, de laboratorio, de tutorías y en los micro-exámenes.\n  \n\n\nPruebas Objetivas\n\nHaremos un primer examen a mitad del desarrollo del cuatrimestre y otro al final aprovechando las fechas de convocatoria.\n\nEl primero es el 20% de la nota  y el segundo el 80% de la nota. Es necesario aprobar esta parte para superar la asignatura.\n\nTrabajos y proyectos, Informes y Valoración\n\n\n  Se llevarán a cabo micro-proyectos/prácticas/laboratorios. Los estudiantes deberán superar los micro-proyectos para aprobar la asignatura. Son apróximadamente 15 prácticas.\n\n\nTFA\n\n\n  Se desarrolla un Trabajo Fin de Asignatura (TFA) consistente en el diseño e implementación de un lenguaje (en algunos casos, un lenguaje de dominio específico, Domain Specific Language o DSL) que se presenta al final del curso. El proyecto se comienza tan pronto como el estudiante tiene los conocimientos mínimos para diseñarlo e implantarlo. Es necesario superar el proyecto para aprobar la asignatura.\n\n\nCálculo de la Calificación\n\n\n  Superadas las partes: prácticas, tfa y teoría  la nota es la media ponderada de las partes:\n\\(0,4 \\times practicas + 0,5 \\times teoria + 0,1 \\times tfa\\)\n\n\n\n\nAlumnos que no participan en la Evaluación Continua\n\n\n  Los estudiantes que no participen en la evaluación continua se evalúan a través de los exámenes oficiales y convocatorias fijados por la Universidad de La Laguna.\n\n\nReferencias\n\n\n  GitHub Classroom Intro\n\n",
    "url": "/assets/temas/introduccion-a-pl/guia-docente.html"
  },
  
  {
    "title": "p10-t5-jison-infix2egg",
    "excerpt": "\n",
    "content": "Re-escribir usando Jison el Traductor del Lenguaje Infijo (p10-t5-jison-infix2egg)\n\nDescripción\n\nRe-escriba la fase de análisis sintáctico del lenguaje de infijo que diseñó en la práctica\n\n\n  Analizador Descendente Predictivo Recursivo. Desde Lenguajes de Infijo a EGG Virtual Machine (p8-t3-pdr-infix2eg)\n\n\nusando Jison para re-escribir el analizador sintáctico.\n\n\n  Este es un buen momento para meditar su diseño del lenguaje de infijo e introducir modificaciones y extensiones\n  Las acciones semánticas a ejecutar dentro del analizador son las de construcción del AST\n  Realice el reto\n\n\nRecursos\n\n\n  Análisis Sintáctico Ascendente en JavaScript\n  Jison Documentation\n  Folder jison/examples from the Jison distribution\n  Repo ULL-ESIT-PL-1718/jison-aSb\n  Apuntes de PL: Análisis Sintáctico Predictivo Recursivo\n  Repo con una solución a un lenguaje infijo\n    \n      Despliegue en Heroku\n      Fichero main.js con un parser de expresiones en infijo\n    \n  \n  Repo de Ejemplo de lenguaje con expresiones infijas\n  Repo con una solución a Eloquent JS. Chapter 12 Project. A Programming Language\n  Mocha\n  Chai\n  Covering\n  Blanket\n\n\n",
    "url": "/assets/temas/syntax-analysis/analisis-LR/practicas/p10-t5-jison-infix2egg/"
  },
  
  {
    "title": "The JS Event Loop",
    "excerpt": "\n",
    "content": "{% include event-loop.md %}\n",
    "url": "/assets/temas/introduccion-a-javascript/event-loop/"
  },
  
  {
    "title": "De Infijo a Egg usando PEG.js",
    "excerpt": "\n",
    "content": "Descripción\n\nRe-escriba la fase de análisis sintáctico del lenguaje de infijo que diseñó en la práctica\n\n\n  Analizador Descendente Predictivo Recursivo. Desde Lenguajes de Infijo a EGG Virtual Machine (p8-t3-pdr-infix2eg)\n\n\nusando PEG.js para re-escribir el analizador sintáctico.\n\nEn su parser irá:\n\n\n  El análisis léxico y sintáctico del lenguaje.\n  Conviene dividir el analizador en dos secciones bien diferenciadas con la parte de tokens en un lado y la gramática en el otro\n  Este es un buen momento para meditar su diseño del lenguaje de infijo e introducir modificaciones y extensiones\n  Las acciones semánticas a ejecutar dentro del analizador son las de construcción del AST\n\n\n\n\nOpciones del Compilador\n\nHaga que el ejecutable admita opciones en línea de comandos. Algo parecido a esto:\n\n  [.../p9-t4-peg-infix2egg-04-16-2020-03-18-25/davafons(master)]$ bin/infix2egg.js --help\n  Usage: infix2egg [options]\n\n  Options:\n    -V, --version              output the version number\n    -r --run &lt;fileName&gt;        compiles the input infix program and runs it using the egg interpreter\n    -c --compile &lt;fileName&gt;    compile the infix program to produce a JSON containing the input egg AST\n    -i --interpret &lt;fileName&gt;  interprets the egg AST\n    -h, --help                 output usage information\n\n\nBuenos módulos para parsear la línea de comandos son commander y yargs\n\nEjemplo de posible sintáxis\n\n[.../p9-t4-peg-infix2egg-04-16-2020-03-18-25/davafons(master)]$ cat examples/array.pl\n\nbegin\n  let emptyArray = [];\n  call print(emptyArray);\n\n  let x = [2, 3, [1, 2, 3]];\n  call print(x[2][1]);\n\n  x[2][1] = 100;\n  call print(x[2]);\nend\n\n\nEjecución:\n[.../p9-t4-peg-infix2egg-04-16-2020-03-18-25/davafons(master)]$ bin/infix2egg.js -r examples/array.pl\n[]\n2\n[ 1, 100, 3 ]\nReturn value: 1,100,3\n\n\nRecursos\n\n\n  Un ejemplo breve de como hacer esta práctica: pegjs-infix-2-egg\n  PEGs Viejos apuntes del profesor\n  PEG.js PEG.js Documentation\n  El lenguaje egg: repo en GitHub\n  Eloquent JS: Chapter 11. Project: A Programming Language\n  Repo interpreter-egg\n  NodeJS Readline gist\n  Apuntes de PL: Análisis Sintáctico Predictivo Recursivo\n  Mocha\n  Chai\n  Covering\n  Blanket\n\n\n",
    "url": "/assets/temas/syntax-analysis/parsing-expression-grammars/practicas/p9-t4-peg-infix2egg/"
  },
  
  {
    "title": "Inheritance and Scopes in Egg",
    "excerpt": "\n",
    "content": "JavaScript — Inheritance, delegation patterns and Object linking\n\n\n  JavaScript — Inheritance, delegation patterns and Object linking\n\n\nScopes in Egg\n\nThis figure illustrates the chain of environment objects for the code trace explained in the video class below\n\n\n\ncorresponding to the code\n\ndo(\n  define(sum,  # function\n    fun(nums, other,\n      do(\n         print(other),\n         define(i, 0),\n         define(sum, 0),\n         while(&lt;(i, length(nums)),\n           do(define(sum, +(sum, element(nums, i))),\n              define(i, +(i, 1))\n           )\n         ),\n         sum\n      )\n   )\n ),\n print(sum(array(1, 2, 3), 4))\n)\n\nwhen inside the generated function for sum\n\n{% include video provider=”youtube” id=”LQ4abpHBYhA” %}\n\nThe proto\n\n… Most modern browsers, however, do offer property available called \n__proto__ \n(that’s 2 underscores either side), which contains the object’s constructor’s \nprototype object. For example, try localenv.__proto__ and localenv.__proto__.__proto__ \nto see what the prototype chain looks like in code!\n",
    "url": "/assets/temas/syntax-analysis/analisis-descendente-predictivo-recursivo/inheritance-and-scopes-in-egg.html"
  },
  
  {
    "title": "Jekyll",
    "excerpt": "\n",
    "content": "A static site generator (SSG) (see https://www.staticgen.com/ is a compromise between using a hand-coded static site and a full content management system (CMS). You generate an HTML-only website using raw data (such as Markdown files) and templates. The resulting build is transferred to your live server.\n\n\n\nJekyll, Elevently and hexo are examples of SSG.\n\nRecuerda que GitHub provee un servicio de Hosting de páginas estáticas (GitHub Pages) que se sirven mediante Jekyll.\n\n\n  Jekyll docs\n  Using Jekyll with Bundler\n\n\nJekyll Documentation and Tutorials\n\n\n  Pages\n  Posts\n  Front Matter\n  Collections\n  Page Sections in Jekyll - Separating Content from Layout\n  Explain like I’m five: Jekyll collections\n  Data Files\n  Why I love Jekyll Data Files - Chen Hui Jing // JekyllConf 2019 YouTube\n  Assets\n  Static Files\n\n\nSite Structure\n\n\n  Directory Structure\n  Liquid\n  Liquid Sandbox: You can test your Liquid code here. This sandbox only loads the default Liquid methods \n  Variables\n  Includes\n  Layouts\n  Permalinks\n  Themes\n  Pagination\n\n\nUsing Jekyll with Docker\n\n\n  docker\n\n\n{% include jekyll-with-docker.md %}\n\nJekyll: Como preparar un informe de Prácticas usando GitHub Pages\n\n\n  Como preparar un informe de Prácticas usando Jekyll y GitHub Pages\n\n\nTutorials\n\nTutorials\nVideo Walkthroughs\nNavigation\nOrder of interpretation\n\nCustom 404 Page\n\nAn Example of a 404 page\n\n~/.../pl1920/apuntes(master)]$ cat 404.md \n\n\n---\nlayout: error\ntitle: Error\n---\n# Error: ¡Ay Diós mío!\n\n## Aún no he escrito esta página. \n\n\n&lt;div&gt;\n&lt;style&gt;\nimg, #quote, #comment-cat {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n#author {\n  float: right;\n}\n&lt;/style&gt;\n\n\n&lt;div id=\"comment-cat\"&gt;&lt;/div&gt;\n&lt;div id=\"cat\"&gt;&lt;/div&gt;\n&lt;br/&gt;\n&lt;div id=\"quote\"&gt;&lt;/div&gt;\n&lt;div id=\"author\"&gt;&lt;/div&gt;\n\n\n&lt;script type=\"text/javascript\"&gt;\n\n/*\n  https://docs.thecatapi.com/ \n*/\nconst URL = 'https://api.thecatapi.com/v1/images/search?size=full';\n\n(async function() {\n  try {\n    \n    // CAT \n    let divTitle = document.getElementById(\"comment-cat\");\n    \n    let divcat = document.getElementById(\"cat\");\n    let response = await fetch(URL, {\n       headers: {\n       'x-api-key': \"56a4f1cc-7f60-468d-9dba-e4b6f04b7c7d\"\n       }\n    });\n    let cat = await response.json();\n    // console.log(cat);   \n    let img = document.createElement(\"img\");\n    let title = document.createElement(\"h2\");\n    title.innerText = \"Consuélate con un gatito\";   \n    divTitle.append(title);\n    img.src = cat[0].url;\n    divcat.appendChild(img);   \n\n    // QUOTE\n    const quoteDiv = document.getElementById(\"quote\");\n    const authorDiv = document.getElementById(\"author\");\n    \n    const quoteRes = await fetch('https://api.quotable.io/random');\n    const data = await quoteRes.json();\n    quoteDiv.innerHTML = `&lt;h2&gt;${data.content}&lt;/h2&gt;`;\n    authorDiv.innerHTML = `&lt;h3&gt;—${data.author}&lt;/h3&gt;`;\n  }\n  catch(e) { \n    console.log(e);\n  }\n})();\n&lt;/script&gt;\n\n&lt;/div&gt;\n\n\nConvert an HTML site to Jekyll\nUsing Jekyll with Bundler\n\nThe Jekyll Conference\n\n\n  The free, online global conference for all things Jekyll\nBest Practices, Advanced Case Studies, The Future of Jekyll\n\n\nCloudCannon: The Cloud CMS for Jekyll\n\nCloudCannon is cloud content management system and hosting provider for Jekyll websites. The way it works is this:\n\n\n  A developer uploads a Jekyll site in the browser or syncs with GitHub, Bitbucket or Dropbox.\n  CloudCannon builds the site, hosts it and\n  provides an interface for non-technical people to update content.\n\n\n\n  CloudCannon\n  Client editable Jekyll sites\n\n\nEditors\n\n\n  Forestry is an editor-friendly interface over Git. This means that developers and editors can now use the same workflow and tool set.\n\n\nThemes\n\nWith gem-based themes, some of the site’s directories (such as the assets, _layouts, _includes, and _sass directories) are stored in the theme’s gem, hidden from your immediate view. Yet all of the necessary directories will be read and processed during Jekyll’s build process.\n\nYou can run bundle update &lt;THEME&gt;, replacing &lt;THEME&gt; with the theme name, such as minima, to just update the theme gem:\n\n~/.../sytws1920/apuntes(master)]$ bundle update jekyll-theme-midnight\nFetching gem metadata from https://rubygems.org/...........\nFetching gem metadata from https://rubygems.org/.\nResolving dependencies...\nUsing concurrent-ruby 1.1.5\n...\nBundler attempted to update jekyll-theme-midnight but its version stayed the same\nBundle updated!\n\n\n\n  Themes documentation\n  Jekyll and Project Documentation Themes\n  documentation-theme-jekyll Un tema muy interesante\n\n\nConverting a Jekyll Web Site to PDF\n\n\n  Prince\n  PDFKit\n  GitHub repo wkhtmltopdf: Convert HTML to PDF using Webkit (QtWebKit) see https://wkhtmltopdf.org\n\n\nBlog: A Collection of Music Albums\n\n\n  How to maintain a collection of music albums online, using Jekyll and Github Pages. See it at http://adrienjoly.com/album-shelf/\n\n\nReact and Jekyll\n\n\n  A npm package providing a Jekyll Boilerplate with React using Webpack (Not supported by GitHub Pages)\n    \n      Blog: Start building your great modern static website with this boilerplate using Jekyll, React and Webapck.\n    \n  \n\n\nAuth and Jekyll\n\n\n  benbalter/jekyll-auth: A simple way to use GitHub OAuth to serve a protected Jekyll site to your GitHub organization\n\n\nE-commerce\n\n\n  Jekyll E-Commerce Tutorial: Add a Shopping Cart to Your Static Website 2019\n  Headless E-Commerce: What, Why, &amp; How (Tools Included) 2018\n  GitHub repo:A Jekyll based shopping cart built with simpleCart(js)\n  Jekyll Cart Demo Video en YouTube\n\n\nDeveloping\n\n\n  Change site.url to localhost during jekyll local development\n\n\n”\n\nThis is a common problem between different Jekyll environments.\n\nSome explanations\n\nWe need to understand site.url and site.baseurl and in which situation we need them. Those variables don’t serve the same purpose.\n\nsite.url\n\nBy default, this variable is only used in page head for the canonical header and the RSS link. It’s also used in the xml feed to point to site resources as the software that will manage this feed doesn’t know resource’s urls.\n\nThis variable is only necessary for external systems.\n\nsite.baseurl\n\nThis variable indicates the root folder of your Jekyll site. By default it is set to \"\" (empty string). That means that your Jekyll site is at the root of http://example.com.\n\nIf your Jekyll site lives in http://example.com/blog, you have to set site.baseurl to /blog (note the slash). This will allow assets (css, js) to load correctly.\n\nSee how assets are loaded in you head :\n\n&lt;link rel=\"stylesheet\" href=\"{{ \"/css/main.css\" | prepend: site.baseurl }}\"&gt;\n\n\nthat can also be :\n\n&lt;link rel=\"stylesheet\" href=\"{{ site.baseurl }}/css/main.css\"&gt;\n\n\nWorking in different environments\n\nNow you have to test your site locally and to deploy it in production. Sometimes, the baseurl is different and the jekyll build may not work out of the box in one of those environment.\n\nHere we have two solutions :\n\nUse jekyll serve\n\nLet’s imagine that your site lives in a github repository and is served at https://username.github.io/myProject.\n\nYou can setup the baseurl to /myProject. and test your site locally with jekyll serve, your site will be served at http://127.0.0.1:4000/myProject/\n\nUse multiple configuration files\n\nIf, for one reason or another, you cannot use jekyll serve, you can set a configuration file for both environment and jekyll build depending on where you are deploying.\n\nLet’s say we have the local site served at http://localhost and the production site served at https://username.github.io/myProject.\n\nWe leave the _config.yml with url: https://username.github.io and baseurl: /myProject\n\nWe create a new _config_dev.yml with only url: https://localhost and baseurl: \"\"\n\nNow to test locally :\n\njekyll build --config _config.yml,_config_dev.yml\n\n\nor\n\njekyll build --config _config.yml,_config_dev.yml --watch\n\n\nWhen pushed on production, the jekyll build command will use the default _config.yml.\n\nTesting HTML pages\n\nHTMLProofer\n\n\n  When testing Jekyll output, there is no better tool than html-proofer.\nThis tool checks your resulting site to ensure all links and images exist.\nUtilize it either with the convenient htmlproofer command-line executable,\nor write a Ruby script which utilizes the gem\n\n\nusuario@ubuntu:~/src/ull-mii-sytws-1920.github.io$ bundle exec htmlproofer ./_site --disable-external\nRunning [\"ImageCheck\", \"ScriptCheck\", \"LinkCheck\"] on [\"./_site\"] on *.html... \n\n\nRan on 158 files!\n\n\n- ./_site/2019/09/30/leccion.html\n  *  internally linking to /practicas, which does not exist (line 31)\n     &lt;a href=\"/practicas\" title=\"Prácticas\"&gt;✍&lt;/a&gt;\n  *  internally linking to /practicas, which does not exist (line 129)\n     &lt;a href=\"/practicas\" title=\"Prácticas\"&gt;✍&lt;/a&gt;\n- ./_site/404.html\n  *  internally linking to /practicas, which does not exist (line 31)\n     &lt;a href=\"/practicas\" title=\"Prácticas\"&gt;✍&lt;/a&gt;\n     ... many more entries\n\n\nLet us see if its true. Instead of running with jekyll serve, I use a static server to see if the build \nis really consistent:\n\nusuario@ubuntu:~/src/ull-mii-sytws-1920.github.io/_site$ static-server -p 8080\noptions.index is now deprecated please use options.templates.index instead.\n* Static server successfully started.\n* Serving files at: http://localhost:8080\n* Press Ctrl+C to shutdown.\n&lt;-- [GET] /2019/09/30/leccion.html\n--&gt; 200 OK /2019/09/30/leccion.html 5.63 KiB (15.964ms)\n...\n&lt;-- [GET] /practicas/\n--&gt; 403 /practicas/ (2.199ms)\n&lt;-- [GET] /favicon.ico\n\n\nSee the 403 /practicas/ (2.199ms) warning.\n\nIt seems htmlproofer is right in spite that it works in github.io\n\nWe use HTMLProofer to test our web site.\nHere is an example of use:\n\nRakefile task for testing\n\n~/.../sytws1920/ull-mii-sytws-1920.github.io(master)]$ cat Rakefile \n\n\ndesc \"sytws: bundle exec jekyll serve --watch\"\ntask :serve do\n  sh \"bundle exec jekyll serve --future --watch --port 8080 --host 10.6.128.216\"\nend\n\n... # more tasks\n\nrequire 'html-proofer'\ndesc \"test links in the build web site\"\ntask :test do\n  sh \"bundle exec jekyll build\"\n  options = { \n    :assume_extension =&gt; true, \n    :disable_external =&gt; true, \n    :empty_alt_ignore =&gt; true,\n    :file_ignore =&gt; [ %r{categories} ]\n  }\n  HTMLProofer.check_directory(\"./_site\", options).run\nend\n\n\nTesting with GitHub Actions\n\nHere is an example of using the action Proof-HTML to check the health of our site:\n\n{% raw %}\n➜  apuntes git:(main) ✗ cat .github/workflows/testHTML.yml\nname: CI\non:\n  push:\n  schedule:\n    - cron: '0 8 * * 6'\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-ruby@v1\n        with:\n          ruby-version: 2.7.x\n      - uses: actions/cache@v2\n        with:\n          path: vendor/bundle\n          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-gems-\n      - run: |\n          bundle config path vendor/bundle\n          bundle install --jobs 4 --retry 3\n      - run: bundle exec jekyll build\n      - uses: anishathalye/proof-html@v1\n        with:\n          directory: ./_site\n          enforce_https: false\n          tokens: |\n            {\"https://github.com\": \"${{ secrets.GITHUB_TOKEN }}\"}\n          url_ignore: |\n            http://www.example.com/\n            https://en.wikipedia.org/wiki/Main_Page\n          url_ignore_re: |\n            ^https://twitter.com/\n\n{% endraw %}\n\nTesting with HTMLProofer and Travis\n\n\n  Using HTMLProofer From Ruby and Travis\n\n\nJekyll as a Web Service\n\n\n  Jekyll JSON API\n\n\nMaths y Jekyll\n\nSee the tutorial:\n\n\n  Adding MathJax to a GitHub Pages Jekyll Blog\n\n\nSummarizing, the simplest way is to add a line like:\n\n&lt;!-- Mathjax Support  --&gt;\n&lt;script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML' async&gt;&lt;/script&gt;\n\n\nat then end of your layout.\n\nHere is an example of what you can do:\n\n$$ r = h = \\sqrt{\\frac {1} {2}} = \\sqrt{\\frac {N} {N+1}} \\sqrt{\\frac {N+1} {2N}} $$\n\n\nthat renders as:\n\n\\[r = h = \\sqrt{\\frac {1} {2}} = \\sqrt{\\frac {N} {N+1}} \\sqrt{\\frac {N+1} {2N}}\\]\n\nWorking with upcoming posts in Jekyll\n\nWe used to work on more than one post at a time and publish them in future. \nSo you just want to test them while writing the blog, but you don’t want publish them to your live blog immediately. There are  different ways to achieve this in jekyll. This article discuss several workflows:\n\n\n  Working with upcoming posts in Jekyll\n\n\nCursos en YouTube de Jekyll and NetlifyCMS por Thomas Bradley\n\n\n  Jekyll\n  Jekyll + NetlifyCMS 14 Youtube videos\n  Jekyll + Patternbot\n\n\nChen Hui Jing Talks on Jekyll\n\n\n  Chen Hui Jing talks on Jekyll\n  Chen Hui Jing talks Slides in reveal.js\n\n\nPráctica jekyll-netlify\n\n\n  Práctica jekyll-netlify\n  Práctica jekyll-search\n\n",
    "url": "/assets/temas/introduccion-a-javascript/jekyll.html"
  },
  
  {
    "title": "Posibles Organizaciones del Proyecto",
    "excerpt": "\n",
    "content": "Las jerarquías de ficheros presentadas son orientativas.\n\nResultar conveniente aislar en clases y en módulos \nel analizador léxico, el sintáctico, el runner, etc.\n\nEjemplo 1\n\n➜  egg-4-alu0100966589 git:(master) ✗ tree -I 'node_modules|docs'\n.\n├── README.md\n├── bin\n│   └── egg.js\n├── examples\n│   ├── a.egg\n│   ├── array.egg\n│   ├── bad-function.egg\n│   ├── curlyBrackets.egg\n│   ├── differentParenthesis.egg\n│   ├── error.egg\n│   ├── greater-x-5.egg\n│   ├── if.egg\n│   ├── main.js\n│   ├── main2.js\n│   ├── map.egg\n│   ├── obj.egg\n│   ├── objects.egg\n│   ├── one-err-2.egg\n│   ├── one-err.egg\n│   ├── one.egg\n│   ├── require.egg\n│   ├── rest.egg\n│   ├── scope.egg\n│   ├── spread.egg\n│   ├── string.egg\n│   ├── stringRegexp.egg\n│   ├── sum.egg\n│   └── two.egg\n├── gulpfile.js\n├── lib\n│   ├── ast_nodes.js\n│   ├── egg_repl.js\n│   ├── eggvm.js\n│   ├── lexer\n│   │   └── token\n│   │       ├── Token.js\n│   │       ├── token_info.js\n│   │       └── token_types.js\n│   ├── parse.js\n│   ├── public.js\n│   ├── repl_plugins.js\n│   ├── specialForms.js\n│   ├── topEnv.js\n│   └── utils\n│       └── getSetElement.js\n├── package-lock.json\n├── package.json\n├── plugins\n│   ├── loops.js\n│   ├── object.js\n│   └── require.js\n└── test\n    ├── eggvm.test.js\n    ├── lexer.test.js\n    ├── program.test.js\n    └── test.js\n\n8 directories, 48 files\n\n\nScripts\n\nScripts:\n\n➜  egg-4-alu0100966589 git:(master) ✗ npm run\nLifecycle scripts included in @alu0100966589/egg:\n  test\n    mocha\n\navailable via `npm run-script`:\n  watch\n    mocha --watch\n  compile\n    ./bin/egg.js -c\n  interpret\n    ./bin/egg.js -i\n  run\n    ./bin/egg.js -r\n  repl\n    ./bin/egg.js\n  compile-example\n    ./bin/egg.js -c examples/a.egg\n  interpret-example\n    ./bin/egg.js -i examples/a.egg.evm\n  run-example\n    ./bin/egg.js -r examples/a.egg\n\n\nEjemplo de uso. Dados los ficheros:\n\n➜  egg-4-alu0100966589 git:(master) ✗ cat examples/require.egg \ndo(\n    def(str, require(\"examples/a.egg\")),\n    print(str)\n)\n\n➜  egg-4-alu0100966589 git:(master) ✗ cat examples/a.egg      \nprint(\"\\thello\\nworld\\u2764\")\n\n\nPodemos ejecutarlo de esta forma:\n\n➜  egg-4-alu0100966589 git:(master) ✗ bin/egg.js -p ../plugins/require.js -r examples/require.egg \n        hello\nworld❤\n        hello\nworld❤\n\n\nEjemplo 2\n\nEste es un ejemplo de como organizar su jerarquía de ficheros de una forma escalable:\n\n[.../TFA-04-16-2020-03-22-00/davafons(master)]$ tree -I 'node_modules|docs'\n.\n├── LICENSE\n├── README.md   // Documentación del paquete y del proyecto\n├── bin\n│   └── egg.js  // usando opciones en línea de comandos: -c compilar, -i interpretar, etc\n├── esdoc.json  // documentación: vea https://esdoc.org/\n├── docs\n│   └── ...     // Documentación generada. Configurar GitHub Pages \n├── examples    // Ejemplos: son reutilizados en las pruebas\n│   ├── array-index.egg\n|   ├── ... \n│   ├── trycatch.egg.evm\n│   ├── two.egg\n│   └── two.egg.evm\n├── index.js // Entry point: exporta todo lo que necesita el ejecutable\n├── lib\n│   ├── interp\n│   │   ├── arithm.js      // Extensiones aritméticas: ++, --, +=, ...\n│   │   ├── ast.js         // Las clases del AST: Value, Word, Apply, Regex, ...\n│   │   ├── eggvm.js       // Clase con los runners: runFromFile, runFromEVM, run, ...\n│   │   ├── environment.js // main del environment. Exporta  SpecialForms y TopEnv. Usa registry\n│   │   ├── exceptions.js  // Extiende Egg con try, throw, ...\n│   │   ├── index.js       // main: exporta todas las clases del intérprete: Eggvm, Value, Word, Apply, Regex, TopEnv, SpecialForms, ...\n│   │   ├── monkey-patching.js // Manipulacion de las clases de JS (Object, Array, etc.)\n│   │   ├── registry.js   // Exporta los mapas para exensión SpecialForms,  TopEnv, ...  \n│   │   └── require.js    // Soporte para módulos en Egg\n│   ├── parser\n│   │   ├── index.js      // main de Parser: exporta todas las clases públicas: Eggvm,Value, Word, Apply, Regex, TopEnv, SpecialForms ...\n│   │   ├── json2AST.js   //  Desde el JSON construimos el AST con clases\n│   │   ├── lexer.js      // Exporta Clase Analizador Léxico. Usa tokenRe\n│   │   ├── optimizer.js  // Optimizaciones (constant folding)\n│   │   ├── parse.js      // Análisis Sintáctico\n│   │   ├── semantic.js   // Análisis Semántico\n│   │   └── tokenRegex.js //Exporta la clase para los objetos Token \n│   ├── repl              // soporte para Repeat Evaluate Print Loop\n│   │   ├── colors.js     // Colorines usando ansi-colors \n│   │   ├── extensions.js // Extensiones: help() info() clear() ...\n│   │   └── repl.js       // El bucle\n│   └── utils.js // Helpers comunes\n├── package-lock.json  // bajo control de versiones\n├── package.json // configurado para publicar como módulo en GitHub registry\n└── test\n    ├── examples-test.js // Ejecución de ejemplos contra salida esperada\n    ├── ...   \n    └── tokenRegex-test.js \n\n\nScripts\n\nEs conveniente tener algunos scripts preparados en el package.json \ncomo:\n\n.../TFA-04-16-2020-03-22-00/davafons(master)]$ npm run\nLifecycle scripts included in eggtended-js:\n  test\n    nyc mocha\n\navailable via `npm run-script`:\n  coverage\n    nyc report --reporter=text-lcov | coveralls\n  docs\n    esdoc -c esdoc.json\n\n\n\n  coverage: tests y cubrimiento usando Istanbul command line interface\n  docs: esdoc usage\n\n\nEjemplo 3\n\n➜  cristo-daniel-luciana-tfa-1920-egg git:(master) ✗ tree -I 'docs|node_modules'\n.\n├── README.md\n├── bin\n│   ├── egg.js\n│   ├── eggRun.js\n│   ├── eggc.js\n│   └── evm.js\n├── examples\n│   ├── arithm.egg\n│   ├── array-properties.egg\n│   ├── calling-function-err.egg\n│   ├── compile-to-js # Traducción a JavaScript. Comprobaciones\n│   │   ├── casiano-spread.egg\n│   │   ├── casiano-spread.egg.js\n│   │   ├── empty-funcion.egg\n│   │   ├── empty-funcion.egg.js\n│   │   ├── for-each.egg\n│   │   ├── for-each.egg.js\n│   │   ├── for.egg\n│   │   ├── for.egg.js\n│   │   ├── fun-default-value.egg\n│   │   ├── fun-default-value.egg.js\n│   │   ├── fun.egg\n│   │   ├── fun.egg.js\n│   │   ├── if.egg\n│   │   ├── if.egg.js\n│   │   ├── map.egg\n│   │   ├── map.egg.js\n│   │   ├── object.egg\n│   │   ├── object.egg.js\n│   │   ├── prueba.egg\n│   │   ├── prueba.egg.js\n│   │   ├── regex-2.egg\n│   │   ├── regex-2.egg.js\n│   │   ├── while.egg\n│   │   ├── while.egg.evm\n│   │   └── while.egg.js\n│   ├── constant-folding # Plegado de Constantes. Transformación  Árbol\n│   │   ├── advanced-folding.egg\n│   │   ├── advanced-folding.egg.evm\n│   │   ├── basic-folding.egg\n│   │   └── basic-folding.egg.evm\n│   ├── constant-propagation\n│   │   ├── basic-propagation.egg\n│   │   └── basic-propagation.egg.evm\n│   ├── define-err.egg\n│   ├── define.egg\n│   ├── if-example-err.egg\n│   ├── if-example.egg\n│   ├── looping-invariance\n│   │   ├── function-invariance.egg\n│   │   ├── function-invariance.egg.evm\n│   │   ├── while-invariance.egg\n│   │   └── while-invariance.egg.evm\n│   ├── map-js-chain.egg\n│   ├── method-concatenation.egg\n│   ├── method.egg\n│   ├── method.egg.js\n│   ├── method2.egg\n│   ├── method3.egg\n│   ├── multi-sub-array.egg\n│   ├── number-as-fun-err.egg\n│   ├── one.egg\n│   ├── one.egg.evm\n│   ├── probando.egg\n│   ├── require\n│   │   ├── client.egg\n│   │   ├── client.egg.expected\n│   │   └── module.egg\n│   ├── reto.egg\n│   ├── reto.egg.js\n│   ├── scope-err.egg\n│   ├── scope.egg\n│   ├── set-multiarray.egg\n│   ├── setting-undefined-err.egg\n│   ├── string-apply.egg\n│   ├── string-apply.egg.evm\n│   ├── two.egg\n│   ├── two.egg.evm\n│   ├── while-err.egg\n│   ├── while.egg\n│   └── while.egg.evm\n├── lib\n│   ├── addon\n│   │   ├── constant-folding.js\n│   │   ├── looping-invariance.js\n│   │   ├── require.js\n│   │   └── scope-analysis.js\n│   ├── compile-to-javascript\n│   │   └── eggtojscompiler.js\n│   ├── interp\n│   │   ├── arithm.js\n│   │   ├── ast.js\n│   │   ├── eggvm.js\n│   │   ├── monkey-patching.js\n│   │   └── registry.js\n│   ├── parser\n│   │   ├── json2AST.js\n│   │   └── parse.js\n│   ├── repl\n│   │   ├── colors.js\n│   │   ├── egg-repl.js\n│   │   └── extensions.js\n│   └── utils.js\n├── package-lock.json\n├── package.json\n└── test\n    ├── examples\n    │   ├── array-index.egg\n    │   ├── array-index.egg.expected\n    │   ├── array-neg.egg\n    │   ├── array-neg.egg.expected\n    │   ├── array-properties.egg\n    │   ├── array-properties.egg.expected\n    │   ├── array-set-index.egg\n    │   ├── array-set-index.egg.expected\n    │   ├── calling-function-err.egg\n    │   ├── class\n    │   │   ├── class-1-err.egg\n    │   │   ├── class-1.egg\n    │   │   ├── class-1.egg.evm\n    │   │   ├── class-1.egg.expected\n    │   │   ├── class-cons-err.egg\n    │   │   ├── class-multiple-method.egg\n    │   │   ├── class-multiple-method.egg.expected\n    │   │   ├── method-invariance.egg\n    │   │   ├── method-invariance.egg.evm\n    │   │   ├── method-invariance.egg.expected\n    │   │   ├── multiple-class-object.egg\n    │   │   ├── multiple-class-object.egg.expected\n    │   │   ├── multiple-objects.egg\n    │   │   └── multiple-objects.egg.expected\n    │   ├── compile-to-js\n    │   │   ├── casiano-spread.egg\n    │   │   ├── casiano-spread.egg.js\n    │   │   ├── empty-funcion.egg\n    │   │   ├── empty-funcion.egg.js\n    │   │   ├── for-each.egg\n    │   │   ├── for-each.egg.js\n    │   │   ├── for.egg\n    │   │   ├── for.egg.js\n    │   │   ├── fun-default-value.egg\n    │   │   ├── fun-default-value.egg.js\n    │   │   ├── fun.egg\n    │   │   ├── fun.egg.js\n    │   │   ├── if.egg\n    │   │   ├── if.egg.js\n    │   │   ├── map.egg\n    │   │   ├── map.egg.js\n    │   │   ├── method-concatenation.egg\n    │   │   ├── method-concatenation.egg.js\n    │   │   ├── object.egg\n    │   │   ├── object.egg.js\n    │   │   ├── prueba.egg\n    │   │   ├── prueba.egg.js\n    │   │   ├── regex-2.egg\n    │   │   ├── regex-2.egg.js\n    │   │   ├── while.egg\n    │   │   └── while.egg.js\n    │   ├── const-definition-err.egg\n    │   ├── constant-folding\n    │   │   ├── advanced-folding.egg\n    │   │   ├── advanced-folding.egg.evm\n    │   │   ├── basic-folding.egg\n    │   │   └── basic-folding.egg.evm\n    │   ├── constant-propagation\n    │   │   ├── advanced-propagation.egg\n    │   │   ├── advanced-propagation.egg.evm\n    │   │   ├── advanced-scope-error.egg\n    │   │   ├── arithmetic-constant-folding.egg\n    │   │   ├── arithmetic-constant-folding.egg.evm\n    │   │   ├── basic-propagation.egg\n    │   │   ├── basic-propagation.egg.evm\n    │   │   ├── function-scope-error.egg\n    │   │   └── scope-error.egg\n    │   ├── child # Herencia a la JS\n    │   │   ├── child-casiano.egg\n    │   │   ├── child-casiano.egg.evm\n    │   │   ├── child-casiano.egg.expected\n    │   │   ├── child-modify.egg\n    │   │   ├── child-modify.egg.expected\n    │   │   ├── child-no-object.egg\n    │   │   ├── multiple-child.egg\n    │   │   └── multiple-child.egg.expected\n    │   ├── default-values # Valores por defecto en los parámetros de una función\n    │   │   ├── fun-default-error.egg\n    │   │   ├── fun-default-value.egg\n    │   │   ├── fun-default-value.egg.expected\n    │   │   └── more-arguments.egg\n    │   ├── define.egg\n    │   ├── define.egg.expected\n    │   ├── dot-num.egg\n    │   ├── dot-num.egg.expected\n    │   ├── dot-obj-2.egg\n    │   ├── dot-obj-2.egg.expected\n    │   ├── dot.egg\n    │   ├── dot.egg.evm\n    │   ├── dot.egg.expected\n    │   ├── for.egg\n    │   ├── for.egg.evm\n    │   ├── for.egg.expected\n    │   ├── foreach.egg\n    │   ├── foreach.egg.expected\n    │   ├── if-example-err.egg\n    │   ├── if-example.egg\n    │   ├── if-example.egg.expected\n    │   ├── looping-invariance\n    │   │   ├── 2-for-invariance.egg\n    │   │   ├── 2-for-invariance.egg.evm\n    │   │   ├── 2-whiles-invariance.egg\n    │   │   ├── 2-whiles-invariance.egg.evm\n    │   │   ├── 2-whiles-invariance.egg.expected\n    │   │   ├── alone-function.egg\n    │   │   ├── alone-function.egg.evm\n    │   │   ├── for-invariance.egg\n    │   │   ├── for-invariance.egg.evm\n    │   │   ├── function-invariance.egg\n    │   │   ├── function-invariance.egg.evm\n    │   │   ├── if-invariance.egg\n    │   │   ├── if-invariance.egg.evm\n    │   │   ├── if-invariance.egg.expected\n    │   │   ├── test.egg\n    │   │   ├── test.egg.evm\n    │   │   ├── while-invariance-2.egg\n    │   │   ├── while-invariance-2.egg.evm\n    │   │   ├── while-invariance.egg\n    │   │   └── while-invariance.egg.evm\n    │   ├── map-colon.egg\n    │   ├── map-colon.egg.expected\n    │   ├── map-js-chain.egg\n    │   ├── map-js-chain.egg.expected\n    │   ├── map-sub.egg\n    │   ├── map-sub.egg.expected\n    │   ├── map.egg\n    │   ├── map.egg.evm\n    │   ├── map.egg.expected\n    │   ├── method-concatenation.egg\n    │   ├── method-concatenation.egg.expected\n    │   ├── method.egg\n    │   ├── method.egg.expected\n    │   ├── method2.egg\n    │   ├── method2.egg.expected\n    │   ├── method3.egg\n    │   ├── method3.egg.expected\n    │   ├── multi-sub-array.egg\n    │   ├── multi-sub-array.egg.expected\n    │   ├── objects.egg\n    │   ├── objects.egg.evm\n    │   ├── objects.egg.expected\n    │   ├── one.egg\n    │   ├── one.egg.expected\n    │   ├── regex-2.egg\n    │   ├── regex-2.egg.evm\n    │   ├── regex-2.egg.expected\n    │   ├── regex-simple.egg\n    │   ├── regex-simple.egg.expected\n    │   ├── require\n    │   │   ├── client.egg\n    │   │   ├── client.egg.expected\n    │   │   └── module.egg\n    │   ├── reto.egg\n    │   ├── reto.egg.expected\n    │   ├── scope-err.egg\n    │   ├── scope-err.egg.expected\n    │   ├── scope.egg\n    │   ├── scope.egg.expected\n    │   ├── set-error.egg\n    │   ├── set-multiarray.egg\n    │   ├── set-multiarray.egg.expected\n    │   ├── setting-undefined-err.egg\n    │   ├── spread-operator # Operator ... en Egg\n    │   │   ├── casiano-spread.egg\n    │   │   ├── casiano-spread.egg.evm\n    │   │   ├── casiano-spread.egg.expected\n    │   │   ├── default-spread.egg\n    │   │   ├── default-spread.egg.expected\n    │   │   ├── function-spread.egg\n    │   │   ├── function-spread.egg.expected\n    │   │   ├── spread-operator.egg\n    │   │   └── spread-operator.egg.expected\n    │   ├── string-apply.egg\n    │   ├── string-apply.egg.evm\n    │   ├── string-apply.egg.expected\n    │   ├── while.egg\n    │   └── while.egg.expected\n    ├── extra-test.js\n    ├── scopes.js\n    └── test.js\n\n24 directories, 263 files\n\n\nOpciones del ejecutable\n\n➜  cristo-daniel-luciana-tfa-1920-egg git:(master) ✗ node bin/eggRun.js --help\nOptions:\n  --version           Muestra número de versión                       [booleano]\n  --compile, -c       Input egg File to compile           [cadena de caracteres]\n  --run, -f           Run egg file from file              [cadena de caracteres]\n  --repl, -r          executes egg repl                               [booleano]\n  --evm, -e           Runs an egg program from its evm file\n                                                          [cadena de caracteres]\n  --addons, -a        Lets you use different addons, like require        [tabla]\n  --optimization, -o  Optimizes the ast with constants folding        [booleano]\n  --javascript, -j    Compiles to a new javascript file   [cadena de caracteres]\n  --help, -h          Muestra ayuda                                   [booleano]\n\n\nEjemplos de Ejecución\n\nDado el programa egg:\n\n  ➜  cristo-daniel-luciana-tfa-1920-egg git:(master) ✗ cat examples/constant-folding/advanced-folding.egg \ndo(\n  print(*(+(4, 6), -(/(8, 4), 1)))\n)%  \n\nal compilarlo -ccon la opción de optimización activada -o:\n\n  ➜  cristo-daniel-luciana-tfa-1920-egg git:(master) ✗ node bin/eggRun.js -o -c examples/constant-folding/advanced-folding.egg\n\n\nNos produce como salida este AST en el que observamos el pliegue:\n\n➜  cristo-daniel-luciana-tfa-1920-egg git:(master) ✗ cat examples/constant-folding/advanced-folding.egg.evm \n{\n  \"_type\": \"apply\",\n  \"_operator\": {\n    \"_type\": \"word\",\n    \"_value\": \"do\"\n  },\n  \"_args\": [\n    {\n      \"_type\": \"apply\",\n      \"_operator\": {\n        \"_type\": \"word\",\n        \"_value\": \"print\"\n      },\n      \"_args\": [\n        {\n          \"_type\": \"value\",\n          \"_value\": 10\n        }\n      ]\n    }\n  ]\n}%             \n\n",
    "url": "/assets/practicas/egg-method-evaluate/jerarquia-de-ficheros.html"
  },
  
  {
    "title": "Jest",
    "excerpt": "\n",
    "content": "Jest es un framework de prueba de código abierto.\n\nDesarrollado por Facebook e integrado en el popular paquete de create-react-app.\n\nnpm install --save-dev jest\n\n\nJest viene con capacidades de built-in mocking y aserción incorporadas. Además, Jest ejecuta sus pruebas simultáneamente en paralelo, lo que proporciona una ejecución de prueba más suave y más rápida.\n\nJest también proporciona snapshots testing.\n\n\n  Getting Started\n\n\nExample\n\n// If you want debugging output run it this way:\n// DEBUG=1 npm test\nconst debug = process.env[\"DEBUG\"];\nconst { inspect } = require('util');\nconst ins = (x) =&gt; { if (debug) console.log(inspect(x, {depth: null})) };\n\nconst buildLexer = require('./index');\n\nconst SPACE = /(?&lt;SPACE&gt;\\s+|\\/\\/.*)/;\nconst RESERVEDWORD = /(?&lt;RESERVEDWORD&gt;\\b(const|let)\\b)/;\nconst ID = /(?&lt;ID&gt;\\b([a-z_]\\w*))\\b/;\nconst STRING = /(?&lt;STRING&gt;\"([^\\\\\"]|\\\\.\")*\")/;\nconst OP = /(?&lt;OP&gt;[+*\\/=-])/;\n\nconst myTokens = [\n  ['SPACE', SPACE], ['RESERVEDWORD', RESERVEDWORD], ['ID', ID], \n  ['STRING', STRING], ['OP', OP] \n];\n\nlet str, lexer, r;\nlexer = buildLexer(myTokens);\n\nstr = 'const varName = \"value\"';\nins(str);\nr = lexer(str);\nins(r);\nlet expected = [\n  { type: 'RESERVEDWORD', value: 'const' },\n  { type: 'ID', value: 'varName' },\n  { type: 'OP', value: '=' },\n  { type: 'STRING', value: '\"value\"' }\n];\n\ntest(str, () =&gt; {\n  expect(r).toEqual(expected);\n});\n\nstr = 'let x = a + \\nβ';\nins(str);\nr = lexer(str);\nexpected = [\n  { type: 'RESERVEDWORD', value: 'let' },\n  { type: 'ID', value: 'x' },\n  { type: 'OP', value: '=' },\n  { type: 'ID', value: 'a' },\n  { type: 'OP', value: '+' },\n  { type: 'ID', value: 'β' }\n];\nins(r);\ntest(str, () =&gt; {\n  expect(r).toEqual(expected);\n});\n\n\nstr = ' // Entrada con errores\\nlet x = 42*c';\nins(str);\nr = lexer(str);\nins(r);\nexpected = [\n  { type: 'RESERVEDWORD', value: 'let' },\n  { type: 'ID', value: 'x' },\n  { type: 'OP', value: '=' },\n  { type: 'ERROR', value: '42*c' }\n];\n\ntest(str, () =&gt; {\n  expect(r).toEqual(expected);\n});\n\n\n\n  ULL-ESIT-PL-1920/lexer-generator (private)\n\n",
    "url": "/assets/temas/introduccion-a-javascript/jest.html"
  },
  
  {
    "title": "Parsing with Nearley.js",
    "excerpt": "\n",
    "content": "Introduction to Nearley.js\n\n\n  Nearley.JS Home Page\n  Nearley.JS GitHub repo is a JS parser generator using the Early algorithm\n    \n      Nearley.js Grammar in Nearley.js\n    \n  \n  Repo ULL-ESIT-PL/learning-nearley\n\n\nTokenizers for nearley.js\n\nmoo: Simple Example\n\nconst moo = require('moo')\nconst inspect = require('util').inspect;\nconst ins = (x) =&gt; console.log(inspect(x, {depth: null}));\n\nlet lexer = moo.compile({\n    WS: /[ \\t]+/,\n    comment: /\\/\\/.*?$/,\n    number: /0|[1-9][0-9]*/,\n    string: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/,\n    lparen: '(',\n    rparen: ')',\n    keyword: ['while', 'if', 'else', 'moo', 'cow'],\n    NL: { match: /\\n/, lineBreaks: true },\n});\n\nlexer.reset(\n//123456789AB\n 'while (10) cow\\nmoo'\n)\n\nconsole.log(lexer.next()) // -&gt; { type: 'keyword', value: 'while' }\nconsole.log(lexer.next()) // -&gt; { type: 'WS', value: ' ' }\nconsole.log(lexer.next()) // -&gt; { type: 'lparen', value: '(' }\nconsole.log(lexer.next()) // -&gt; { type: 'number', value: '10' }\nconsole.log(lexer.next()) // )\nconsole.log(lexer.next()) // cows\nconsole.log(lexer.next()) // \"\\n\"\nconsole.log(lexer.next()) // moo\nconsole.log('result='+ins(lexer.next())) // undefined\nconsole.log('result='+ins(lexer.next())) // undefined\nconsole.log('result='+ins(lexer.next())) // undefined\n\n\nSkipping White Spaces in Moo\n\nA moo lexer object is an Generator, you can use filter() and map() which are built-in to JavaScript.\n\nSee moo issue: https://github.com/no-context/moo/issues/156\n\nconst moo = require('moo')\nconst lex = moo.compile({\n  // If one rule is /u then all must be\n  ws: { match: /\\p{White_Space}+/u, lineBreaks: true },\n  word: /\\p{XID_Start}\\p{XID_Continue}*/u,\n  op: moo.fallback,\n});\n\n\nID_Start characters are derived from the Unicode General_Category. In set notation:\n\n/[\\p{L}\\p{Nl}\\p{Other_ID_Start}-\\p{Pattern_Syntax}-\\p{Pattern_White_Space}]/u\n\n\nID_Continue characters in set notation is:\n\n/[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Other_ID_Continue}-\\p{Pattern_Syntax}-\\p{Pattern_White_Space}]/\n\n\nSee https://unicode.org/reports/tr31/\n\nThe expression moo.fallback matches anything else. \nI believe is similar to:\n{ match: /(?:.|\\n)/u, lineBreaks: true}  \n\n\nObserve how we feed the lexer using the reset method.\nUsing the spread operator on the returned generator we get an array with the token \nobjects:\n\nconst result = [...lex.reset('while ( a &lt; 3 ) { a += 1; }')];\n\n\nSomething like:\n\n[\n  {\n    type: 'word',\n    value: 'while',\n    text: 'while',\n    toString: [Function: tokenToString],\n    offset: 0,\n    lineBreaks: 0,\n    line: 1,\n    col: 1\n  },\n  {\n    type: 'ws',\n    value: ' ',\n    text: ' ',\n    toString: [Function: tokenToString],\n    offset: 5,\n    lineBreaks: 0,\n    line: 1,\n    col: 6\n  },\n  ... etc.\n]\n\n\nWe can filter the array:\n\nlet filtered = result.filter(t =&gt; t.type !== 'ws');\nconsole.log(filtered.map(function (t) { return { type: t.type, value: t.value } }) );\n\n\nNo longer white spaces:\n\n[\n  { type: 'word', value: 'while' }, { type: 'op', value: '(' },\n  { type: 'word', value: 'a' }, { type: 'op', value: '&lt;' },\n  { type: 'op', value: '3' }, { type: 'op', value: ')' },\n  { type: 'op', value: '{' }, { type: 'word', value: 'a' },\n  { type: 'op', value: '+=' }, { type: 'op', value: '1;' },\n  { type: 'op', value: '}' }\n]\n\n\nRegrettably, Nearley.JS requires a Moo compatible lexer. That means we have to wrap the returned array in a lexer complaining with a Moo API!\n\nReferences\n\n\n  Tokenizers for nearley.js\n  moo\n  moo-ignore\n  nearley-moo\n\n\nToby Ho Course on How to Make a Parser with Nearley.JS\n\nPart One\n\nIn this drive by code session we’ll show you what a context-free grammar is and how to use it and Nearley to build parsers. JSON is used as the example language we’ll build the parser for.\n\n{% include video provider=”youtube” id=”51XwG1W2ysU” %}\n\nPart Two\n\nIn this drive by code session we continue making a JSON parser. After having make a working parser for a subset of the functionality in JSON, we’ll introduce the ability to embed JavaScript code in the grammar to customize the result of a parse. Again, Waikit wrote the code, and I’ll replay them and explain what he did. Enjoy!\n\n{% include video provider=”youtube” id=”BpAcf4X5rco” %}\n\nPart Three\n\nIn this drive by code session we’ll demonstrate how to handle whitespaces in a grammar using Nearley.js. The convention used in the video is based on the recommendations by Kartik Chandra - the creator of Nearley.js. As usual, Waikit drove the code before hand, and I’ll replay his code session and explain what he did.\n\nPart Four\n\nIn this episode we’ll demonstrate how to parse a string literal in JSON properly, continuing our series on building parsers using Nearley.js.\n\n{% include video provider=”youtube” id=”a2mZTBI1ZxU” %}\n\nPart Five\n\nContinuing in the series on making parsers, this time, we build a calculator that can add, subtract, multiply and divide. In particular, we tackle the issue of operator precedence.\n\n{% include video provider=”youtube” id=”fsXp3Oh7JUU” %}\n\nPerformance of NearleyJS\n\nThe study shows a case in which NearleyJS is 200 times solwer than a Recursive Descendant Functional parser :disappointed:.\n\n{% include video id=”njWmVljrhEE” provider=”youtube” %}\n\nReferences\n\n\n  fun-lang in Nearley.js GitHub Repo by Toby Ho\n    \n      scripts folder: How to run the compiler\n      Toby Ho has published a more advanced version of the language as a npm package:  play-lang\n    \n  \n  Parsing in JavaScript: Tools and Libraries\n  \n    Where:\n\n    /Users/casianorodriguezleon/campus-virtual/2021/learning/nearley-learning\n    \n  \n\n",
    "url": "/assets/temas/syntax-analysis/earley/nearley.html"
  },
  
  {
    "title": "CommonJS Modules. Importación y Exportación",
    "excerpt": "\n",
    "content": "\n  Introducción a los Módulos en JS por Manz\n  Talk NODE.JS module patterns using simple examples. Trasparencias. Muestra ejemplos/patrones de exportación-importación (Reveal Slides)\n  Authoring CommonJS modules  (CommonJS modules were conceived during the early days of server-side JavaScript environments such as node.js and Narwhal. As a result, CommonJS modules are optimized for these environments, not browser environments)\n\n\nEl comando npm\n\n\n  A Beginner’s Guide to npm — the Node Package Manager\n  npm\n  10 Tips and Tricks That Will Make You an npm Ninja\n\n\nEjercicio: Darse de alta en NPM\n\nPara comenzar, crearemos una cuenta de usuario en el repositorio de NPM mediante la cual publicar nuestros propios paquetes:\n\n\n  Abrir el navegador.\n  Ir a https://npmjs.org\n  Hacer clic en el enlace sign up\n  Rellenar el formulario de alta:\n    \n      \n    \n  \n  Aceptar los términos de licencia.\n  Hacer clic en el botón Create an Account para crear la cuenta.\n  Una vez creada la cuenta, hay que abrir sesión con el servidor NPM para poder publicar paquetes en él. Abrir una consola.\n  Conectar al repositorio:\n    \n      $ npm login\n      Rellene los datos que le solicita.\n      Consultar la cuenta con la que tenemos abierta la sesión:\n         $ npm whoami\n        \n      \n    \n  \n\n\nOtra forma de darse de alta desde línea de comandos:\n\n\n  \n    Ejecuta en la terminal estos comandos:\n\n              npm set init.author.name \"Casiano Rodriguez-Leon\"\n          npm set init.author.email \"whatever@gmail.com\"\n          npm set init.author.url \"https://github.com/crguezl\"\n    \n  \n  \n    El siguiente comando nos perdirá un email y una  password, creando o verificando \nun usuario en el npm registry, y \nguardará el token en el fichero \n~/.npmrc:\n\n              npm adduser\n    \n  \n\n\nCreación de Paquetes y Módulos en NodeJS\n\n\n  Creating and Publishing a Node.js Module\n  El paquete de ejemplo usado en este tutorial @ull-esit-dsi-1617/scapegoat en npm\n  El paquete de ejemplo usado en este tutorial @ull-esit-dsi-1617/scapegoat en GitHub\n\n\nInstalación desde GitHub\n\nYou can install packages directly from Github, and even specify a tag, sha, or branch if you want.\n\nnpm install https://github.com/ULL-ESIT-DSI-1617/scapegoat.git\nnpm install https://github.com/ULL-ESIT-DSI-1617/scapegoat.git#branch\n\n\nmust be https or git+ssh.\n\nSee How to install an npm package from GitHub directly? in StackOverflow\n\nPublicación con ámbito en una organización:\n\n[/tmp/scapegoat(master)]$ npm publish --access public\n+ @ull-esit-dsi-1617/scapegoat@1.0.2\n\n\nScoped Packages\n\n\n  There are only two hard things in Computer Science: cache invalidation and naming things.\n\n\n\n  —Phil Karlton\n\n\nNaming things is hard. It’s even harder when there are tens of thousands of other people who want to use the same names that you do. With hundred of thousands of modules on npm, it has been getting hard to find a name that isn’t taken.\n\nNaming things just got a little bit easier for npm users with the introduction of scopes.\n\nWhat are scopes?: Scopes are like namespaces for npm packages. Each npm user has their own scope.\n\n@username/project-name\n\nThis means that you don’t have to worry about someone else taking your package name. Only you can add packages in your scope.\n\nScoped modules also make it possible to put your private code on npm when you sign up for private modules. With private modules, you have control over who can see and collaborate on any of the modules in your scope.\n\nPublic scoped packages are free. To create a scoped package, all you need to do is add your scope to the front of the name property in package.json and run npm with the access option:\n\nnpm publish --access=public\n\n\n\n  Working with scoped packages\n  npm-scope manual: Scoped packages\n  Working with npm private modules. YouTube Video\n\n\nPackage.json\n\n\n  Package.json documentation en npm site\n\n\nEjemplo de package.json\n\n\t[~/javascript/evalua-module/scapegoat(master)]$ pwd -P\n\t/Users/casiano/local/src/javascript/evalua-module/scapegoat\n\t[~/javascript/evalua-module/scapegoat(master)]$ tree -I 'node_modules|docs'\n\t.\n\t├── LICENSE-MIT\n\t├── README.md\n\t├── index.js\n\t├── package.json\n\t└── test\n\t\t\t└── index.js\n\n\t1 directory, 5 files\n\t[~/javascript/evalua-module/scapegoat(master)]$ cat package.json\n\n\t{\n\t\t\"name\": \"@ull-esit-dsi-1617/scapegoat\",\n\t\t\"version\": \"1.0.4\",\n\t\t\"description\": \"A small library providing utility methods to escape and unescape HTML entities\",\n\t\t\"main\": \"index.js\",\n\t\t\"scripts\": {\n\t\t\t\"test\": \"./node_modules/.bin/mocha --reporter spec\",\n\t\t\t\"doc\": \"documentation build index.js -f html -o docs\"\n\t\t},\n\t\t\"repository\": {\n\t\t\t\"type\": \"git\",\n\t\t\t\"url\": \"git@github.com:ULL-ESIT-DSI-1617/scapegoat.git\"\n\t\t},\n\t\t\"keywords\": [\n\t\t\t\"escape\",\n\t\t\t\"unescape\",\n\t\t\t\"html\"\n\t\t],\n\t\t\"author\": \"Casiano Rodriguez &lt;casiano.rodriguez.leon@gmail.com&gt;\",\n\t\t\"licenses\": [\n\t\t\t{\n\t\t\t\t\"type\": \"MIT\",\n\t\t\t\t\"url\": \"https://github.com/ULL-ESIT-DSI-1617/scapegoat/blob/master/LICENSE-MIT\"\n\t\t\t}\n\t\t],\n\t\t\"bugs\": {\n\t\t\t\"url\": \"https://github.com/ULL-ESIT-DSI-1617/scapegoat/issues\"\n\t\t},\n\t\t\"devDependencies\": {\n\t\t\t\"mocha\": \"*\",\n\t\t\t\"chai\": \"*\"\n\t\t}\n\t}\n\n\nSemantic versioning and npm\n\n\n  Semantic versioning and npm\n  Semantic Versioning: Why You Should Be Using it SitePoint\n  YouTube Video: Semantic versioning and npm\n  El comando npm version\n\n\nnpm Organizations /npm Organizaciones\n\n\n  Introduction\n  Getting Started\n  Roles and Privileges\n  Managing Members\n  The Developers Team\n  Managing Teams\n  Publishing an Org Scoped Package\n  Configuring npm for your Org\n  Managing Package Access\n  Migrating a User Account\n  Managing Billing\n  Upgrading and Downgrading\n  Renaming and/or Deleting an Org\n\n\nMembers of an Organization are immediately added to a Developers team that automatically has Read/Write access to all packages published under an Organization scope\n\n\n  Publishing an Org Scoped Package\n    \n      \n        To create a new scoped package for your Organization scope, create a directory with the name of the package you would like to create. Navigate into that directory and use this command:\n\n                    npm init --scope=&lt;org_scope&gt;\n        \n      \n      \n        By default all scoped packages are published privately. To publish a scoped package publicly, pass the access flag with the value public:\n\n                    npm publish --access public\n        \n      \n    \n  \n  The developers team\n    \n      The Developers Team is a special Team that is automatically created when you create an Organization.\n      Members are automatically added to the Developers team:\n        \n          The user who created the Organization is added to this team automatically.\n          Any member added to the Organization is also added to this team automatically.\n          If an Owner adds a new Member to an Organization and does not want that Member to be on the Developers team, an Owner can remove them. (Learn more about managing teams).\n        \n      \n    \n  \n  npm-team: Manage organization teams and team memberships\n  npm-access: Set access level on published packages\n\n\nNPM: Herramientas de ayuda: release-it\n\n\n  release-it: Interactive release tool for Git repositories\n  release-it: GitHub Page\n\n\nRelease a new patch (increments from e.g. 1.0.4 to 1.0.5):\n\nrelease-it\n\n\nRelease a patch, minor, major, or specific version:\n\nrelease-it minor\nrelease-it 0.8.3\n\n\nYou can also do a “dry run”, which won’t write/touch anything, but does output the commands it would execute, and show the interactivity:\n\nrelease-it --dry-run\n\n\nReferences: Tutorials\n\n\n  Your first Node.js package  por Elijah Insua\n\n\nNPM: Video Tutoriales\n\n\n  Creating NodeJS modules\n  Publishing npm Packages\n  Node js Tutorial: How to create NPM package?\n\n\nLinks to NPM docs: Getting Started\n\n\n  What is npm?\n  Installing Node.js and updating npm\n  Fixing npm permissions\n  Installing npm packages locally\n  Using a package.json\n  Updating local packages\n  Uninstalling local packages\n  Installing npm packages globally\n  Updating global packages\nUninstalling global packages11.  Creating Node.js modules\n  Publishing npm packages\n  Semantic versioning and npm\n  Working with scoped packages\n  Using tags\n\n\n\n\nYarn\n\n\n  yarn\n\n\nCreación de Paquetes en el Navegador/Cliente\n\n\n  webpack\n    \n      Webpack Tutorial - Replace Gulp/Grunt plugins with a single tool. LearnCode.academy YouTube\n    \n  \n  bower\n  browserify\n\n\nDocumentation\n",
    "url": "/assets/temas/introduccion-a-javascript/nodejspackages.html"
  },
  
  {
    "title": "Análisis Sintáctico Predictivo Recursivo",
    "excerpt": "\n",
    "content": "Introducción A los Analizadores Sintácticos\n\nDespués de la fase de análisis léxico la siguiente fase en la construcción del analizador es la fase de\nanálisis sintáctico. Esta toma como entrada el flujo de terminales y\nconstruye como salida el árbol de análisis sintáctico abstracto.\n\nExisten diferentes métodos de análisis sintáctico. La mayoría caen en\nuna de dos categorías:\n\n\n  ascendentes y\n  descendentes.\n\n\nLos ascendentes\nconstruyen el árbol desde las hojas hacia la raíz.\n\nLos descendentes lo\nhacen en modo inverso.\n\nEl que describiremos aquí es un descendente: se denomina método de análisis predictivo descendente recursivo.\n\nGramáticas Independientes del Contexto\n\nSupongamos una gramática \\(G = (\\Sigma, V, P, S)\\) con alfabeto \\(\\Sigma\\), conjunto de variables sintácticas (o no terminales) \\(V\\), reglas de producción \\(P\\) y símbolo de arranque \\(S\\).\n\nPor ejemplo, en la gramática de Egg este es el conjunto \\(P\\) de reglas de producción:\n\nexpression: STRING\n          | NUMBER\n          | WORD apply\n\napply: /* vacio */\n     | '(' (expression ',')* expression? ')' apply\n\n\nSólo hay dos variables sintácticas \\(V = \\{ expression, \\, apply \\}\\). El símbolo de arranque \\(S\\) es \\(expression\\).\n\nEl conjunto de tokens es:\n\n\\[\\Sigma = \\{ STRING,\\, NUMBER,\\, WORD,\\, '(',\\, ')',\\, ','  \\}\\]\n\nObserve que algunos de los tokens son a su vez lenguajes de cierta complejidad, cuya definición está en otro nivel de abstracción, el nivel léxico y que se pueden definir mediante un mecanismo \nmas secillo como son las expresiones regulares.\n\nPor ejemplo, en una definición de Egg inicial podríamos definir así lo que entendemos por espacios o blancos, esto es, que partes del texto no son significativas para que nuestro programa pueda entender la estructura de la frase:\n\nWHITES = /(\\s|[#;].*|\\/\\*(.|\\n)*?\\*\\/)*/\n\n\nasí como los tokens mas complejos:\n\nSTRING = /\"((?:[^\"\\\\]|\\\\.)*)\"/\nNUMBER = /([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)/\nWORD   = /([^\\s(),\"]+)/\n\n\nClase de PL 2020/04/13: La Gramática de Egg\n\n{% include video provider=”youtube” id=”0Xk_r8V_FeE” %}\n\nEjercicio\n\nConstruye una derivación para la frase\n\nprint(**(g,f)(8))\n\n\nObserva que el resultado del análisis léxico sería un stream como este:\n\nWORD[\"print\"] \"(\" WORD[**] \"(\" WORD[g] \",\" WORD[f] \")\" \"(\" NUMBER[8] \")\" \")\"\n\n\nSolución:\n\nEn la solución que sigue, \nabreviamos expression por \\(e\\) , \napply por \\(a\\),\n WORD por \\(W\\) y NUMBER por \\(N\\):\n\n\\(e \\Longrightarrow  W [print] a\\) (Aquí \\(e \\longrightarrow W a\\))\n\n\\(\\Longrightarrow W[print] (e) a\\) (Ya que \\(a \\longrightarrow  (e) a\\))\n\n\\(\\Longrightarrow  W [print] (e)\\) (Ya que  \\(a \\longrightarrow \\epsilon\\))\n\n\\(\\Longrightarrow W[print] (W[**] a)\\) (Aquí hizo \\(e \\longrightarrow W a\\))\n\n\\(\\Longrightarrow W[print] (W[**] (e, e) a )\\)  (Aquí hizo \\(a \\longrightarrow (e, e) a\\))\n\n\\(\\Longrightarrow W[print] (W[**] (e, e) (e) a )\\) (La última a hizo \\(a \\longrightarrow  (e) a\\))\n\n\\(\\Longrightarrow  W[print] (W[**] (e, e) (e))\\)  (La última \\(a\\) hace \\(\\epsilon\\))\n\n\\(\\overset{*}{\\Longrightarrow} W[print] (W[**] (W[g], W[f]) (N[8]))\\) (después de aplicar reiteradas veces las reglas)\n\nEn forma gráfica, tenemos el árbol sintáctico concreto que sigue:\n\n\n\nEste es el mismo diagrama hecho usando mermaid:\n\n\ngraph TD\n      E1[e]\n\nsubgraph \"print(**(g,f)(8))\"\n      E1--&gt;W1[\"W (print)\"]\n      E1--&gt;A1(a);\nend    \n\n      A1--&gt;E2[\"e\"]\n      A1--&gt;A2[\"a\"]\n\n\nsubgraph \"(**(g,f)(8))\"\n      A1--&gt;LP1[\"(\"]\n\n      E2--&gt;W2[\"W (**)\"]\n      E2--&gt;A3[a]\n\n      A3--&gt;LP2[\"(\"]\n      A3--&gt;E3[\"e\"]\n      A3--&gt;COMMA1[\",\"]\n      A3--&gt;E4[\"e\"]\n      A3--&gt;RP2[\")\"]\n\n      E3--&gt;W3[\"W (g)]\"]\n      E3--&gt;A5[a]\n\n      E4--&gt;W4[\"W (f)]\"]\n      E4--&gt;A6[a]\n\n      A1--&gt;RP1[\")\"]\n\n      A5--&gt;EMPTY5[ε]\n      A6--&gt;EMPTY6[ε]\n\nsubgraph \"(g,f)(8)\"\n      A3--&gt;A4[a]\n\n      A4 --&gt; LP3[\"(\"]\n      A4 --&gt; E5[\"e\"]\n            E5--&gt;NUM[\"NUMBER (8)\"]\n      A4 --&gt; RP3[\")\"]\n      A4 --&gt; A7[\"a\"]\n\n\n      A7--&gt;EMPTY2[ε]\n\n\nend\n\n    end\n\n \n      A2--&gt;EMPTY[ε]\n\n\n\n\nLenguaje Generado por Una Gramática\n\nPara cada variable sintáctica\n\\(A \\in V\\) el lenguaje\ngenerado desde la variable \\(A\\) se define como:\n\n\\[L_A(G) = \\{ x \\in \\Sigma^* : A \\stackrel{*}{\\Longrightarrow} x \\}\\]\n\nEsto es, \\(L_A(G)\\) es el conjunto de frases del alfabeto que derivan en varias substituciones desde la variable \\(A\\).\n\nEn los métodos de Análisis Sintáctico Descendente Recursivo (PDR) se asocia una subrutina con cada variable sintáctica\n\\(A \\in V\\).\n\nLa función de dicha subrutina (que de ahora en adelante llamaremos parseA()) es reconocer \\(L_A(G)\\).\n\nSiguiendo con el ejemplo de Egg, en \\(L_{apply}(EggGrammar)\\) tenemos frases como:\n\n\n  ()\n  (4,b)\n  (4, +(5,c))\n  (4,)\n  /* nada */\n\n\nRecuerda que:\n\napply: /* vacio */ \n     | '(' (expression ',')* expression? ')' apply\n\n\ny que:\n\n\\[L_{apply}(EggGrammar) = \\{ x \\in \\Sigma^* : apply \\stackrel{*}{\\Longrightarrow} x \\}\\]\n\nEscribiremos una función parseApplyque se deberá encargar de reconocer las frases de \\(L_{apply}(EggGrammar)\\).\n\nPor supuesto también escribiremos una función parseExpressionque se deberá encargar de reconocer las frases de \\(L_{expression}(EggGrammar)\\).\n\nUna función por Variable Sintáctica\n\nRepetimos: Cuando construimos un PDR\n\n\n  Se escribe una rutina parseA por cada variable sintáctica en la gramática \\(A \\in V\\)\n  La función de parseA() es reconocer las frases \\(x \\in L(A)\\) en el lenguaje generado por \\(A\\) y construir el Arbol de Análisis de dichas frases \\(x\\).\n\n\nLa idea es bien simple: Si, por ejemplo \\(A\\) tiene una sola regla \\(A \\Rightarrow B \\, C\\) \nentonces el código de parseA() sería tan simple como llamar primero a parseB()\ny luego a parseC().\n\nPor ejemplo, en Egg, para hacer el parser escribimos dos funciones\n\n\n  parseExpression y\n  parseApply.\n\n\nLa función parseExpression reconoce el lenguaje\n\n\\[L(expression) = \\{ x \\in \\Sigma^* : expression \\stackrel{*}{\\Longrightarrow} x \\}\\]\n\ny la función  parseApply reconoce el lenguaje\n\n\\[L(apply) = \\{ x \\in \\Sigma^* : apply \\stackrel{*}{\\Longrightarrow} x \\}\\]\n\nEl Token de Predicción\n\nEn un PDR, la estrategia general que sigue la rutina parseA para reconocer \\(L(A)\\) es\ndecidir en términos del terminal a por el que vamos en la entrada cual de las partes derechas \\(\\alpha_i\\) de las reglas de \\(A\\)\n\n\\[A \\rightarrow \\alpha_1\\]\n\n\\[A \\rightarrow \\alpha_2\\]\n\n\\[\\ldots\\]\n\n\\[A \\rightarrow \\alpha_n\\]\n\nse aplica para construir el árbol. Si es así, a continuación se pasa a comprobar que la entrada que sigue a continuación de a... pertenece al lenguaje generado por \\(\\alpha_i\\).\n\nPor ejemplo, en la gramática de Egg estas son las reglas para expression:\n\nexpression: STRING\n          | NUMBER\n          | WORD apply\n\n\nVemos que las tres reglas empiezan por un token distinto. Si sabemos que el token actual es STRING la regla para seguir será la primera y si es \nWORD estamos seguros que la regla que se aplica es la tercera.\n\nCalculando por donde empiezan las derivaciones\n\nEn un analizador predictivo descendente recursivo (PDR o APDR) se\nasume que el terminal/token que actualmente esta siendo observado (que a partir de ahora denominaré lookahead) permite determinar unívocamente que producción de \\(A\\) hay\nque aplicar.\n\nUna vez que dentro del cuerpo de  parseA se ha determinado que la regla concreta por la que \ncontinuar la derivación es la regla \\(A \\rightarrow \\alpha\\), el algoritmo procede a reconocer\n\\(L_{\\alpha}(G)\\), el lenguaje generado por la parte derecha de la regla: \\(\\alpha\\):\n\n\\[L_{\\alpha}(G) = \\{ x \\in \\Sigma^* : \\alpha \\stackrel{*}{\\Longrightarrow} x \\}\\]\n\nPara ello se procede así. Supongamos que \\(\\alpha = X_1 \\ldots X_n\\), donde \\(X_i\\) es o bien un token \\(X_i \\in \\Sigma\\) o bien una variable \\(X_i \\in V\\).\n\n\n  \n    las apariciones de terminales \\(X_i\\) en \\(\\alpha\\) son emparejadas con los terminales en la entrada avanzando en el flujo de tokens,\n\n    lookahead = lex();\n    \n  \n\n\nmientras que\n\n\n  las apariciones de variables sintácticas \\(X_i = B \\in V\\) en \\(\\alpha\\) se traducen en llamadas a la correspondiente subrutina asociada con parseB.\n\n\nLa secuencia de llamadas cuando se procesa la entrada mediante el\nsiguiente programa construye “implícitamente” el árbol de análisis\nsintáctico concreto.\n\nLos Conjuntos FIRST\n\nEl análisis predictivo confía en que, si\nestamos ejecutando la entrada del procedimiento parseA, el cuál está\nasociado con la variable \\(A \\in V\\), el símbolo terminal a que esta en la\nentrada  determine de manera unívoca cual de las reglas de producción\n\\(A \\rightarrow \\alpha_i\\) debe ser procesada.\n\nSi se piensa, esta condición se puede satisfacer si se cumple que:\n\nPara toda variable \\(A\\), las derivaciones de las partes derechas\n\\(\\alpha_i\\) de sus reglas \\(A \\rightarrow \\alpha_i\\)  “comienzan” por diferentes tokens.\n\nSupongamos que \\(\\alpha \\in (V \\cup \\Sigma)*\\) es una frase de variables y terminales. Denotaremos por  \\(FIRST(\\alpha)\\) al conjunto de terminales que pueden aparecer al “comienzo” de una derivación desde \\(\\alpha\\):\n\n\\[FIRST(\\alpha) = \\left \\{ b \\in \\Sigma :  \\alpha  \\stackrel{*}{\\Longrightarrow}  b \\beta \\right \\}\\]\n\nPseudocódigo de la Función de Parsing\n\nPodemos reformular ahora nuestra afirmación anterior en estos términos:\n\nSi\n\n\n  \\(A \\rightarrow \\gamma_1 \\mid \\ldots \\mid \\gamma_n\\) \nson todas las reglas de producción de la variable \\(A\\) y\n  los conjuntos \\(FIRST(\\gamma_i)\\) son disjuntos,\n\n\nentonces podemos construir la función \nparseA para reconocer el lenguaje generado por la variable \\(A\\) siguiendo este seudocódigo:\n\n    function parseA() {\n      if (lookahead in FIRST(gamma_1)) { codigo gamma_1 }\n      else if (lookahead in FIRST(gamma_2)) { codigo gamma_2 }\n      ...\n      else (lookahead in FIRST(gamma_n)) { codigo gamma_n }\n    }\n\n\nDonde si \\(\\gamma_j\\) es \\(X_1 \\ldots X_k\\) el código gamma_j consiste en\nuna secuencia \\(i = 1 \\ldots k\\) de uno de estos dos tipos de código:\n\n\n  \n    Llamar a la subrutina parseX_i() si \\(X_i\\) es una variable sintáctica\n  \n  \n    Hacer una llamada al analizador léxico  avanzando sobre el token lex() si \\(X_i\\) es el terminal actual\n  \n\n\nSi aplicamos esta teoría a la variable sintáctica expression cuyas reglas eran:\n\nexpression: STRING\n          | NUMBER\n          | WORD apply\n\n\ntenemos tres partes derechas \\(\\gamma_1\\) = STRING,  \\(\\gamma_2\\) = NUMBER y \\(\\gamma_3\\) = WORD apply. Si computamos los \\(FIRST(\\gamma_i)\\) obtenemos:\n\nFIRST(STRING)     = { STRING }\nFIRST(NUMBER)     = { NUMBER }\nFIRST(WORD apply) = { WORD }\n\n\nnos produce este código:\n\nfunction parseExpression() {\n  if (lookahead.type == \"STRING\") {\n    lex(); // Saltamos el token STRING\n    return;\n  } else if (lookahead.type == \"NUMBER\") {\n     lex();  // Saltemos el token NUMBER\n    return;\n  } else if (lookahead.type == \"WORD\") {\n    lex(); // Consumimos  WORD\n    return parseApply(); // ... y llamamos a parseApply\n  } else {\n    throw new SyntaxError(`Unexpected syntax line ${lineno}: ${program.slice(0,10)}`);\n  }\n}\n\n\nQue hacer cuando aparecen reglas vacías\n\nAplicar el algoritmo PDR a las dos reglas de apply requiere añadir algunas extensiones al método.\n\nRecordemos las reglas de apply:\n\napply: /* vacio */\n     | '(' (expression ',')* expression? ')' apply\n\n\nParece que si el lookaheades un '('  la regla que se aplica\nes la segunda.\n\nMas difícil es determinar que tokens pueden aparecer cuando en la derivación se aplica la regla apply: /* vacio */.\n\nPara poder responder a esta pregunta consideremos una derivación en la que intervenga la regla apply: /* vacio */\n\nSi hacemos una derivación a derechas en la que esta es la última regla que se aplica, tendría que ocurrir algo como esto. Si derivamos desde el símbolo de arranque \\(expression\\):\n\n\\[expression \\stackrel{*}{\\Longrightarrow} \\beta \\, apply \\, a_1\\, a_2\\, \\ldots \\, a_n\\]\n\nen algún moomento en la parte derecha aparece apply quizá precedido de alguna secuencia \\(\\beta\\),\ndonde \\(\\beta\\) es una cadena arbitraria de variables y terminales y los \\(a_i \\in \\Sigma\\) son terminales.  Si derivamos por \\(apply \\longrightarrow \\epsilon\\) tenemos:\n\n\\[\\Rightarrow \\beta \\, a_1 \\ldots \\, a_n\\]\n\nSe sigue de la derivación anterior que cuando se aplica la regla apply: /* vacio */\ncualquier token que, como es el caso del token \\(a_1\\), pueda aparecer en alguna derivación inmediatamente a continuación de apply \nes un posible lookahead en la ejecución de  parseApply().\n\nCálculo del FOLLOW\n\nTenemos entonces que computar el conjunto de tokens FOLLOW(apply)  que pueden aparecer a continuación de la variableapply en alguna derivación desde expression.\n\n\\(FOLLOW(apply) = \\left \\{ a \\in \\Sigma :  expression  \\stackrel{*}{\\Longrightarrow}  \\beta \\, apply \\, a \\, \\alpha  \\right \\}\\) where \\(\\alpha \\in (V \\cup \\Sigma)^*\\)\n\nConsideremos la siguiente sinopsis de  derivación de una cadena como\n\nprint(\"hi\", a)\n\nen la que el símbolo \\(\\bullet\\) denota el final de la cadena de entrada:\n\n\\[expression \\bullet \\Rightarrow WORD \\, apply \\bullet\\]\n\nque deriva en:\n\n\\[\\Longrightarrow WORD \\, ( \\,expression \\, , \\, expression \\, ) \\, apply \\bullet\\]\n\nque aplicando la regla \\(apply \\longrightarrow \\epsilon\\) deriva en:\n\n\\[\\Longrightarrow WORD \\, ( \\,expression \\, , \\, expression \\, ) \\bullet\\]\n\nYa de aquí sacamos la conclusión de que el token final de la entrada está en los  “follow” de apply:\n\n\\(\\bullet \\in  FOLLOW(apply)\\).\n\nAsí pues en el instante de la ejecución del análisis que se corresponde con ese punto de esta derivación se llamará  a parseApply() y el valor de lookahead será el final de la entrada, que hemos denotado como \\(\\bullet\\) (y que en nuestro analizador léxico se retorna como null).\n\nSigamos derivando:\n\n\\[\\stackrel{*}{\\Longrightarrow} WORD \\, ( \\,expression \\, , \\, WORD \\, apply \\, ) \\bullet\\]\n\naplicando la regla \\(expression \\longrightarrow STRING\\), tenemos:\n\n\\[\\Longrightarrow WORD \\, ( \\, STRING \\, , \\, WORD \\, apply \\, ) \\bullet\\]\n\nque aplicando la regla \\(apply \\longrightarrow \\epsilon\\) deriva en:\n\n\\[\\stackrel{*}{\\Longrightarrow} WORD \\, ( \\, STRING \\, , \\, WORD) \\bullet\\]\n\nmuestra claramente que el tokens es ')' está en los “follow” de apply:\n\n\\(')' \\in  FOLLOW(apply)\\).\n\n{% include figure image_path=”/assets/images/egg-syntax-tree-4-W-LP-S-comma-W-RP-EOI.jpg” caption=”Syntax Tree for print(\\\"hi\\\", a)” %}\n\nTambién si nos fijamos en esta otra derivación para una frase como 'x':\n\n\\[expression \\bullet \\Rightarrow WORD \\, apply \\bullet \\Longrightarrow WORD \\, \\bullet\\]\n\nvemos de nuevo que apply  aparece al final de la frase cuando se aplicó la regla de producción \n\\(apply \\longrightarrow \\epsilon\\).\n\nAsí pues en el instante de la ejecución del análisis que se corresponde con ese punto de esta derivación se llamará  a parseApply() y el valor de lookahead será el final de la entrada, que hemos denotado como \\(\\bullet\\) (y que en el analizador léxico se retorna como null).\n\n\n\nAsumiremos que el analizador léxico retorna un null cuando encuentra el final de la entrada.\n\nOtro token que es fácil ver que puede seguir a  apply es la coma. Se lo dejamos como Ejercicio: Busque una derivación en la que la coma aparezca siguiendo a apply\n\nPor tanto el conjunto  de los “follow” de apply son:\n\nla coma “,” el fin de la entrada “\\(\\bullet\\)”  y el paréntesis cerrar”)”\n\nPuesto que la segunda regla tiene un * indicando la repetición 0 o mas veces de la expresión entre paréntesis:\n\napply: '(' (expression ',')* expression? ')' apply\n\n\nnecesitaremos un bucle para ir procesando la expresión interior. El bucle se termina cuando vemos el paréntesis de cierre o bien si se produce el final de la entrada.\n\nEntonces el código queda como sigue:\n\nfunction parseApply() {\n  if (!lookahead) return; // token \"End of Input\": apply: /* vacio */\n  if ((lookahead.type === \"RP\")|| (lookahead.type === 'COMMA')) // apply: /* vacio */\n    return;\n  if (lookahead.type !== \"LP\") throw new SyntaxError(`Error: Found ${lookahead.type}, Expected ',' or '(' or ')'`);\n  \n  lex();                // apply: '(' (expression ',')* expression? ')' apply\n  while (lookahead &amp;&amp; lookahead.type !== \"RP\") {\n    parseExpression();\n    if (lookahead &amp;&amp; lookahead.type == \"COMMA\") lex(); \n    else if (!lookahead || lookahead.type !== \"RP\") \n      throw new SyntaxError(`Error`);\n  }\n  if (!lookahead) throw new SyntaxError(`Error`);\n  lex();\n  return parseApply();\n}\n\n\nAunque esta versión controla mejor los errores, el código queda mas simple si seguimos\nla estrategia de si el token lookahead es el paréntesis izquierdo \nentonces se trata de la regla de producción del paréntesis y en caso \ncontrario es la regla \\(apply \\longrightarrow \\epsilon\\):\n\nfunction parseApply(tree) {\n  if (!lookahead) return tree;   // apply: /* vacio */\n  if (lookahead.type !== \"LP\") return tree; // apply: /* vacio */\n\n  lex();\n\n  tree = {type: 'apply', operator: tree, args: []};\n  while (lookahead &amp;&amp; lookahead.type !== \"RP\") {\n    let arg = parseExpression();\n    tree.args.push(arg);\n\n    if (lookahead &amp;&amp; lookahead.type == \"COMMA\") {\n      lex();\n    } else if (!lookahead || lookahead.type !== \"RP\") {\n      throw new SyntaxError(`Expected ',' or ')'  at line ${lineno}: ... ${program.slice(0,20)}`);\n    }\n  }\n  if (!lookahead)  throw new SyntaxError(`Expected ')'  at line ${lineno}: ... ${program.slice(0,20)}`);\n  lex();\n\n  return parseApply(tree);\n}\n\n\nEjercicios\n\n\n  Ejercicios\n\n",
    "url": "/assets/temas/syntax-analysis/analisis-descendente-predictivo-recursivo/pdr-teoria.html"
  },
  
  {
    "title": "Published Labs",
    "excerpt": "\n",
    "content": "{% include practicas-publicadas.md  %}\n",
    "url": "/practicas"
  },
  
  {
    "title": "Jekyll: Como preparar un informe de Prácticas usando GitHub Pages",
    "excerpt": "\n",
    "content": "Una Práctica Cualquiera\n\n\n  Un repo cualquiera de una práctica\n\n\n[~/.../src/jekyll-learning]$ git clone git@github.com:ULL-ESIT-PL-1920/p1-t1-iaas-Jorge-Acevedo.git\nCloning into 'p1-t1-iaas-Jorge-Acevedo'...\nremote: Enumerating objects: 23, done.\nremote: Counting objects: 100% (23/23), done.\nremote: Compressing objects: 100% (19/19), done.\nremote: Total 23 (delta 2), reused 9 (delta 2), pack-reused 0\nReceiving objects: 100% (23/23), 409.41 KiB | 1.46 MiB/s, done.\nResolving deltas: 100% (2/2), done.\n[~/.../src/jekyll-learning]$ cd p1-t1-iaas-Jorge-Acevedo/\n[~/.../jekyll-learning/p1-t1-iaas-Jorge-Acevedo(master)]$ ls -la\ntotal 8\ndrwxr-xr-x   5 casiano  staff   160 10 mar 08:24 .\ndrwxr-xr-x   9 casiano  staff   288 10 mar 08:24 ..\ndrwxr-xr-x  12 casiano  staff   384 10 mar 08:24 .git\n-rw-r--r--   1 casiano  staff  3555 10 mar 08:24 README.md\ndrwxr-xr-x  11 casiano  staff   352 10 mar 08:24 img\n\n\nGenerando un Gemfile\n\n[~/.../jekyll-learning/p1-t1-iaas-Jorge-Acevedo(master)]$ bundle init\nWriting new Gemfile to /Users/casiano/local/src/jekyll-learning/p1-t1-iaas-Jorge-Acevedo/Gemfile\n[~/.../jekyll-learning/p1-t1-iaas-Jorge-Acevedo(master)]$ ls -la\ntotal 16\ndrwxr-xr-x   6 casiano  staff   192 10 mar 08:25 .\ndrwxr-xr-x   9 casiano  staff   288 10 mar 08:24 ..\ndrwxr-xr-x  12 casiano  staff   384 10 mar 08:24 .git\n-rw-r--r--   1 casiano  staff   146 10 mar 08:25 Gemfile\n-rw-r--r--   1 casiano  staff  3555 10 mar 08:24 README.md\ndrwxr-xr-x  11 casiano  staff   352 10 mar 08:24 img\n[~/.../jekyll-learning/p1-t1-iaas-Jorge-Acevedo(master)]$ cat Gemfile\n# frozen_string_literal: true\n\nsource \"https://rubygems.org\"\n\ngit_source(:github) {|repo_name| \"https://github.com/#{repo_name}\" }\n\n# gem \"rails\"\n[~/.../jekyll-learning/p1-t1-iaas-Jorge-Acevedo(master)]$\n\n\nbundle config path\n\nThe location to install the specified gems to. This defaults to Rubygems’ setting. Bundler shares this location with Rubygems, gem install ... will have gem installed there, too. Therefore, gems installed without a --path … setting will show up by calling gem list. Accordingly, gems installed to other locations will not get listed.\n\n[~/.../jekyll-learning/p1-t1-iaas-Jorge-Acevedo(master)]$ bundle config\nSettings are listed in order of priority. The top value will be used.\nlocal.sinatra\nSet for the current user (/Users/casiano/.bundle/config): \"/Users/casiano/local/src/ruby/sinatra/sinatra-src\"\n\nbuild.nokogiri\nSet for the current user (/Users/casiano/.bundle/config): \"--use-system-libraries\"\n\npath\nSet for the current user (/Users/casiano/.bundle/config): \"vendor/bundle\"\n\n\nbundle config path 'vendor/bundle'\n\n\nGem github-pages\n\n\n  github-pages gem\n\n\n\n  Add the following to your project’s Gemfile:\n\n\n  gem 'github-pages', group: :jekyll_plugins\n\n\n\n  Run bundle install\n\n\nJekyll is already installed\n\nYou are not required to install Jekyll separately. Once the github-pages gem is installed, you can build your site using jekyll build, or preview your site using jekyll serve.\n\n\n  For more information about installing Jekyll locally, please see the GitHub Help docs on the matter.\n\n\nGemfile with github-pages\n\n[~/.../jekyll-learning/p1-t1-iaas-Jorge-Acevedo(master)]$ cat Gemfile\n# frozen_string_literal: true\n\nsource \"https://rubygems.org\"\n\ngit_source(:github) {|repo_name| \"https://github.com/#{repo_name}\" }\n\n# gem \"rails\"\n\ngem 'github-pages', group: :jekyll_plugins\n\n\n\n  How to manage groups of gems\n\n\nbundle install\n\n[~/.../jekyll-learning/p1-t1-iaas-Jorge-Acevedo(master)]$ bundle install\nFetching gem metadata from https://rubygems.org/...........\nFetching gem metadata from https://rubygems.org/.\nResolving dependencies....\nFetching concurrent-ruby 1.1.6\nInstalling concurrent-ruby 1.1.6\n...\nInstalling github-pages 204\nBundle complete! 1 Gemfile dependency, 85 gems now installed.\nBundled gems are installed into `./vendor/bundle`\n\n\n[~/.../p1-t1-iaas-Jorge-Acevedo(master)]$ ls -l\ntotal 16\n-rw-r--r--   1 casiano  staff   190 10 mar 08:36 Gemfile\n-rw-r--r--   1 casiano  staff  3555 10 mar 08:24 README.md\ndrwxr-xr-x  11 casiano  staff   352 10 mar 08:24 img\ndrwxr-xr-x   3 casiano  staff    96 10 mar 08:36 vendor\n[~/.../p1-t1-iaas-Jorge-Acevedo(master)]$ tree -L 2 vendor/\nvendor/\n└── bundle\n    ├── bin\n    ├── build_info\n    ├── bundler.lock\n    ├── cache\n    ├── doc\n    ├── extensions\n    ├── gems\n    └── specifications\n\n8 directories, 1 file\n[~/.../p1-t1-iaas-Jorge-Acevedo(master)]$\n\n\nJekyll\n\nVemos que una versión de jekyll compatible con GitHub Pages (2020) ha sido instalada:\n\n[~/.../jekyll-learning/p1-t1-iaas-Jorge-Acevedo(master)]$ ls -l vendor/bundle/bin/\ntotal 96\n-rwxr-xr-x  1 casiano  staff  562 10 mar 08:37 commonmarker\n-rwxr-xr-x  1 casiano  staff  526 10 mar 08:38 gemoji\n-rwxr-xr-x  1 casiano  staff  562 10 mar 08:39 github-pages\n-rwxr-xr-x  1 casiano  staff  526 10 mar 08:38 jekyll\n-rwxr-xr-x  1 casiano  staff  538 10 mar 08:38 kramdown\n-rwxr-xr-x  1 casiano  staff  526 10 mar 08:38 listen\n-rwxr-xr-x  1 casiano  staff  538 10 mar 08:39 nokogiri\n-rwxr-xr-x  1 casiano  staff  524 10 mar 08:38 rougify\n-rwxr-xr-x  1 casiano  staff  544 10 mar 08:38 safe_yaml\n-rwxr-xr-x  1 casiano  staff  514 10 mar 08:38 sass\n-rwxr-xr-x  1 casiano  staff  530 10 mar 08:38 sass-convert\n-rwxr-xr-x  1 casiano  staff  514 10 mar 08:38 scss\n\n\nThemes\n\nSe han instalado diversos temas/estilos\n\n~/.../p1-t1-iaas-Jorge-Acevedo(master)]$ tree vendor/bundle/gems/ | grep jekyll-theme\n├── jekyll-theme-architect-0.1.1\n│   │   ├── jekyll-theme-architect.scss\n├── jekyll-theme-cayman-0.1.1\n│   │   ├── jekyll-theme-cayman.scss\n├── ...\n├── jekyll-theme-time-machine-0.1.1\n\n\n\n  Github pages Supported themes\n    \n      Tema midnight\n    \n  \n  Jekyll Themes\n\n\nAdding a Theme to our Website\n\n[~/.../p1-t1-iaas-Jorge-Acevedo(master)]$ cat _config.yml\ntheme: jekyll-theme-midnight\n\n\nBuild the site\n\n[~/.../p1-t1-iaas-Jorge-Acevedo(master)]$ bundle exec jekyll build\nConfiguration file: /Users/casiano/local/src/jekyll-learning/p1-t1-iaas-Jorge-Acevedo/_config.yml\nInvalid theme folder: _includes\nInvalid theme folder: _includes\n            Source: /Users/casiano/local/src/jekyll-learning/p1-t1-iaas-Jorge-Acevedo\n       Destination: /Users/casiano/local/src/jekyll-learning/p1-t1-iaas-Jorge-Acevedo/_site\n Incremental build: disabled. Enable with --incremental\n      Generating...\n   GitHub Metadata: No GitHub API authentication could be found. Some fields may be missing or have incorrect data.\n                    done in 0.908 seconds.\n Auto-regeneration: disabled. Use --watch to enable.\n[~/.../p1-t1-iaas-Jorge-Acevedo(master)]$ tree _site\n_site\n├── README.md\n├── assets\n│   ├── css\n│   │   ├── ie.scss\n│   │   └── style.css\n│   ├── fonts\n│   │   ├── OpenSans-Bold-webfont.eot\n│   │   ├── ...\n│   │   └── OpenSans-SemiboldItalic-webfont.woff\n│   ├── images\n│   │   ├── bullet.png\n│   │   ├── hr.gif\n│   │   └── nav-bg.gif\n│   └── js\n│       └── respond.js\n├── img\n│   ├── figura1.png\n│   ├── ...\n│   └── figura9.png\n└── index.html\n\n6 directories, 49 files\n\n\nStarting a file server on the _site directory\n\nObserve que el server arrancado es un servidor de ficheros estático que nada tiene que ver con Jekyll:\n\n[~/.../p1-t1-iaas-Jorge-Acevedo(master)]$ cd _site/\n[~/.../_site(master)]$ http-server\nStarting up http-server, serving ./\nAvailable on:\n  http://127.0.0.1:8083\n  http://10.150.22.51:8083\n  http://10.213.3.51:8083\nHit CTRL-C to stop the server\n\n\n\n\nAdding Variables in _config.yml\n\n\n  Jekyll Variables\n\n\n[~/.../p1-t1-iaas-Jorge-Acevedo(master)]$ cat _config.yml\ntitle: Práctica de IAAS\nsubtitle: 'Itinerario de Computación. Grado en Ingeniería Informática. ULL. Curso 2019/2020'\ndescription: '3º. 2º cuatrimestre. Itinerario de Computación. Grado en Ingeniería Informática. ULL'\nauthor: Jorge Acevedo\ntheme: jekyll-theme-midnight\n\n\nUsing the Variables\n\n[~/.../p1-t1-iaas-Jorge-Acevedo(master)]$ head -n 3 README.md\n# {{ site.author }}: p1-t1-iaas\nEn este informe se desarrollará un resumen de los pasos seguidos para configurar la máquina del *iaas* que se me ha asignado para la asignatura de *Procesadores de lenguajes*.\n\n\n\n\nWorking with different environments: url and baseurl and more\n\nWorking with different environments: url and baseurl and more\n\nhtml-proofer\n\nHTMLProofer is a set of tests to validate your HTML output. These tests check if your image references are legitimate, if they have alt tags, if your internal links are working, and so on. It’s intended to be an all-in-one checker for your output.\n\nAdd this line to your application’s Gemfile:\n\ngem 'html-proofer'\n\n\nAnd then execute:\n\n$ bundle install\n\n\nOr install it yourself as:\n\n$ gem install html-proofer\n\n\n~/.../sytws1920/ull-mii-sytws-1920.github.io(master)]$ cat Rakefile \n\n\ndesc \"sytws: bundle exec jekyll serve --watch\"\ntask :serve do\n  sh \"bundle exec jekyll serve --future --watch --port 8080 --host 10.6.128.216\"\nend\n\n... # more tasks\n\nrequire 'html-proofer'\ndesc \"test links in the build web site\"\ntask :test do\n  sh \"bundle exec jekyll build\"\n  options = { \n    :assume_extension =&gt; true, \n    :disable_external =&gt; true, \n    :empty_alt_ignore =&gt; true,\n    :file_ignore =&gt; [ %r{categories} ]\n  }\n  HTMLProofer.check_directory(\"./_site\", options).run\nend\n\n\nReferences for HTMLProofer\n\n\n  HTMLProofer\n  Using HTMLProofer From Ruby and Travis\n  GitHub Action HTMLProofer\n  GitHub Action Proof HTML\n\n\nReferences\n\n\n  Jekyll\n  Jekyll docs\n  Using Jekyll with Bundler\n  GitHub Pages\n  El módulo npm gh-pages para simplificar el despliegue a GitHub: gh-pages -d _site\n  HTMLProofer para testear la salud de  tu website\n\n",
    "url": "/assets/temas/introduccion-a-javascript/preparar-informe-de-practicas-con-ghpages.html"
  },
  
  {
    "title": "Referencias y Bibliografía",
    "excerpt": "\n",
    "content": "\n  Eloquent JS 3rd Edition\n  Eloquent JS 2nd Edition\n  Compilers : principles, techniques, and tools. Alfred V. Aho Ravi Sethi; Jeffrey David ( Ullman 1942-) 1988\n    \n      Disponible en: Informática\tB.Informática. Sala de Lectura\tPréstamo exterior\tI*D.3.4 AHO com\n      Disponible en: Matemáticas y Física\tB.Mát. y Física\tSala de Lectura\tPréstamo exterior\tI*D.3.4 AHO com\n    \n  \n  Abstractions, Their Algorithms, and Their Compilers by Alfred Aho and Jeffrey Ullman. Turing Lecture 2020.\n  A Practical Approach to Compiler Construction. Watson. Año:2017 (Debes estar autenticado via PuntoQ BULL)\n  The Modern JavaScript Tutorial. https://javascript.info/\n  GitHub Repo: Awesome Compilers\n A curated list of awesome resources, learning materials, tools, frameworks, platforms, technologies and source code projects in the field of Compilers, Interpreters and Runtimes. This list has a bias towards education.\n  UC Berkeley. CS294-113: Virtual Machines and Managed Runtimes by Mario Wolczko\n    \n      Virtual Machines Summer School 2016 (#vmss16) May 31, 12:00 - June 3 2016, 16:00 Cumberland Lodge, UK\n    \n  \n  Nearley is a JS parser generator using the Early algorithm\n  GitHub Learning Lab Courses\n\n\n\n",
    "url": "/references"
  },
  
  {
    "title": "Ejercicios de Expresiones Regulares",
    "excerpt": "\n",
    "content": "\n\nEjercicios de EloquentJS\n\n\n  Haga los ejercicios de expresiones regulares en \nEloquent JavaScript\n\n\nEjercicios de Cursos Anteriores\n\n\n  Haga los ejercicios de expresiones regulares en los apuntes de otros años\nhttp://crguezl.github.io/pl-html/node7.html\n\n\nCadenas\n\n\n  Escriba una expresión regular que reconozca las cadenas de doble\ncomillas. Debe permitir la presencia de comillas y caracteres\nescapados.\n\n\nNúmeros\n\n  Escriba una expresión regular que reconozca los números en punto flotante (por ejemplo -2.3e-1, -3e2, 23, 3.2)\n  El siguiente ejemplo comprueba la validez de números de teléfono:\n\n\n        [~/local/src/javascript/PLgrado/regexp]$ pwd -P\n        /Users/casiano/local/src/javascript/PLgrado/regexp\n        [~/local/src/javascript/PLgrado/regexp]$ cat phone.html\n\n\n        &lt;!DOCTYPE html&gt;\n        &lt;html&gt;  \n          &lt;head&gt;  \n            &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"&gt;  \n            &lt;meta http-equiv=\"Content-Script-Type\" content=\"text/javascript\"&gt;  \n            &lt;script type=\"text/javascript\"&gt;  \n              var re = /\\(?\\d{3}\\)?([-\\/\\.])\\d{3}\\1\\d{4}/;  \n              function testInfo(phoneInput){  \n                var OK = re.exec(phoneInput.value);  \n                if (!OK)  \n                  window.alert(RegExp.input + \" isn't a phone number with area code!\");  \n                else\n                  window.alert(\"Thanks, your phone number is \" + OK[0]);  \n              }  \n            &lt;/script&gt;  \n          &lt;/head&gt;  \n          &lt;body&gt;  \n            &lt;p&gt;Enter your phone number (with area code) and then click \"Check\".\n                &lt;br&gt;The expected format is like ###-###-####.&lt;/p&gt;\n            &lt;form action=\"#\"&gt;  \n              &lt;input id=\"phone\"&gt;&lt;button onclick=\"testInfo(document.getElementById('phone'));\"&gt;Check&lt;/button&gt;\n            &lt;/form&gt;  \n          &lt;/body&gt;  \n        &lt;/html&gt;\n\n\n",
    "url": "/assets/temas/expresiones-regulares-y-analisis-lexico/regexpejercicios.html"
  },
  
  {
    "title": "GitHub Releases",
    "excerpt": "\n",
    "content": "GitHub Releases is a way to create a release to package software, along with release notes and links to binary files, for other people to use.\n\nReleases are based on Git tags, which mark a specific point in your repository’s history. A tag date may be different than a release date since they can be created at different times. For more information about viewing your existing tags, see “Viewing your repository’s releases and tags.\n\nReleases are ordered by a tag’s date in the following way:\n\n\n  If it’s an annotated tag, the tag object’s date is used.\n  If it’s a lightweight tag, then the commit object’s date is used.\n\n\nThe release Event\n\nA GitHub event with the name release is triggered when a release is\n\n\n  published,\n  unpublished,\n  created,\n  edited,\n  deleted, or\n  prereleased.\n\n\nSee GitHub Webhooks.\n\nCreating Releases Using the GitHub Web App\n\nYou can create releases on GitHub Web:\n\n\n  On GitHub, navigate to the main page of the repository.\n  \n    Under your repository name, click Releases.\n\n    \n\n    https://help.github.com/assets/images/help/releases/release-link.png\n  \n  \n    Click Draft a new release.\n\n    \n  \n  \n    Type a version number for your release. Versions are based on Git tags. We recommend naming tags that fit within semantic versioning.\n\n    \n  \n  \n    Use the drop-down menu to select the branch that contains the project you want to release.\n\n    \n  \n  \n    Type a title and description for your release.\n\n    \n  \n  \n    Optionally, to include binary files such as compiled programs in your release, drag and drop or manually select files in the binaries box.\n\n    \n  \n  \n    To notify users that the release is not ready for production and may be unstable, select This is a pre-release.\n\n    \n  \n  \n    If you’re ready to publicize your release, click Publish release. To work on the release later, click Save draft.\n\n    \n  \n\n\nReferences\n\n\n  See more at Managing releases in a repository\n  See also 1: (Paragraph borrowed from What exactly is a Release in GitHub?)\n  See GitHub Webhooks.\n\n",
    "url": "/assets/temas/introduccion-a-javascript/releases.html"
  },
  
  {
    "title": "Recursos",
    "excerpt": "\n",
    "content": "Recursos ULL\n\nCampus Virtual y UDV\n\n\n  PL\n  Participantes\n  Calificaciones\n  Tareas\n  Foros\n  Aula de Recursos Disponibles para Realizar ACTIVIDAD DOCENTE NO PRESENCIAL\n  Unidad para la Docencia Virtual. Servicios (UDV)\n\n\nGuias Docentes\n\n\n  Modificación Perfíl del Profesor (deberá estar autenticado)\n\n\n\n\nBULL\n\n\n  BULL PuntoQ\n  Video tutoriales de ayuda sobre PuntoQ\n\n\nAntiplagio\n\n\n  Solicitud de informe de similitud Turnitin\n\n\nSede ULL\n\n\n  Sede ULL\n    \n      Solicitud General\n      Mis trámites\n      Portafirmas de la ULL\n      Certificado de Docencia Impartida\n    \n  \n\n\nProcedimientos en la Sede  para Masters y TFGs\n\n\n  Procedimiento Presentación del Trabajo Fin de Máster Universitario\n  Presentación de las Actas del Trabajo Fin de Máster (TFM) por el secretaio del tribunal\n  Presentación del Trabajo Fin de Grado (TFG)\n  Procedimiento para entregar el Trabajo Fin de Grado (TFG) a través de la sede electrónica de la ULL\n\n\nApp ULL Plan de Ordenación Docente\n\n\n  POD ULL App\n\n\nPortal del Empleado y del Estudiante\n\n\n  Portal ull.es Portal del Empleado y del Estudiante\n\n\niaas.ull.es\n\n\n  Instrucciones para el uso de iaas.ull.es\n    \n      Gestor online de pools\n      IaaS - Uso de la aplicación de gestión de pools\n      Video del profesor: iaas.ull.es\n      https://iaas.ull.es/mismaquinas\n    \n  \n  Servicio IaaS EULA y Solicitud de servicio\n\n    \n      Certificados SSL para máquinas IaaS de PAS/PDI\n    \n  \n\n\nIncidencias STIC\n\n\n  Gestor de incidencias. RT para rt.stic.ull.es\n  Tarjeta Universitaria\n\n\nVPN ULL\n\n\n  Servicio de vpn: guías de configuración\n    \n      Guía de configuración del cliente VPN GlobalProtect. Sistema Operativo Windows\n      Guía de configuración del cliente VPN GlobalProtect. Sistema Operativo Mac OSX\n      Instrucciones para acceder a la VPN de la ULL en un Mac sin usar GlobalProtect\n      Guía de configuración del cliente VPN para Linux, Android e IOS (Ipad, Iphone) con IPSEC\n    \n  \n\n\nServicio de Escritorios Virtuales para la docencia\n\n\n  Servicio de Escritorios Virtuales\n\n\nMapa de Recursos ULL\n\n\n  Mapa de recursos de la ULL\n\n\nServicio de Impresión ULL\n\n\n  Datos para el servicio de impresión\n  [ULL-IMPRIME artículo miércoles 24 de mayo de 2017](https://www.ull.es/servicios/stic/2017/05/24/ull-imprime/\n\n\nImpresión desde cualquier dispositivo y plataforma:\n\nPara ampliar la compatibilidad y facilitar el uso de este servicio desde cualquier dispositivo y sistema operativo puede utilizar alguna de estas dos alternativas:\n\n\n  Enviar trabajos de impresión a través del correo electrónico: Si envía un mensaje de correo electrónico a la dirección imprime@ull.edu.es con los ficheros (PDF) que desea imprimir como adjuntos, podrá pasar a recogerlos por el punto de impresión ULL-IMPRIME que quiera en las siguientes 24 horas. Tenga en cuenta que debe utilizar su dirección de correo electrónico de la universidad (@ull.edu.es) como remitente.\n  Google Cloud Print dejó de estar disponible en enero del 2021 y ya no se admite. Los dispositivos no podrán imprimir con Google Cloud Print\n\n\nCambio de contraseña en la ULL\n\n\n  Cambio de contraseña\n\n\nBúsqueda de Usuarios ULL\n\n\n  Búsqueda de Usuarios ULL\n\n\nRecursos GitHub\n\nGitHub Benefits\n\n\n  \n    Solicitar Free Plan para uso educativo\n  \n  \n    Actualizar tus organizaciones de acuerdo al Free Plan concedido\n  \n  \n    Actualizar tus organizaciones de acuerdo al Free Plan concedido Vieja\n  \n  \n    Check the status of your GitHub Application as student\n  \n\n\nGitHub Classroom Help\n\n\n  GitHub Classroom en YouTube\n  GitHub Classroom Help\n    \n      Upgrading your organization\n    \n  \n\n\nGitHub Help\n\n\n  GitHub Support: My tickets\n  GitHub Support Community\n  GitHub Education Community\n  Create Icon avatar for the organization\n\n\nAuthorizing Apps to access your GitHub Orgs and Repos\n\n\n  Authorize an OAuth App: settings/applications Go to user settings and from there to applications\n\n\nGitPod\n\n\n  Introducción a GitPod\n\n\n\n\n\n\nRecursos Google\n\n\n  Google group de PL \n  Comunidad Currents/Google+ PL\n\n",
    "url": "/resources"
  },
  
  {
    "title": "Search",
    "excerpt": "\n",
    "content": "{% capture initSearch %}\n\n\n  Search term (accepts a regex):\n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\nPlease enable JavaScript to use the search form.\n\n{% endcapture %}\n\n\n  \n    \n      {{ initSearch\n      lstrip }}\n    \n  \n\n",
    "url": "/search/"
  },
  
  {
    "title": "Egg Initial Syntax",
    "excerpt": "\n",
    "content": "expression: (STRING | NUMBER | WORD) apply \n\napply: /* vacio */\n     | '(' (expression ',')* expression? ')' apply\n\n\nToken definitions\n\nWHITES = /^(\\s|#.*)*/\nSTRING = /^\"([^\"]*)\"/\nNUMBER = /^\\d+\\b/\nWORD   = /^[^\\s(),\"]+/\n\n\nEjecuciones\n\nEs importante observar para encontrar la versión que la rama es inicial:\n\n[~/.../PLgrado/eloquentjsegg(inicial)]$ node egg.js 'print(+)'\n[Function: anonymous]\n[~/.../PLgrado/eloquentjsegg(inicial)]$ node egg.js 'print(4,)'\n4\n[~/.../PLgrado/eloquentjsegg(inicial)]$ node egg.js '8()'\n/Users/casiano/local/src/javascript/PLgrado/eloquentjsegg/egg.js:76\nTypeError: Applying a non-function\n    at evaluate (/Users/casiano/local/src/javascript/PLgrado/eloquentjsegg/egg.js:76:15)\n\n[~/.../PLgrado/eloquentjsegg(inicial)]$ node egg.js '\"hello\"(2,3)'\nTypeError: Applying a non-function\n    at evaluate (/Users/casiano/local/src/javascript/PLgrado/eloquentjsegg/egg.js:76:15)\n\n[~/.../PLgrado/eloquentjsegg(inicial)]$ node egg.js '+()'\n[~/.../PLgrado/eloquentjsegg(inicial)]$ node egg.js '+(2,)'\n[~/.../PLgrado/eloquentjsegg(inicial)]$ node egg.js 'print(+())'\nNaN\n[~/.../PLgrado/eloquentjsegg(inicial)]$ node egg.js 'print(+(2,))'\nNaN\n\n",
    "url": "/assets/temas/syntax-analysis/analisis-descendente-predictivo-recursivo/solucion-ejercicio-gramar-egg-inicial.html"
  },
  
  {
    "title": "Solución",
    "excerpt": "\n",
    "content": "{% include_relative index.html %}\n\n\n\n  Run the solution\n\n\n\n",
    "url": "/assets/temas/introduccion-a-javascript/event-loop/exercises/promises/load-script/solution.html"
  },
  
  {
    "title": "StackEdit",
    "excerpt": "\n",
    "content": "\n  stackedit.io\n\n\nStackEdit is an  editor in the cloud: it can sync your files with Google Drive, Dropbox and GitHub. It can also publish them as blog posts to Blogger, WordPress and Zendesk. You can choose whether to upload in Markdown format, HTML, or to format the output using the Handlebars template engine.\n\n\n",
    "url": "/assets/temas/introduccion-a-javascript/stackedit.html"
  },
  
  {
    "title": "Temas",
    "excerpt": "\n",
    "content": "{% comment %}\n{% for page in site.pages %}\n{{ page.categories }} - {{ page.url }}\n{% endfor %}\n{% endcomment %}\n\n\n  \n    \n      {%- capture nowunix %}{{‘now’\n      date: ‘%s’}}{% endcapture %}\n    \n    \n      {% assign temas = site.categories[“temas”]\n      sort %}\n    \n  \n\n\n{% for tema in temas %}\nChapter {{ forloop.index }}: {{ tema.title }}\n\n\n  \n    \n      {%- capture tema_time %}{{ tema.date\n      date: ‘%s’}}{% endcapture %}\n    \n  \n\n\n{% if tema_time &lt; nowunix -%}\n\nSee classes starting at &lt;a \n    href=”{{site.baseurl}}/clases/{{ tema.date | date: “%Y/%m/%d” }}/leccion.html”&gt;\n   {{ tema.date | date_to_string  }}\n  &lt;/a&gt;\n{% else %}\nExpected date (approximate): {{ tema.date | date_to_string  }}\n{% endif %}\n\n{% if tema.sections %}\n    {% for section in tema.sections %}\n    {% assign sectionmark = section.title | downcase | replace: “ “, “-“ |  replace: “?”,”” %}\nSection {{ forloop.index }}: {{ section.title }}\n{% endfor %}\n\n{% endif %}\n\n{% endfor %}\n\n",
    "url": "/temas"
  },
  
  {
    "title": "Calendarios, Horarios y Exámenes",
    "excerpt": "\n",
    "content": "Horario\n\n\n\n\nCalendario Académico\n\n\n\nExámenes\n\n\n  \n\n\n\n\n\n\n\n\n\n\n",
    "url": "/timetables"
  },
  
  {
    "title": "Ejemplo de Código EVM (Egg Virtual Machine)",
    "excerpt": "\n",
    "content": "The code below contains the AST for this input program:\n\n[~/.../crguezl-egg(master)]$ cat examples/two.egg\n\ndo(\n  define(sum,  # function\n    fun(nums, other,\n      do(\n         print(other),\n         define(i, 0),\n         define(sum, 0),\n         while(&lt;(i, length(nums)),\n           do(define(sum, +(sum, element(nums, i))),\n              define(i, +(i, 1))\n           )\n         ),\n         sum\n      )\n   )\n ),\n print(sum(array(1, 2, 3), 4))\n)\n\n\nSi ejecutamos bin/eggc.js  examples/two.egg produce como salida un fichero con el mismo nombre y extensión .evm (por Egg Virtual Machine) que no es otra cosa que el AST generado por el parser guardado como un objeto JSON.\n\n[~/.../crguezl-egg(master)]$ bin/eggc.js examples/two.egg\n[~/.../crguezl-egg(master)]$ ls -ltr examples/two.egg.evm\n-rw-r--r--  1 casiano  staff  7466  2 abr 11:03 examples/two.egg.evm\n\n\nThe .evm\n\nHere is the AST:\n\n{\n  \"type\": \"apply\",\n  \"operator\": {\n    \"type\": \"word\",\n    \"name\": \"do\"\n  },\n  \"args\": [\n    {\n      \"type\": \"apply\",\n      \"operator\": {\n        \"type\": \"word\",\n        \"name\": \"define\"\n      },\n      \"args\": [\n        {\n          \"type\": \"word\",\n          \"name\": \"sum\"\n        },\n        {\n          \"type\": \"apply\",\n          \"operator\": {\n            \"type\": \"word\",\n            \"name\": \"fun\"\n          },\n          \"args\": [\n            {\n              \"type\": \"word\",\n              \"name\": \"nums\"\n            },\n            {\n              \"type\": \"word\",\n              \"name\": \"other\"\n            },\n            {\n              \"type\": \"apply\",\n              \"operator\": {\n                \"type\": \"word\",\n                \"name\": \"do\"\n              },\n              \"args\": [\n                {\n                  \"type\": \"apply\",\n                  \"operator\": {\n                    \"type\": \"word\",\n                    \"name\": \"print\"\n                  },\n                  \"args\": [\n                    {\n                      \"type\": \"word\",\n                      \"name\": \"other\"\n                    }\n                  ]\n                },\n                {\n                  \"type\": \"apply\",\n                  \"operator\": {\n                    \"type\": \"word\",\n                    \"name\": \"define\"\n                  },\n                  \"args\": [\n                    {\n                      \"type\": \"word\",\n                      \"name\": \"i\"\n                    },\n                    {\n                      \"type\": \"value\",\n                      \"value\": 0\n                    }\n                  ]\n                },\n                {\n                  \"type\": \"apply\",\n                  \"operator\": {\n                    \"type\": \"word\",\n                    \"name\": \"define\"\n                  },\n                  \"args\": [\n                    {\n                      \"type\": \"word\",\n                      \"name\": \"sum\"\n                    },\n                    {\n                      \"type\": \"value\",\n                      \"value\": 0\n                    }\n                  ]\n                },\n                {\n                  \"type\": \"apply\",\n                  \"operator\": {\n                    \"type\": \"word\",\n                    \"name\": \"while\"\n                  },\n                  \"args\": [\n                    {\n                      \"type\": \"apply\",\n                      \"operator\": {\n                        \"type\": \"word\",\n                        \"name\": \"&lt;\"\n                      },\n                      \"args\": [\n                        {\n                          \"type\": \"word\",\n                          \"name\": \"i\"\n                        },\n                        {\n                          \"type\": \"apply\",\n                          \"operator\": {\n                            \"type\": \"word\",\n                            \"name\": \"length\"\n                          },\n                          \"args\": [\n                            {\n                              \"type\": \"word\",\n                              \"name\": \"nums\"\n                            }\n                          ]\n                        }\n                      ]\n                    },\n                    {\n                      \"type\": \"apply\",\n                      \"operator\": {\n                        \"type\": \"word\",\n                        \"name\": \"do\"\n                      },\n                      \"args\": [\n                        {\n                          \"type\": \"apply\",\n                          \"operator\": {\n                            \"type\": \"word\",\n                            \"name\": \"define\"\n                          },\n                          \"args\": [\n                            {\n                              \"type\": \"word\",\n                              \"name\": \"sum\"\n                            },\n                            {\n                              \"type\": \"apply\",\n                              \"operator\": {\n                                \"type\": \"word\",\n                                \"name\": \"+\"\n                              },\n                              \"args\": [\n                                {\n                                  \"type\": \"word\",\n                                  \"name\": \"sum\"\n                                },\n                                {\n                                  \"type\": \"apply\",\n                                  \"operator\": {\n                                    \"type\": \"word\",\n                                    \"name\": \"element\"\n                                  },\n                                  \"args\": [\n                                    {\n                                      \"type\": \"word\",\n                                      \"name\": \"nums\"\n                                    },\n                                    {\n                                      \"type\": \"word\",\n                                      \"name\": \"i\"\n                                    }\n                                  ]\n                                }\n                              ]\n                            }\n                          ]\n                        },\n                        {\n                          \"type\": \"apply\",\n                          \"operator\": {\n                            \"type\": \"word\",\n                            \"name\": \"define\"\n                          },\n                          \"args\": [\n                            {\n                              \"type\": \"word\",\n                              \"name\": \"i\"\n                            },\n                            {\n                              \"type\": \"apply\",\n                              \"operator\": {\n                                \"type\": \"word\",\n                                \"name\": \"+\"\n                              },\n                              \"args\": [\n                                {\n                                  \"type\": \"word\",\n                                  \"name\": \"i\"\n                                },\n                                {\n                                  \"type\": \"value\",\n                                  \"value\": 1\n                                }\n                              ]\n                            }\n                          ]\n                        }\n                      ]\n                    }\n                  ]\n                },\n                {\n                  \"type\": \"word\",\n                  \"name\": \"sum\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"type\": \"apply\",\n      \"operator\": {\n        \"type\": \"word\",\n        \"name\": \"print\"\n      },\n      \"args\": [\n        {\n          \"type\": \"apply\",\n          \"operator\": {\n            \"type\": \"word\",\n            \"name\": \"sum\"\n          },\n          \"args\": [\n            {\n              \"type\": \"apply\",\n              \"operator\": {\n                \"type\": \"word\",\n                \"name\": \"array\"\n              },\n              \"args\": [\n                {\n                  \"type\": \"value\",\n                  \"value\": 1\n                },\n                {\n                  \"type\": \"value\",\n                  \"value\": 2\n                },\n                {\n                  \"type\": \"value\",\n                  \"value\": 3\n                }\n              ]\n            },\n            {\n              \"type\": \"value\",\n              \"value\": 4\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n",
    "url": "/assets/practicas/egg-0/two.egg.evm.html"
  },
  
  {
    "title": "Intrucciones para Mac OS Catalina",
    "excerpt": "\n",
    "content": "La VPN de la ULL usa el protocolo IPSec Cisco y, como en linux, MacOS tiene soporte nativo.\n\nMac OSX de forma nativa soporta la creación de conexiones VPN y podemos\nutilizar esta característica para realizar la conexión VPN (Paso 1) sin\nnecesidad de descargar, configurar y usar GlobalProtect.\n\nEn el panel de control\nde Red pulse el signo + (destacado en un recuadro rojo en la imagen) para\nañadir una conexión y seleccione las opciones e introduzca los datos tal y como\nse muestra en la siguiente imagen, eligiendo como opción “Tipo de VPN” el tipo\n”Cisco IPSec”.\n\n\n\nPulse el botón “Crear” y a continuación “Ajustes de autenticación”. Introduzca los datos que se muestran a\ncontinuación, utilizando como Secr. compart. “preguntar al profesor”.\n\n\n\nUna vez configurada la conexión de VPN de esta forma puede completar el Paso 2\nsegún se indica en el punto 4 de Preguntas Frecuentes. Importante recordar que\nen el campo Nombre de cuenta, hay que poner su nombre de usuario (No añadir\n@ull.edu.es ni @ull.es)\n\n\n\n\n\n\n  See How do I configure the OS X integrated IPSec VPN client?\n\n\n",
    "url": "/pages/vpn-ull.html"
  },
  
  {
    "title": "VSCode",
    "excerpt": "\n",
    "content": "VSCode User Guide\n\n\n    \n    Basic Editing\n    \n\n    \n    Extension Marketplace\n    \n\n    \n    IntelliSense\n    \n\n    \n    Code Navigation\n    \n\n    \n    Refactoring\n    \n\n    \n    Debugging\n    \n\n    \n    Version Control\n    \n\n    \n    Integrated Terminal\n    \n\n    \n    Multi-root Workspaces\n    \n\n    \n    Tasks\n    \n\n    \n    Snippets\n    \n\n    \n    Emmet\n    \n\n    \n    Command Line\n    \n\n    \n    Accessibility\n    \n\n\nVersion Control en VSCode\n\n\n  Using Version Control in VS Code\n  Video Git Version Control in VS Code\n  Video Git in Visual Studio Code\n\n\nCollaboration\n\n\n  Introducing Visual Studio Live Share\n  Vídeo Visual Studio Live Share Demo on VS Code\n\n\nRemote - SSH: Editando con VSCode en una máquina remota via SSH\n\n{% include remote-ssh.md %}\n\nLigatures/ Ligaduras\n\n\n  FireCode GitHub\n  Video tutorial Agregar Fuente ‘Fira Code’ para codificar mejor en JavaScript.\n  Install and validate fonts in Font Book on Mac\n\n\nVSCode: Settings file locations\n\n\n  Depending on your platform, the user settings file is located here:\n    \n      Windows %APPDATA%\\Code\\User\\settings.json\n      macOS $HOME/Library/Application Support/Code/User/settings.json\n      Linux $HOME/.config/Code/User/settings.json\n      The workspace setting file is located under the .vscode folder in your root folder.\n    \n  \n\n\nVS Code Tips and Tricks\n\n\n  VS Code Tips and Tricks Tutorial\n  VS Code Tips and Tricks Tutorial Repo\n  Vídeo de Jesús Torres: Breve intro de cómo programar y depurar C++ con Visual Studio Code + Gatos\n\n\nWeb Bookmarks for VSCode\n\n\n  Web Bookmarks a VSCode Extension by Alejandro Gonzalez Alonso \n(TFG de II de la ULL)\n\n",
    "url": "/assets/temas/introduccion-a-javascript/vscode.html"
  },
  
  {
    "title": "What is a Linker",
    "excerpt": "\n",
    "content": "\n  Linker. Wikipedia\n\n\n{% include image.html \nurl=”https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/Linker.svg/330px-Linker.svg.png” \ndescription=”An illustration of the linking process. Object files and static libraries are assembled into a new library or executable”\nstyle=”\n  background: white;\n  width: 20%;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n“\n %}\n\n{% include image.html url=”https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/Commodore_Grace_M.Hopper%2C_USN%28covered%29.jpg/330px-Commodore_Grace_M.Hopper%2C_USN%28covered%29.jpg”\ndescription=”Rear Admiral (then Commodore) Grace M. Hopper, 1984. By 1952, Hopper had finished her program linker (originally called a compiler), which was written for the A-0 System.”\nstyle=”\n  background: white;\n  width: 20%;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n“\n%}\n",
    "url": "/assets/temas/introduccion-a-pl/what-is-a-linker.html"
  },
  
  {
    "title": "What is PL about?",
    "excerpt": "\n",
    "content": "What is a Compiler: History and Structure\n\n\n  Some Notes about What is a Compiler (google slides) (pdf)\n  What is a Compiler? slides by Eelco Visser. TU Delft. September 2018\n  What is a linker?\n\n\nComplementary References\n\n\n  OO History: Simula and Smalltalk\n  Some History of Functional Programming Languages by D. A. Turner. University of Kent &amp; Middlesex University\n\n\nWhat is a Compiler: Looking Inside Some JS Compilers\n\n\n  Examples with Esprima\n  More Advanced examples from the talk Master the Art of the AST\n\n\n",
    "url": "/assets/temas/introduccion-a-pl/what-is-pl-about.html"
  }
  
]

